
ISO_CAN_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e98  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08009fa8  08009fa8  00019fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3e8  0800a3e8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3e8  0800a3e8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3e8  0800a3e8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e8  0800a3e8  0001a3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3ec  0800a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800a3f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003754  2000006c  0800a45c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037c0  0800a45c  000237c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c488  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004446  00000000  00000000  0003c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  000409a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001275  00000000  00000000  00042180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c17d  00000000  00000000  000433f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c318  00000000  00000000  0005f572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a29b  00000000  00000000  0007b88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006de4  00000000  00000000  00115b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0011c90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f90 	.word	0x08009f90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08009f90 	.word	0x08009f90

08000150 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr

08000164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016a:	f000 fc2f 	bl	80009cc <HAL_Init>
	/* Alloc IsoTpLink statically in RAM */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016e:	f000 f83b 	bl	80001e8 <SystemClock_Config>
//	isotp_init_link(&send_link, CANFRAME_MASTER_ID, send_isotpSendBuf,
//			sizeof(send_isotpSendBuf), send_isotpRecvBuf,
//			sizeof(send_isotpRecvBuf));
//	send_link.receive_arbitration_id = CANFRAME_DISTANCE_ID;

	isotp_init_link(&recv_link, CANFRAME_DISTANCE_ID, recv_isotpSendBuf,
 8000172:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000176:	9301      	str	r3, [sp, #4]
 8000178:	4b13      	ldr	r3, [pc, #76]	; (80001c8 <main+0x64>)
 800017a:	9300      	str	r3, [sp, #0]
 800017c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000180:	4a12      	ldr	r2, [pc, #72]	; (80001cc <main+0x68>)
 8000182:	2105      	movs	r1, #5
 8000184:	4812      	ldr	r0, [pc, #72]	; (80001d0 <main+0x6c>)
 8000186:	f008 fcd3 	bl	8008b30 <isotp_init_link>
			sizeof(recv_isotpSendBuf), recv_isotpRecvBuf,
			sizeof(recv_isotpRecvBuf));
	recv_link.receive_arbitration_id = CANFRAME_MASTER_ID;
 800018a:	4b11      	ldr	r3, [pc, #68]	; (80001d0 <main+0x6c>)
 800018c:	2203      	movs	r2, #3
 800018e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000190:	f000 f920 	bl	80003d4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000194:	f000 f86e 	bl	8000274 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000198:	f000 f8f2 	bl	8000380 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800019c:	f000 f8a0 	bl	80002e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	CAN_OS_Init(&CANmain, &hcan);
 80001a0:	490c      	ldr	r1, [pc, #48]	; (80001d4 <main+0x70>)
 80001a2:	480d      	ldr	r0, [pc, #52]	; (80001d8 <main+0x74>)
 80001a4:	f007 ff59 	bl	800805a <CAN_OS_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001a8:	f003 fc86 	bl	8003ab8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	SyncPrintf_Init();
 80001ac:	f008 f910 	bl	80083d0 <SyncPrintf_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001b0:	4a0a      	ldr	r2, [pc, #40]	; (80001dc <main+0x78>)
 80001b2:	2100      	movs	r1, #0
 80001b4:	480a      	ldr	r0, [pc, #40]	; (80001e0 <main+0x7c>)
 80001b6:	f003 fd0d 	bl	8003bd4 <osThreadNew>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a09      	ldr	r2, [pc, #36]	; (80001e4 <main+0x80>)
 80001be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001c0:	f003 fcac 	bl	8003b1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80001c4:	e7fe      	b.n	80001c4 <main+0x60>
 80001c6:	bf00      	nop
 80001c8:	20000200 	.word	0x20000200
 80001cc:	200003f4 	.word	0x200003f4
 80001d0:	200001c0 	.word	0x200001c0
 80001d4:	20000088 	.word	0x20000088
 80001d8:	200005e8 	.word	0x200005e8
 80001dc:	0800a2d8 	.word	0x0800a2d8
 80001e0:	080004b5 	.word	0x080004b5
 80001e4:	2000017c 	.word	0x2000017c

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b090      	sub	sp, #64	; 0x40
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f008 fea2 	bl	8008f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020a:	2301      	movs	r3, #1
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800020e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000212:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000218:	2301      	movs	r3, #1
 800021a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021c:	2302      	movs	r3, #2
 800021e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000226:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800022a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022c:	f107 0318 	add.w	r3, r7, #24
 8000230:	4618      	mov	r0, r3
 8000232:	f001 ffa1 	bl	8002178 <HAL_RCC_OscConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800023c:	f000 f97c 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000240:	230f      	movs	r3, #15
 8000242:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000244:	2302      	movs	r3, #2
 8000246:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2102      	movs	r1, #2
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fa0e 	bl	800267c <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000266:	f000 f967 	bl	8000538 <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3740      	adds	r7, #64	; 0x40
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <MX_CAN_Init+0x64>)
 800027a:	4a18      	ldr	r2, [pc, #96]	; (80002dc <MX_CAN_Init+0x68>)
 800027c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <MX_CAN_Init+0x64>)
 8000280:	2204      	movs	r2, #4
 8000282:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <MX_CAN_Init+0x64>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800028a:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <MX_CAN_Init+0x64>)
 800028c:	2200      	movs	r2, #0
 800028e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000290:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <MX_CAN_Init+0x64>)
 8000292:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000296:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <MX_CAN_Init+0x64>)
 800029a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800029e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <MX_CAN_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <MX_CAN_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <MX_CAN_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <MX_CAN_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <MX_CAN_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <MX_CAN_Init+0x64>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <MX_CAN_Init+0x64>)
 80002c6:	f000 fbe3 	bl	8000a90 <HAL_CAN_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002d0:	f000 f932 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000088 	.word	0x20000088
 80002dc:	40006400 	.word	0x40006400

080002e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e6:	f107 0308 	add.w	r3, r7, #8
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_TIM1_Init+0x98>)
 80002fe:	4a1f      	ldr	r2, [pc, #124]	; (800037c <MX_TIM1_Init+0x9c>)
 8000300:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000302:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <MX_TIM1_Init+0x98>)
 8000304:	2247      	movs	r2, #71	; 0x47
 8000306:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_TIM1_Init+0x98>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_TIM1_Init+0x98>)
 8000310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000314:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_TIM1_Init+0x98>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_TIM1_Init+0x98>)
 800031e:	2200      	movs	r2, #0
 8000320:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_TIM1_Init+0x98>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000328:	4813      	ldr	r0, [pc, #76]	; (8000378 <MX_TIM1_Init+0x98>)
 800032a:	f002 fb35 	bl	8002998 <HAL_TIM_Base_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000334:	f000 f900 	bl	8000538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	4619      	mov	r1, r3
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <MX_TIM1_Init+0x98>)
 8000346:	f002 fb76 	bl	8002a36 <HAL_TIM_ConfigClockSource>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000350:	f000 f8f2 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000358:	2300      	movs	r3, #0
 800035a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800035c:	463b      	mov	r3, r7
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_TIM1_Init+0x98>)
 8000362:	f002 fd27 	bl	8002db4 <HAL_TIMEx_MasterConfigSynchronization>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800036c:	f000 f8e4 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	200000ec 	.word	0x200000ec
 800037c:	40012c00 	.word	0x40012c00

08000380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 8000386:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <MX_USART1_UART_Init+0x50>)
 8000388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 800038c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_USART1_UART_Init+0x4c>)
 80003b8:	f002 fd5a 	bl	8002e70 <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003c2:	f000 f8b9 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000134 	.word	0x20000134
 80003d0:	40013800 	.word	0x40013800

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_GPIO_Init+0x90>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <MX_GPIO_Init+0x90>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_GPIO_Init+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a17      	ldr	r2, [pc, #92]	; (8000464 <MX_GPIO_Init+0x90>)
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0320 	and.w	r3, r3, #32
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a11      	ldr	r2, [pc, #68]	; (8000464 <MX_GPIO_Init+0x90>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_GPIO_Init+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000430:	2201      	movs	r2, #1
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	480c      	ldr	r0, [pc, #48]	; (8000468 <MX_GPIO_Init+0x94>)
 8000438:	f001 fe86 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800043c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	2301      	movs	r3, #1
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	4619      	mov	r1, r3
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_GPIO_Init+0x94>)
 8000456:	f001 fcf3 	bl	8001e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000
 8000468:	40011000 	.word	0x40011000

0800046c <CAN_TxCallback>:

/* USER CODE BEGIN 4 */
void CAN_TxCallback(CAN_HandleTypeDef *hcan) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	if (CANmain.hcan == hcan) {
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <CAN_TxCallback+0x20>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	429a      	cmp	r2, r3
 800047c:	d102      	bne.n	8000484 <CAN_TxCallback+0x18>
		CAN_OS_TxCplt_CB(&CANmain);
 800047e:	4803      	ldr	r0, [pc, #12]	; (800048c <CAN_TxCallback+0x20>)
 8000480:	f007 ff44 	bl	800830c <CAN_OS_TxCplt_CB>
	}
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	200005e8 	.word	0x200005e8

08000490 <CAN_RxFifo0Callback>:
void CAN_RxFifo0Callback(CAN_HandleTypeDef *hcan) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	if (CANmain.hcan == hcan) {
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <CAN_RxFifo0Callback+0x20>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d102      	bne.n	80004a8 <CAN_RxFifo0Callback+0x18>
		CAN_OS_RxFifo0Cplt_CB(&CANmain);
 80004a2:	4803      	ldr	r0, [pc, #12]	; (80004b0 <CAN_RxFifo0Callback+0x20>)
 80004a4:	f007 ff14 	bl	80082d0 <CAN_OS_RxFifo0Cplt_CB>
	}
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200005e8 	.word	0x200005e8

080004b4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateTxCB_ID, CAN_TxCallback);
 80004bc:	4a18      	ldr	r2, [pc, #96]	; (8000520 <StartDefaultTask+0x6c>)
 80004be:	2100      	movs	r1, #0
 80004c0:	4818      	ldr	r0, [pc, #96]	; (8000524 <StartDefaultTask+0x70>)
 80004c2:	f007 ff30 	bl	8008326 <CAN_OS_RegisterCB>
	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateRxFifo0_ID, CAN_RxFifo0Callback);
 80004c6:	4a18      	ldr	r2, [pc, #96]	; (8000528 <StartDefaultTask+0x74>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	4816      	ldr	r0, [pc, #88]	; (8000524 <StartDefaultTask+0x70>)
 80004cc:	f007 ff2b 	bl	8008326 <CAN_OS_RegisterCB>

	CANFrame_Init(&CANFrame_Handler, &CANmain, CANFRAME_DISTANCE_ID,
 80004d0:	2300      	movs	r3, #0
 80004d2:	2205      	movs	r2, #5
 80004d4:	4913      	ldr	r1, [pc, #76]	; (8000524 <StartDefaultTask+0x70>)
 80004d6:	4815      	ldr	r0, [pc, #84]	; (800052c <StartDefaultTask+0x78>)
 80004d8:	f007 fd40 	bl	8007f5c <CANFrame_Init>
	CAN_RX_FIFO0);
	CAN_OS_Start(&CANmain);
 80004dc:	4811      	ldr	r0, [pc, #68]	; (8000524 <StartDefaultTask+0x70>)
 80004de:	f007 fdfa 	bl	80080d6 <CAN_OS_Start>
	osThreadSetPriority(defaultTaskHandle, osPriorityBelowNormal);
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <StartDefaultTask+0x7c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2110      	movs	r1, #16
 80004e8:	4618      	mov	r0, r3
 80004ea:	f003 fc1d 	bl	8003d28 <osThreadSetPriority>
//	CANFrame_RegCB(&CANFrame_Handler, CANFRAME_RCVCPLT_CB_ID,
//			CANFrame_RcvDoneHandler);
	int status = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
	for (;;) {
		status =
				SyncPrintf(
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <StartDefaultTask+0x78>)
 80004f4:	f8d3 1318 	ldr.w	r1, [r3, #792]	; 0x318
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <StartDefaultTask+0x78>)
 80004fa:	f8d3 231c 	ldr.w	r2, [r3, #796]	; 0x31c
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <StartDefaultTask+0x78>)
 8000500:	f8d3 0320 	ldr.w	r0, [r3, #800]	; 0x320
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <StartDefaultTask+0x78>)
 8000506:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	4603      	mov	r3, r0
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <StartDefaultTask+0x80>)
 8000510:	f007 ff6c 	bl	80083ec <SyncPrintf>
 8000514:	60f8      	str	r0, [r7, #12]
						CANFrame_Handler.SendSuccessCounter,
						CANFrame_Handler.SendFailedCounter,
						CANFrame_Handler.RcvSucessCounter,
						CANFrame_Handler.RcvFailedCounter);
//		SyncPrintf("Hello \r\n");
		osDelay(500);
 8000516:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800051a:	f003 fc41 	bl	8003da0 <osDelay>
		status =
 800051e:	e7e8      	b.n	80004f2 <StartDefaultTask+0x3e>
 8000520:	0800046d 	.word	0x0800046d
 8000524:	200005e8 	.word	0x200005e8
 8000528:	08000491 	.word	0x08000491
 800052c:	200005f8 	.word	0x200005f8
 8000530:	2000017c 	.word	0x2000017c
 8000534:	08009fc0 	.word	0x08009fc0

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>
	...

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <HAL_MspInit+0x68>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_MspInit+0x68>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_MspInit+0x68>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_MspInit+0x68>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a11      	ldr	r2, [pc, #68]	; (80005ac <HAL_MspInit+0x68>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_MspInit+0x68>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	210f      	movs	r1, #15
 800057e:	f06f 0001 	mvn.w	r0, #1
 8000582:	f001 fb74 	bl	8001c6e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <HAL_MspInit+0x6c>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_MspInit+0x6c>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010000 	.word	0x40010000

080005b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a28      	ldr	r2, [pc, #160]	; (8000670 <HAL_CAN_MspInit+0xbc>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d149      	bne.n	8000668 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <HAL_CAN_MspInit+0xc0>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	4a26      	ldr	r2, [pc, #152]	; (8000674 <HAL_CAN_MspInit+0xc0>)
 80005da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005de:	61d3      	str	r3, [r2, #28]
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <HAL_CAN_MspInit+0xc0>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <HAL_CAN_MspInit+0xc0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a20      	ldr	r2, [pc, #128]	; (8000674 <HAL_CAN_MspInit+0xc0>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <HAL_CAN_MspInit+0xc0>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	4817      	ldr	r0, [pc, #92]	; (8000678 <HAL_CAN_MspInit+0xc4>)
 800061a:	f001 fc11 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	4811      	ldr	r0, [pc, #68]	; (8000678 <HAL_CAN_MspInit+0xc4>)
 8000634:	f001 fc04 	bl	8001e40 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2105      	movs	r1, #5
 800063c:	2014      	movs	r0, #20
 800063e:	f001 fb16 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000642:	2014      	movs	r0, #20
 8000644:	f001 fb2f 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2105      	movs	r1, #5
 800064c:	2015      	movs	r0, #21
 800064e:	f001 fb0e 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000652:	2015      	movs	r0, #21
 8000654:	f001 fb27 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2105      	movs	r1, #5
 800065c:	2016      	movs	r0, #22
 800065e:	f001 fb06 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000662:	2016      	movs	r0, #22
 8000664:	f001 fb1f 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40006400 	.word	0x40006400
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800

0800067c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <HAL_TIM_Base_MspInit+0x34>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d10b      	bne.n	80006a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_TIM_Base_MspInit+0x38>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_TIM_Base_MspInit+0x38>)
 8000694:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_TIM_Base_MspInit+0x38>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40012c00 	.word	0x40012c00
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a20      	ldr	r2, [pc, #128]	; (8000754 <HAL_UART_MspInit+0x9c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d139      	bne.n	800074c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a18      	ldr	r2, [pc, #96]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_UART_MspInit+0xa0>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	480f      	ldr	r0, [pc, #60]	; (800075c <HAL_UART_MspInit+0xa4>)
 800071e:	f001 fb8f 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <HAL_UART_MspInit+0xa4>)
 8000738:	f001 fb82 	bl	8001e40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2105      	movs	r1, #5
 8000740:	2025      	movs	r0, #37	; 0x25
 8000742:	f001 fa94 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000746:	2025      	movs	r0, #37	; 0x25
 8000748:	f001 faad 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40013800 	.word	0x40013800
 8000758:	40021000 	.word	0x40021000
 800075c:	40010800 	.word	0x40010800

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078e:	f000 f963 	bl	8000a58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000792:	f006 fa7b 	bl	8006c8c <xTaskGetSchedulerState>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d001      	beq.n	80007a0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800079c:	f007 f914 	bl	80079c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007aa:	f000 ff4e 	bl	800164a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000088 	.word	0x20000088

080007b8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <CAN1_RX1_IRQHandler+0x10>)
 80007be:	f000 ff44 	bl	800164a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000088 	.word	0x20000088

080007cc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <CAN1_SCE_IRQHandler+0x10>)
 80007d2:	f000 ff3a 	bl	800164a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000088 	.word	0x20000088

080007e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <USART1_IRQHandler+0x10>)
 80007e6:	f002 fc17 	bl	8003018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000134 	.word	0x20000134

080007f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return 1;
 80007f8:	2301      	movs	r3, #1
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <_kill>:

int _kill(int pid, int sig)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800080c:	f008 fbe6 	bl	8008fdc <__errno>
 8000810:	4603      	mov	r3, r0
 8000812:	2216      	movs	r2, #22
 8000814:	601a      	str	r2, [r3, #0]
  return -1;
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_exit>:

void _exit (int status)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800082a:	f04f 31ff 	mov.w	r1, #4294967295
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ffe7 	bl	8000802 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000834:	e7fe      	b.n	8000834 <_exit+0x12>

08000836 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	e00a      	b.n	800085e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000848:	f3af 8000 	nop.w
 800084c:	4601      	mov	r1, r0
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	60ba      	str	r2, [r7, #8]
 8000854:	b2ca      	uxtb	r2, r1
 8000856:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	dbf0      	blt.n	8000848 <_read+0x12>
  }

  return len;
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	e009      	b.n	8000896 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	60ba      	str	r2, [r7, #8]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3301      	adds	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	429a      	cmp	r2, r3
 800089c:	dbf1      	blt.n	8000882 <_write+0x12>
  }
  return len;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_close>:

int _close(int file)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ce:	605a      	str	r2, [r3, #4]
  return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <_isatty>:

int _isatty(int file)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008e4:	2301      	movs	r3, #1
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f008 fb50 	bl	8008fdc <__errno>
 800093c:	4603      	mov	r3, r0
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <_sbrk+0x64>)
 8000958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20005000 	.word	0x20005000
 8000968:	00000400 	.word	0x00000400
 800096c:	20000920 	.word	0x20000920
 8000970:	200037c0 	.word	0x200037c0

08000974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000980:	f7ff fff8 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000986:	490c      	ldr	r1, [pc, #48]	; (80009b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000988:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800099c:	4c09      	ldr	r4, [pc, #36]	; (80009c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f008 fb1d 	bl	8008fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff fbd9 	bl	8000164 <main>
  bx lr
 80009b2:	4770      	bx	lr
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80009bc:	0800a3f0 	.word	0x0800a3f0
  ldr r2, =_sbss
 80009c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80009c4:	200037c0 	.word	0x200037c0

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x28>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f001 f93b 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	200f      	movs	r0, #15
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fdac 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 f953 	bl	8001cc2 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f001 f91b 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x1c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x20>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_IncTick+0x20>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000924 	.word	0x20000924

08000a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <HAL_GetTick+0x10>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	20000924 	.word	0x20000924

08000a90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e11c      	b.n	8000cdc <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d131      	bne.n	8000b12 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a8c      	ldr	r2, [pc, #560]	; (8000ce4 <HAL_CAN_Init+0x254>)
 8000ab2:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a8c      	ldr	r2, [pc, #560]	; (8000ce8 <HAL_CAN_Init+0x258>)
 8000ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a8b      	ldr	r2, [pc, #556]	; (8000cec <HAL_CAN_Init+0x25c>)
 8000abe:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a8b      	ldr	r2, [pc, #556]	; (8000cf0 <HAL_CAN_Init+0x260>)
 8000ac4:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a8a      	ldr	r2, [pc, #552]	; (8000cf4 <HAL_CAN_Init+0x264>)
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a8a      	ldr	r2, [pc, #552]	; (8000cf8 <HAL_CAN_Init+0x268>)
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a89      	ldr	r2, [pc, #548]	; (8000cfc <HAL_CAN_Init+0x26c>)
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a89      	ldr	r2, [pc, #548]	; (8000d00 <HAL_CAN_Init+0x270>)
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a88      	ldr	r2, [pc, #544]	; (8000d04 <HAL_CAN_Init+0x274>)
 8000ae2:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a88      	ldr	r2, [pc, #544]	; (8000d08 <HAL_CAN_Init+0x278>)
 8000ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a87      	ldr	r2, [pc, #540]	; (8000d0c <HAL_CAN_Init+0x27c>)
 8000aee:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a87      	ldr	r2, [pc, #540]	; (8000d10 <HAL_CAN_Init+0x280>)
 8000af4:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a86      	ldr	r2, [pc, #536]	; (8000d14 <HAL_CAN_Init+0x284>)
 8000afa:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a84      	ldr	r2, [pc, #528]	; (8000d18 <HAL_CAN_Init+0x288>)
 8000b08:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f042 0201 	orr.w	r2, r2, #1
 8000b20:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b22:	f7ff ffab 	bl	8000a7c <HAL_GetTick>
 8000b26:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b28:	e012      	b.n	8000b50 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b2a:	f7ff ffa7 	bl	8000a7c <HAL_GetTick>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	2b0a      	cmp	r3, #10
 8000b36:	d90b      	bls.n	8000b50 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2205      	movs	r2, #5
 8000b48:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e0c5      	b.n	8000cdc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0e5      	beq.n	8000b2a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 0202 	bic.w	r2, r2, #2
 8000b6c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b6e:	f7ff ff85 	bl	8000a7c <HAL_GetTick>
 8000b72:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b74:	e012      	b.n	8000b9c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b76:	f7ff ff81 	bl	8000a7c <HAL_GetTick>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	2b0a      	cmp	r3, #10
 8000b82:	d90b      	bls.n	8000b9c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b88:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2205      	movs	r2, #5
 8000b94:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e09f      	b.n	8000cdc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1e5      	bne.n	8000b76 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7e1b      	ldrb	r3, [r3, #24]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d108      	bne.n	8000bc4 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e007      	b.n	8000bd4 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7e5b      	ldrb	r3, [r3, #25]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d108      	bne.n	8000bee <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e007      	b.n	8000bfe <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7e9b      	ldrb	r3, [r3, #26]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d108      	bne.n	8000c18 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f042 0220 	orr.w	r2, r2, #32
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e007      	b.n	8000c28 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 0220 	bic.w	r2, r2, #32
 8000c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7edb      	ldrb	r3, [r3, #27]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d108      	bne.n	8000c42 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 0210 	bic.w	r2, r2, #16
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f042 0210 	orr.w	r2, r2, #16
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7f1b      	ldrb	r3, [r3, #28]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d108      	bne.n	8000c6c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0208 	orr.w	r2, r2, #8
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0208 	bic.w	r2, r2, #8
 8000c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7f5b      	ldrb	r3, [r3, #29]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d108      	bne.n	8000c96 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f042 0204 	orr.w	r2, r2, #4
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e007      	b.n	8000ca6 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0204 	bic.w	r2, r2, #4
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	ea42 0103 	orr.w	r1, r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	08001a41 	.word	0x08001a41
 8000ce8:	08001a53 	.word	0x08001a53
 8000cec:	08001a65 	.word	0x08001a65
 8000cf0:	08001a77 	.word	0x08001a77
 8000cf4:	080019d5 	.word	0x080019d5
 8000cf8:	080019e7 	.word	0x080019e7
 8000cfc:	080019f9 	.word	0x080019f9
 8000d00:	08001a0b 	.word	0x08001a0b
 8000d04:	08001a1d 	.word	0x08001a1d
 8000d08:	08001a2f 	.word	0x08001a2f
 8000d0c:	08001a89 	.word	0x08001a89
 8000d10:	08001a9b 	.word	0x08001a9b
 8000d14:	08001aad 	.word	0x08001aad
 8000d18:	080005b5 	.word	0x080005b5

08000d1c <HAL_CAN_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID,
                                           void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	460b      	mov	r3, r1
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d107      	bne.n	8000d44 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e094      	b.n	8000e6e <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d168      	bne.n	8000e22 <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	2b0e      	cmp	r3, #14
 8000d54:	d85c      	bhi.n	8000e10 <HAL_CAN_RegisterCallback+0xf4>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <HAL_CAN_RegisterCallback+0x40>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000d99 	.word	0x08000d99
 8000d60:	08000da1 	.word	0x08000da1
 8000d64:	08000da9 	.word	0x08000da9
 8000d68:	08000db1 	.word	0x08000db1
 8000d6c:	08000db9 	.word	0x08000db9
 8000d70:	08000dc1 	.word	0x08000dc1
 8000d74:	08000dc9 	.word	0x08000dc9
 8000d78:	08000dd1 	.word	0x08000dd1
 8000d7c:	08000dd9 	.word	0x08000dd9
 8000d80:	08000de1 	.word	0x08000de1
 8000d84:	08000de9 	.word	0x08000de9
 8000d88:	08000df1 	.word	0x08000df1
 8000d8c:	08000df9 	.word	0x08000df9
 8000d90:	08000e01 	.word	0x08000e01
 8000d94:	08000e09 	.word	0x08000e09
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8000d9e:	e065      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8000da6:	e061      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8000dae:	e05d      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8000db6:	e059      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8000dbe:	e055      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 8000dc6:	e051      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 8000dce:	e04d      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8000dd6:	e049      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8000dde:	e045      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8000de6:	e041      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8000dee:	e03d      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8000df6:	e039      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8000dfe:	e035      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8000e06:	e031      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8000e0e:	e02d      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	75fb      	strb	r3, [r7, #23]
        break;
 8000e20:	e024      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d116      	bne.n	8000e5c <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 8000e2e:	7afb      	ldrb	r3, [r7, #11]
 8000e30:	2b0d      	cmp	r3, #13
 8000e32:	d002      	beq.n	8000e3a <HAL_CAN_RegisterCallback+0x11e>
 8000e34:	2b0e      	cmp	r3, #14
 8000e36:	d004      	beq.n	8000e42 <HAL_CAN_RegisterCallback+0x126>
 8000e38:	e007      	b.n	8000e4a <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8000e40:	e014      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8000e48:	e010      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	75fb      	strb	r3, [r7, #23]
        break;
 8000e5a:	e007      	b.n	8000e6c <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status =  HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e90:	7cfb      	ldrb	r3, [r7, #19]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d003      	beq.n	8000e9e <HAL_CAN_ConfigFilter+0x26>
 8000e96:	7cfb      	ldrb	r3, [r7, #19]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	f040 80aa 	bne.w	8000ff2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ea4:	f043 0201 	orr.w	r2, r3, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	69db      	ldr	r3, [r3, #28]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d123      	bne.n	8000f20 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000efa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3248      	adds	r2, #72	; 0x48
 8000f00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f16:	6979      	ldr	r1, [r7, #20]
 8000f18:	3348      	adds	r3, #72	; 0x48
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	440b      	add	r3, r1
 8000f1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d122      	bne.n	8000f6e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	431a      	orrs	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3248      	adds	r2, #72	; 0x48
 8000f4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f64:	6979      	ldr	r1, [r7, #20]
 8000f66:	3348      	adds	r3, #72	; 0x48
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d109      	bne.n	8000f8a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	401a      	ands	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f88:	e007      	b.n	8000f9a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	431a      	orrs	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d109      	bne.n	8000fb6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	401a      	ands	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fb4:	e007      	b.n	8000fc6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d107      	bne.n	8000fde <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fe4:	f023 0201 	bic.w	r2, r3, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e006      	b.n	8001000 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
  }
}
 8001000:	4618      	mov	r0, r3
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d12e      	bne.n	800107c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2202      	movs	r2, #2
 8001022:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001036:	f7ff fd21 	bl	8000a7c <HAL_GetTick>
 800103a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800103c:	e012      	b.n	8001064 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800103e:	f7ff fd1d 	bl	8000a7c <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d90b      	bls.n	8001064 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2205      	movs	r2, #5
 800105c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e012      	b.n	800108a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1e5      	bne.n	800103e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	e006      	b.n	800108a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
  }
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d133      	bne.n	800110e <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f042 0201 	orr.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010b6:	f7ff fce1 	bl	8000a7c <HAL_GetTick>
 80010ba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010bc:	e012      	b.n	80010e4 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010be:	f7ff fcdd 	bl	8000a7c <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d90b      	bls.n	80010e4 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2205      	movs	r2, #5
 80010dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e01b      	b.n	800111c <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0e5      	beq.n	80010be <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0202 	bic.w	r2, r2, #2
 8001100:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e006      	b.n	800111c <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001138:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001142:	7ffb      	ldrb	r3, [r7, #31]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d003      	beq.n	8001150 <HAL_CAN_AddTxMessage+0x2c>
 8001148:	7ffb      	ldrb	r3, [r7, #31]
 800114a:	2b02      	cmp	r3, #2
 800114c:	f040 80ad 	bne.w	80012aa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10a      	bne.n	8001170 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 8095 	beq.w	800129a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	0e1b      	lsrs	r3, r3, #24
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800117a:	2201      	movs	r2, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10d      	bne.n	80011a8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001196:	68f9      	ldr	r1, [r7, #12]
 8001198:	6809      	ldr	r1, [r1, #0]
 800119a:	431a      	orrs	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3318      	adds	r3, #24
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	440b      	add	r3, r1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e00f      	b.n	80011c8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011b8:	68f9      	ldr	r1, [r7, #12]
 80011ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3318      	adds	r3, #24
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	440b      	add	r3, r1
 80011c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6819      	ldr	r1, [r3, #0]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3318      	adds	r3, #24
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	440b      	add	r3, r1
 80011d8:	3304      	adds	r3, #4
 80011da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	7d1b      	ldrb	r3, [r3, #20]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d111      	bne.n	8001208 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3318      	adds	r3, #24
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	3304      	adds	r3, #4
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	6811      	ldr	r1, [r2, #0]
 80011f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3318      	adds	r3, #24
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	440b      	add	r3, r1
 8001204:	3304      	adds	r3, #4
 8001206:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3307      	adds	r3, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	061a      	lsls	r2, r3, #24
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3306      	adds	r3, #6
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	041b      	lsls	r3, r3, #16
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3305      	adds	r3, #5
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	4313      	orrs	r3, r2
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	3204      	adds	r2, #4
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	4610      	mov	r0, r2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	6811      	ldr	r1, [r2, #0]
 8001230:	ea43 0200 	orr.w	r2, r3, r0
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	440b      	add	r3, r1
 800123a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800123e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3303      	adds	r3, #3
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	061a      	lsls	r2, r3, #24
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3302      	adds	r3, #2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3301      	adds	r3, #1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	4313      	orrs	r3, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	4610      	mov	r0, r2
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	6811      	ldr	r1, [r2, #0]
 8001266:	ea43 0200 	orr.w	r2, r3, r0
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	440b      	add	r3, r1
 8001270:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001274:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3318      	adds	r3, #24
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4413      	add	r3, r2
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	6811      	ldr	r1, [r2, #0]
 8001288:	f043 0201 	orr.w	r2, r3, #1
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3318      	adds	r3, #24
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	440b      	add	r3, r1
 8001294:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e00e      	b.n	80012b8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e006      	b.n	80012b8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
  }
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3724      	adds	r7, #36	; 0x24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d002      	beq.n	80012e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d11d      	bne.n	800131e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	3301      	adds	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d002      	beq.n	800134c <HAL_CAN_IsTxMessagePending+0x22>
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d10b      	bne.n	8001364 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	069b      	lsls	r3, r3, #26
 8001356:	401a      	ands	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	069b      	lsls	r3, r3, #26
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001360:	2301      	movs	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001384:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d003      	beq.n	8001394 <HAL_CAN_GetRxMessage+0x24>
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b02      	cmp	r3, #2
 8001390:	f040 8103 	bne.w	800159a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10e      	bne.n	80013b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d116      	bne.n	80013d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0f7      	b.n	80015a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d107      	bne.n	80013d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e0e8      	b.n	80015a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	331b      	adds	r3, #27
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	4413      	add	r3, r2
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0204 	and.w	r2, r3, #4
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10c      	bne.n	800140e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	331b      	adds	r3, #27
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	0d5b      	lsrs	r3, r3, #21
 8001404:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e00b      	b.n	8001426 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	331b      	adds	r3, #27
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	08db      	lsrs	r3, r3, #3
 800141e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	331b      	adds	r3, #27
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0202 	and.w	r2, r3, #2
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	331b      	adds	r3, #27
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	4413      	add	r3, r2
 8001448:	3304      	adds	r3, #4
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2208      	movs	r2, #8
 8001458:	611a      	str	r2, [r3, #16]
 800145a:	e00b      	b.n	8001474 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	331b      	adds	r3, #27
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	3304      	adds	r3, #4
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 020f 	and.w	r2, r3, #15
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	331b      	adds	r3, #27
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	3304      	adds	r3, #4
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	b2da      	uxtb	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	331b      	adds	r3, #27
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	3304      	adds	r3, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0c1b      	lsrs	r3, r3, #16
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	0a1a      	lsrs	r2, r3, #8
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4413      	add	r3, r2
 80014de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0c1a      	lsrs	r2, r3, #16
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	3302      	adds	r3, #2
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0e1a      	lsrs	r2, r3, #24
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	3303      	adds	r3, #3
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3304      	adds	r3, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0a1a      	lsrs	r2, r3, #8
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	3305      	adds	r3, #5
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	4413      	add	r3, r2
 8001544:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0c1a      	lsrs	r2, r3, #16
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	3306      	adds	r3, #6
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	4413      	add	r3, r2
 800155e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	0e1a      	lsrs	r2, r3, #24
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	3307      	adds	r3, #7
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d108      	bne.n	8001586 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0220 	orr.w	r2, r2, #32
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	e007      	b.n	8001596 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0220 	orr.w	r2, r2, #32
 8001594:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e006      	b.n	80015a8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
  }
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015c8:	7afb      	ldrb	r3, [r7, #11]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d002      	beq.n	80015d4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d10f      	bne.n	80015f4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e005      	b.n	80015f4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80015f4:	68fb      	ldr	r3, [r7, #12]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001610:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d002      	beq.n	800161e <HAL_CAN_ActivateNotification+0x1e>
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d109      	bne.n	8001632 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6959      	ldr	r1, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e006      	b.n	8001640 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
  }
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b08a      	sub	sp, #40	; 0x28
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8083 	beq.w	8001798 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d025      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2201      	movs	r2, #1
 80016a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	4798      	blx	r3
 80016b6:	e017      	b.n	80016e8 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ca:	e00d      	b.n	80016e8 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
 80016de:	e003      	b.n	80016e8 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d026      	beq.n	8001740 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
 800170e:	e017      	b.n	8001740 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
 8001722:	e00d      	b.n	8001740 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
 8001736:	e003      	b.n	8001740 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d026      	beq.n	8001798 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001752:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
 8001766:	e017      	b.n	8001798 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
 800177a:	e00d      	b.n	8001798 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d004      	beq.n	8001790 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	e003      	b.n	8001798 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d007      	beq.n	80017bc <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2210      	movs	r2, #16
 80017ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00c      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2208      	movs	r2, #8
 80017d6:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00a      	beq.n	8001800 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00c      	beq.n	8001824 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d007      	beq.n	8001824 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2210      	movs	r2, #16
 8001822:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00c      	beq.n	8001848 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2208      	movs	r2, #8
 800183e:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00a      	beq.n	8001868 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00c      	beq.n	800188c <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	d007      	beq.n	800188c <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2210      	movs	r2, #16
 8001882:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00c      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2208      	movs	r2, #8
 80018a6:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d07b      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d072      	beq.n	80019aa <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d008      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d008      	beq.n	80018fc <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800191e:	2b00      	cmp	r3, #0
 8001920:	d043      	beq.n	80019aa <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001928:	2b00      	cmp	r3, #0
 800192a:	d03e      	beq.n	80019aa <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001932:	2b60      	cmp	r3, #96	; 0x60
 8001934:	d02b      	beq.n	800198e <HAL_CAN_IRQHandler+0x344>
 8001936:	2b60      	cmp	r3, #96	; 0x60
 8001938:	d82e      	bhi.n	8001998 <HAL_CAN_IRQHandler+0x34e>
 800193a:	2b50      	cmp	r3, #80	; 0x50
 800193c:	d022      	beq.n	8001984 <HAL_CAN_IRQHandler+0x33a>
 800193e:	2b50      	cmp	r3, #80	; 0x50
 8001940:	d82a      	bhi.n	8001998 <HAL_CAN_IRQHandler+0x34e>
 8001942:	2b40      	cmp	r3, #64	; 0x40
 8001944:	d019      	beq.n	800197a <HAL_CAN_IRQHandler+0x330>
 8001946:	2b40      	cmp	r3, #64	; 0x40
 8001948:	d826      	bhi.n	8001998 <HAL_CAN_IRQHandler+0x34e>
 800194a:	2b30      	cmp	r3, #48	; 0x30
 800194c:	d010      	beq.n	8001970 <HAL_CAN_IRQHandler+0x326>
 800194e:	2b30      	cmp	r3, #48	; 0x30
 8001950:	d822      	bhi.n	8001998 <HAL_CAN_IRQHandler+0x34e>
 8001952:	2b10      	cmp	r3, #16
 8001954:	d002      	beq.n	800195c <HAL_CAN_IRQHandler+0x312>
 8001956:	2b20      	cmp	r3, #32
 8001958:	d005      	beq.n	8001966 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800195a:	e01d      	b.n	8001998 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001964:	e019      	b.n	800199a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800196e:	e014      	b.n	800199a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	f043 0320 	orr.w	r3, r3, #32
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001978:	e00f      	b.n	800199a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001982:	e00a      	b.n	800199a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800198c:	e005      	b.n	800199a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001996:	e000      	b.n	800199a <HAL_CAN_IRQHandler+0x350>
            break;
 8001998:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019a8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2204      	movs	r2, #4
 80019b0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d009      	beq.n	80019cc <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
	...

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4906      	ldr	r1, [pc, #24]	; (8001b58 <__NVIC_EnableIRQ+0x34>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff90 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff2d 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff42 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff90 	bl	8001bb0 <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5f 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff35 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa2 	bl	8001c14 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d008      	beq.n	8001d04 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e020      	b.n	8001d46 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 020e 	bic.w	r2, r2, #14
 8001d12:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d005      	beq.n	8001d74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
 8001d72:	e051      	b.n	8001e18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 020e 	bic.w	r2, r2, #14
 8001d82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <HAL_DMA_Abort_IT+0xd4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d029      	beq.n	8001df2 <HAL_DMA_Abort_IT+0xa2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <HAL_DMA_Abort_IT+0xd8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d022      	beq.n	8001dee <HAL_DMA_Abort_IT+0x9e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <HAL_DMA_Abort_IT+0xdc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01a      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x98>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1e      	ldr	r2, [pc, #120]	; (8001e30 <HAL_DMA_Abort_IT+0xe0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d012      	beq.n	8001de2 <HAL_DMA_Abort_IT+0x92>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <HAL_DMA_Abort_IT+0xe4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00a      	beq.n	8001ddc <HAL_DMA_Abort_IT+0x8c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <HAL_DMA_Abort_IT+0xe8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d102      	bne.n	8001dd6 <HAL_DMA_Abort_IT+0x86>
 8001dd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dd4:	e00e      	b.n	8001df4 <HAL_DMA_Abort_IT+0xa4>
 8001dd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dda:	e00b      	b.n	8001df4 <HAL_DMA_Abort_IT+0xa4>
 8001ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de0:	e008      	b.n	8001df4 <HAL_DMA_Abort_IT+0xa4>
 8001de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de6:	e005      	b.n	8001df4 <HAL_DMA_Abort_IT+0xa4>
 8001de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dec:	e002      	b.n	8001df4 <HAL_DMA_Abort_IT+0xa4>
 8001dee:	2310      	movs	r3, #16
 8001df0:	e000      	b.n	8001df4 <HAL_DMA_Abort_IT+0xa4>
 8001df2:	2301      	movs	r3, #1
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_DMA_Abort_IT+0xec>)
 8001df6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
    } 
  }
  return status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40020008 	.word	0x40020008
 8001e28:	4002001c 	.word	0x4002001c
 8001e2c:	40020030 	.word	0x40020030
 8001e30:	40020044 	.word	0x40020044
 8001e34:	40020058 	.word	0x40020058
 8001e38:	4002006c 	.word	0x4002006c
 8001e3c:	40020000 	.word	0x40020000

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b08b      	sub	sp, #44	; 0x2c
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e52:	e169      	b.n	8002128 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e54:	2201      	movs	r2, #1
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 8158 	bne.w	8002122 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a9a      	ldr	r2, [pc, #616]	; (80020e0 <HAL_GPIO_Init+0x2a0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d05e      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
 8001e7c:	4a98      	ldr	r2, [pc, #608]	; (80020e0 <HAL_GPIO_Init+0x2a0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d875      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001e82:	4a98      	ldr	r2, [pc, #608]	; (80020e4 <HAL_GPIO_Init+0x2a4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d058      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
 8001e88:	4a96      	ldr	r2, [pc, #600]	; (80020e4 <HAL_GPIO_Init+0x2a4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d86f      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001e8e:	4a96      	ldr	r2, [pc, #600]	; (80020e8 <HAL_GPIO_Init+0x2a8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d052      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
 8001e94:	4a94      	ldr	r2, [pc, #592]	; (80020e8 <HAL_GPIO_Init+0x2a8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d869      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001e9a:	4a94      	ldr	r2, [pc, #592]	; (80020ec <HAL_GPIO_Init+0x2ac>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d04c      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
 8001ea0:	4a92      	ldr	r2, [pc, #584]	; (80020ec <HAL_GPIO_Init+0x2ac>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d863      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001ea6:	4a92      	ldr	r2, [pc, #584]	; (80020f0 <HAL_GPIO_Init+0x2b0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d046      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
 8001eac:	4a90      	ldr	r2, [pc, #576]	; (80020f0 <HAL_GPIO_Init+0x2b0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d85d      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d82a      	bhi.n	8001f0c <HAL_GPIO_Init+0xcc>
 8001eb6:	2b12      	cmp	r3, #18
 8001eb8:	d859      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001eba:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <HAL_GPIO_Init+0x80>)
 8001ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec0:	08001f3b 	.word	0x08001f3b
 8001ec4:	08001f15 	.word	0x08001f15
 8001ec8:	08001f27 	.word	0x08001f27
 8001ecc:	08001f69 	.word	0x08001f69
 8001ed0:	08001f6f 	.word	0x08001f6f
 8001ed4:	08001f6f 	.word	0x08001f6f
 8001ed8:	08001f6f 	.word	0x08001f6f
 8001edc:	08001f6f 	.word	0x08001f6f
 8001ee0:	08001f6f 	.word	0x08001f6f
 8001ee4:	08001f6f 	.word	0x08001f6f
 8001ee8:	08001f6f 	.word	0x08001f6f
 8001eec:	08001f6f 	.word	0x08001f6f
 8001ef0:	08001f6f 	.word	0x08001f6f
 8001ef4:	08001f6f 	.word	0x08001f6f
 8001ef8:	08001f6f 	.word	0x08001f6f
 8001efc:	08001f6f 	.word	0x08001f6f
 8001f00:	08001f6f 	.word	0x08001f6f
 8001f04:	08001f1d 	.word	0x08001f1d
 8001f08:	08001f31 	.word	0x08001f31
 8001f0c:	4a79      	ldr	r2, [pc, #484]	; (80020f4 <HAL_GPIO_Init+0x2b4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f12:	e02c      	b.n	8001f6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e029      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	3304      	adds	r3, #4
 8001f22:	623b      	str	r3, [r7, #32]
          break;
 8001f24:	e024      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	623b      	str	r3, [r7, #32]
          break;
 8001f2e:	e01f      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	330c      	adds	r3, #12
 8001f36:	623b      	str	r3, [r7, #32]
          break;
 8001f38:	e01a      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f42:	2304      	movs	r3, #4
 8001f44:	623b      	str	r3, [r7, #32]
          break;
 8001f46:	e013      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f50:	2308      	movs	r3, #8
 8001f52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	611a      	str	r2, [r3, #16]
          break;
 8001f5a:	e009      	b.n	8001f70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	615a      	str	r2, [r3, #20]
          break;
 8001f66:	e003      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e000      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          break;
 8001f6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2bff      	cmp	r3, #255	; 0xff
 8001f74:	d801      	bhi.n	8001f7a <HAL_GPIO_Init+0x13a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	e001      	b.n	8001f7e <HAL_GPIO_Init+0x13e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2bff      	cmp	r3, #255	; 0xff
 8001f84:	d802      	bhi.n	8001f8c <HAL_GPIO_Init+0x14c>
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	e002      	b.n	8001f92 <HAL_GPIO_Init+0x152>
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	3b08      	subs	r3, #8
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	210f      	movs	r1, #15
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	6a39      	ldr	r1, [r7, #32]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	431a      	orrs	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80b1 	beq.w	8002122 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <HAL_GPIO_Init+0x2b8>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	; (80020f8 <HAL_GPIO_Init+0x2b8>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6193      	str	r3, [r2, #24]
 8001fcc:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_GPIO_Init+0x2b8>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd8:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_GPIO_Init+0x2bc>)
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	3302      	adds	r3, #2
 8001fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	220f      	movs	r2, #15
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <HAL_GPIO_Init+0x2c0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <HAL_GPIO_Init+0x1ec>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3f      	ldr	r2, [pc, #252]	; (8002104 <HAL_GPIO_Init+0x2c4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00d      	beq.n	8002028 <HAL_GPIO_Init+0x1e8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3e      	ldr	r2, [pc, #248]	; (8002108 <HAL_GPIO_Init+0x2c8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x1e4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3d      	ldr	r2, [pc, #244]	; (800210c <HAL_GPIO_Init+0x2cc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_GPIO_Init+0x1e0>
 800201c:	2303      	movs	r3, #3
 800201e:	e006      	b.n	800202e <HAL_GPIO_Init+0x1ee>
 8002020:	2304      	movs	r3, #4
 8002022:	e004      	b.n	800202e <HAL_GPIO_Init+0x1ee>
 8002024:	2302      	movs	r3, #2
 8002026:	e002      	b.n	800202e <HAL_GPIO_Init+0x1ee>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_GPIO_Init+0x1ee>
 800202c:	2300      	movs	r3, #0
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	f002 0203 	and.w	r2, r2, #3
 8002034:	0092      	lsls	r2, r2, #2
 8002036:	4093      	lsls	r3, r2
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800203e:	492f      	ldr	r1, [pc, #188]	; (80020fc <HAL_GPIO_Init+0x2bc>)
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	492c      	ldr	r1, [pc, #176]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002066:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	4928      	ldr	r1, [pc, #160]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	4922      	ldr	r1, [pc, #136]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	60cb      	str	r3, [r1, #12]
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	43db      	mvns	r3, r3
 8002096:	491e      	ldr	r1, [pc, #120]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002098:	4013      	ands	r3, r2
 800209a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4918      	ldr	r1, [pc, #96]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	43db      	mvns	r3, r3
 80020be:	4914      	ldr	r1, [pc, #80]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d021      	beq.n	8002114 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	490e      	ldr	r1, [pc, #56]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
 80020dc:	e021      	b.n	8002122 <HAL_GPIO_Init+0x2e2>
 80020de:	bf00      	nop
 80020e0:	10320000 	.word	0x10320000
 80020e4:	10310000 	.word	0x10310000
 80020e8:	10220000 	.word	0x10220000
 80020ec:	10210000 	.word	0x10210000
 80020f0:	10120000 	.word	0x10120000
 80020f4:	10110000 	.word	0x10110000
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010000 	.word	0x40010000
 8002100:	40010800 	.word	0x40010800
 8002104:	40010c00 	.word	0x40010c00
 8002108:	40011000 	.word	0x40011000
 800210c:	40011400 	.word	0x40011400
 8002110:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_GPIO_Init+0x304>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	43db      	mvns	r3, r3
 800211c:	4909      	ldr	r1, [pc, #36]	; (8002144 <HAL_GPIO_Init+0x304>)
 800211e:	4013      	ands	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	3301      	adds	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	fa22 f303 	lsr.w	r3, r2, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	f47f ae8e 	bne.w	8001e54 <HAL_GPIO_Init+0x14>
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	372c      	adds	r7, #44	; 0x2c
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002164:	e003      	b.n	800216e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	611a      	str	r2, [r3, #16]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e272      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8087 	beq.w	80022a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002198:	4b92      	ldr	r3, [pc, #584]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d00c      	beq.n	80021be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a4:	4b8f      	ldr	r3, [pc, #572]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d112      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5e>
 80021b0:	4b8c      	ldr	r3, [pc, #560]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d10b      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021be:	4b89      	ldr	r3, [pc, #548]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d06c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x12c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d168      	bne.n	80022a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e24c      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x76>
 80021e0:	4b80      	ldr	r3, [pc, #512]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a7f      	ldr	r2, [pc, #508]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	e02e      	b.n	800224c <HAL_RCC_OscConfig+0xd4>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x98>
 80021f6:	4b7b      	ldr	r3, [pc, #492]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7a      	ldr	r2, [pc, #488]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b78      	ldr	r3, [pc, #480]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a77      	ldr	r2, [pc, #476]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0xd4>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0xbc>
 800221a:	4b72      	ldr	r3, [pc, #456]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a71      	ldr	r2, [pc, #452]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b6f      	ldr	r3, [pc, #444]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6e      	ldr	r2, [pc, #440]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0xd4>
 8002234:	4b6b      	ldr	r3, [pc, #428]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6a      	ldr	r2, [pc, #424]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a67      	ldr	r2, [pc, #412]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fc12 	bl	8000a7c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7fe fc0e 	bl	8000a7c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e200      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0xe4>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fbfe 	bl	8000a7c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe fbfa 	bl	8000a7c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1ec      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x10c>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d063      	beq.n	800237a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b2:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022be:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d11c      	bne.n	8002304 <HAL_RCC_OscConfig+0x18c>
 80022ca:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d116      	bne.n	8002304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x176>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1c0      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4939      	ldr	r1, [pc, #228]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	e03a      	b.n	800237a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_RCC_OscConfig+0x270>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7fe fbb3 	bl	8000a7c <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231a:	f7fe fbaf 	bl	8000a7c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1a1      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4927      	ldr	r1, [pc, #156]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x270>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe fb92 	bl	8000a7c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7fe fb8e 	bl	8000a7c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e180      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d03a      	beq.n	80023fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d019      	beq.n	80023c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_RCC_OscConfig+0x274>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7fe fb72 	bl	8000a7c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239c:	f7fe fb6e 	bl	8000a7c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e160      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f000 face 	bl	800295c <RCC_Delay>
 80023c0:	e01c      	b.n	80023fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_OscConfig+0x274>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7fe fb58 	bl	8000a7c <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ce:	e00f      	b.n	80023f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7fe fb54 	bl	8000a7c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d908      	bls.n	80023f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e146      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	42420000 	.word	0x42420000
 80023ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f0:	4b92      	ldr	r3, [pc, #584]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e9      	bne.n	80023d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80a6 	beq.w	8002556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240e:	4b8b      	ldr	r3, [pc, #556]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b88      	ldr	r3, [pc, #544]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4a87      	ldr	r2, [pc, #540]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	61d3      	str	r3, [r2, #28]
 8002426:	4b85      	ldr	r3, [pc, #532]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b82      	ldr	r3, [pc, #520]	; (8002640 <HAL_RCC_OscConfig+0x4c8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002442:	4b7f      	ldr	r3, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x4c8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7e      	ldr	r2, [pc, #504]	; (8002640 <HAL_RCC_OscConfig+0x4c8>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7fe fb15 	bl	8000a7c <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7fe fb11 	bl	8000a7c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b64      	cmp	r3, #100	; 0x64
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e103      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	4b75      	ldr	r3, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x4c8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x312>
 800247c:	4b6f      	ldr	r3, [pc, #444]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a6e      	ldr	r2, [pc, #440]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	e02d      	b.n	80024e6 <HAL_RCC_OscConfig+0x36e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x334>
 8002492:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a69      	ldr	r2, [pc, #420]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6213      	str	r3, [r2, #32]
 800249e:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a66      	ldr	r2, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	e01c      	b.n	80024e6 <HAL_RCC_OscConfig+0x36e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d10c      	bne.n	80024ce <HAL_RCC_OscConfig+0x356>
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4a60      	ldr	r2, [pc, #384]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6213      	str	r3, [r2, #32]
 80024c0:	4b5e      	ldr	r3, [pc, #376]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a5d      	ldr	r2, [pc, #372]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e00b      	b.n	80024e6 <HAL_RCC_OscConfig+0x36e>
 80024ce:	4b5b      	ldr	r3, [pc, #364]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a5a      	ldr	r2, [pc, #360]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6213      	str	r3, [r2, #32]
 80024da:	4b58      	ldr	r3, [pc, #352]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a57      	ldr	r2, [pc, #348]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d015      	beq.n	800251a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7fe fac5 	bl	8000a7c <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe fac1 	bl	8000a7c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0b1      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	4b4b      	ldr	r3, [pc, #300]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ee      	beq.n	80024f6 <HAL_RCC_OscConfig+0x37e>
 8002518:	e014      	b.n	8002544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe faaf 	bl	8000a7c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fe faab 	bl	8000a7c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e09b      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	4b40      	ldr	r3, [pc, #256]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254a:	4b3c      	ldr	r3, [pc, #240]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4a3b      	ldr	r2, [pc, #236]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8087 	beq.w	800266e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d061      	beq.n	8002630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d146      	bne.n	8002602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b33      	ldr	r3, [pc, #204]	; (8002644 <HAL_RCC_OscConfig+0x4cc>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe fa7f 	bl	8000a7c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe fa7b 	bl	8000a7c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e06d      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a8:	d108      	bne.n	80025bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4921      	ldr	r1, [pc, #132]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025bc:	4b1f      	ldr	r3, [pc, #124]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a19      	ldr	r1, [r3, #32]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	430b      	orrs	r3, r1
 80025ce:	491b      	ldr	r1, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7fe fa4f 	bl	8000a7c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe fa4b 	bl	8000a7c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e03d      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x46a>
 8002600:	e035      	b.n	800266e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_RCC_OscConfig+0x4cc>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe fa38 	bl	8000a7c <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002610:	f7fe fa34 	bl	8000a7c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e026      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_OscConfig+0x4c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x498>
 800262e:	e01e      	b.n	800266e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d107      	bne.n	8002648 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e019      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
 8002644:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_OscConfig+0x500>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000

0800267c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0d0      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d910      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0207 	bic.w	r2, r3, #7
 80026a6:	4965      	ldr	r1, [pc, #404]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0b8      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d8:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	494d      	ldr	r1, [pc, #308]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d040      	beq.n	800279c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d115      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e073      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06b      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4936      	ldr	r1, [pc, #216]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7fe f986 	bl	8000a7c <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7fe f982 	bl	8000a7c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e053      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d210      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4922      	ldr	r1, [pc, #136]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e032      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4916      	ldr	r1, [pc, #88]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280a:	f000 f821 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800280e:	4602      	mov	r2, r0
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	490a      	ldr	r1, [pc, #40]	; (8002844 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	5ccb      	ldrb	r3, [r1, r3]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1cc>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1d0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe f8e4 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40022000 	.word	0x40022000
 8002840:	40021000 	.word	0x40021000
 8002844:	0800a2fc 	.word	0x0800a2fc
 8002848:	20000000 	.word	0x20000000
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b04      	cmp	r3, #4
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x30>
 800287a:	2b08      	cmp	r3, #8
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x36>
 800287e:	e027      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002882:	613b      	str	r3, [r7, #16]
      break;
 8002884:	e027      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	0c9b      	lsrs	r3, r3, #18
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002890:	5cd3      	ldrb	r3, [r2, r3]
 8002892:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d010      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0c5b      	lsrs	r3, r3, #17
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028b2:	fb03 f202 	mul.w	r2, r3, r2
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e004      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	613b      	str	r3, [r7, #16]
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028d2:	613b      	str	r3, [r7, #16]
      break;
 80028d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d6:	693b      	ldr	r3, [r7, #16]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	007a1200 	.word	0x007a1200
 80028ec:	0800a314 	.word	0x0800a314
 80028f0:	0800a324 	.word	0x0800a324
 80028f4:	003d0900 	.word	0x003d0900

080028f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028fc:	4b02      	ldr	r3, [pc, #8]	; (8002908 <HAL_RCC_GetHCLKFreq+0x10>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	20000000 	.word	0x20000000

0800290c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002910:	f7ff fff2 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	4903      	ldr	r1, [pc, #12]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	0800a30c 	.word	0x0800a30c

08002934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002938:	f7ff ffde 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0adb      	lsrs	r3, r3, #11
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	0800a30c 	.word	0x0800a30c

0800295c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <RCC_Delay+0x34>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <RCC_Delay+0x38>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0a5b      	lsrs	r3, r3, #9
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002978:	bf00      	nop
  }
  while (Delay --);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	60fa      	str	r2, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f9      	bne.n	8002978 <RCC_Delay+0x1c>
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	20000000 	.word	0x20000000
 8002994:	10624dd3 	.word	0x10624dd3

08002998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e041      	b.n	8002a2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fd fe5c 	bl	800067c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	4619      	mov	r1, r3
 80029d6:	4610      	mov	r0, r2
 80029d8:	f000 f8f4 	bl	8002bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_TIM_ConfigClockSource+0x1c>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0b4      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x186>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8a:	d03e      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0xd4>
 8002a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a90:	f200 8087 	bhi.w	8002ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a98:	f000 8086 	beq.w	8002ba8 <HAL_TIM_ConfigClockSource+0x172>
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa0:	d87f      	bhi.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa2:	2b70      	cmp	r3, #112	; 0x70
 8002aa4:	d01a      	beq.n	8002adc <HAL_TIM_ConfigClockSource+0xa6>
 8002aa6:	2b70      	cmp	r3, #112	; 0x70
 8002aa8:	d87b      	bhi.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8002aaa:	2b60      	cmp	r3, #96	; 0x60
 8002aac:	d050      	beq.n	8002b50 <HAL_TIM_ConfigClockSource+0x11a>
 8002aae:	2b60      	cmp	r3, #96	; 0x60
 8002ab0:	d877      	bhi.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab2:	2b50      	cmp	r3, #80	; 0x50
 8002ab4:	d03c      	beq.n	8002b30 <HAL_TIM_ConfigClockSource+0xfa>
 8002ab6:	2b50      	cmp	r3, #80	; 0x50
 8002ab8:	d873      	bhi.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d058      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0x13a>
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d86f      	bhi.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac2:	2b30      	cmp	r3, #48	; 0x30
 8002ac4:	d064      	beq.n	8002b90 <HAL_TIM_ConfigClockSource+0x15a>
 8002ac6:	2b30      	cmp	r3, #48	; 0x30
 8002ac8:	d86b      	bhi.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d060      	beq.n	8002b90 <HAL_TIM_ConfigClockSource+0x15a>
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d867      	bhi.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d05c      	beq.n	8002b90 <HAL_TIM_ConfigClockSource+0x15a>
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d05a      	beq.n	8002b90 <HAL_TIM_ConfigClockSource+0x15a>
 8002ada:	e062      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aec:	f000 f943 	bl	8002d76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002afe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]
      break;
 8002b08:	e04f      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b1a:	f000 f92c 	bl	8002d76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2c:	609a      	str	r2, [r3, #8]
      break;
 8002b2e:	e03c      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f000 f8a3 	bl	8002c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2150      	movs	r1, #80	; 0x50
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f8fa 	bl	8002d42 <TIM_ITRx_SetConfig>
      break;
 8002b4e:	e02c      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f000 f8c1 	bl	8002ce4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2160      	movs	r1, #96	; 0x60
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f8ea 	bl	8002d42 <TIM_ITRx_SetConfig>
      break;
 8002b6e:	e01c      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f000 f883 	bl	8002c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2140      	movs	r1, #64	; 0x40
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f8da 	bl	8002d42 <TIM_ITRx_SetConfig>
      break;
 8002b8e:	e00c      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f000 f8d1 	bl	8002d42 <TIM_ITRx_SetConfig>
      break;
 8002ba0:	e003      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba6:	e000      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ba8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <TIM_Base_SetConfig+0xb8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <TIM_Base_SetConfig+0x30>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d007      	beq.n	8002bf4 <TIM_Base_SetConfig+0x30>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <TIM_Base_SetConfig+0xbc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_Base_SetConfig+0x30>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <TIM_Base_SetConfig+0xc0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <TIM_Base_SetConfig+0xb8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00b      	beq.n	8002c26 <TIM_Base_SetConfig+0x62>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d007      	beq.n	8002c26 <TIM_Base_SetConfig+0x62>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <TIM_Base_SetConfig+0xbc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d003      	beq.n	8002c26 <TIM_Base_SetConfig+0x62>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <TIM_Base_SetConfig+0xc0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d108      	bne.n	8002c38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <TIM_Base_SetConfig+0xb8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d103      	bne.n	8002c6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	615a      	str	r2, [r3, #20]
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800

08002c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0201 	bic.w	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 030a 	bic.w	r3, r3, #10
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f023 0210 	bic.w	r2, r3, #16
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	031b      	lsls	r3, r3, #12
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	621a      	str	r2, [r3, #32]
}
 8002d38:	bf00      	nop
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f043 0307 	orr.w	r3, r3, #7
 8002d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	609a      	str	r2, [r3, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b087      	sub	sp, #28
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	021a      	lsls	r2, r3, #8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	609a      	str	r2, [r3, #8]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e046      	b.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a16      	ldr	r2, [pc, #88]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d009      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10c      	bne.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800

08002e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e042      	b.n	8002f08 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fc0e 	bl	80006b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	; 0x24
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fd71 	bl	800399c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d16d      	bne.n	800300c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_UART_Transmit+0x2c>
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e066      	b.n	800300e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2221      	movs	r2, #33	; 0x21
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4e:	f7fd fd95 	bl	8000a7c <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	88fa      	ldrh	r2, [r7, #6]
 8002f58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f68:	d108      	bne.n	8002f7c <HAL_UART_Transmit+0x6c>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f84:	e02a      	b.n	8002fdc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 faf9 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e036      	b.n	800300e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	3302      	adds	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e007      	b.n	8002fce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1cf      	bne.n	8002f86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2200      	movs	r2, #0
 8002fee:	2140      	movs	r1, #64	; 0x40
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fac9 	bl	8003588 <UART_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e006      	b.n	800300e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0ba      	sub	sp, #232	; 0xe8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003044:	2300      	movs	r3, #0
 8003046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10f      	bne.n	800307e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800305e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_UART_IRQHandler+0x66>
 800306a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fbd1 	bl	800381e <UART_Receive_IT>
      return;
 800307c:	e25b      	b.n	8003536 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800307e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80de 	beq.w	8003244 <HAL_UART_IRQHandler+0x22c>
 8003088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003098:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80d1 	beq.w	8003244 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_UART_IRQHandler+0xae>
 80030ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_UART_IRQHandler+0xd2>
 80030d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f043 0202 	orr.w	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_UART_IRQHandler+0xf6>
 80030f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f043 0204 	orr.w	r2, r3, #4
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d011      	beq.n	800313e <HAL_UART_IRQHandler+0x126>
 800311a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f043 0208 	orr.w	r2, r3, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 81f2 	beq.w	800352c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_UART_IRQHandler+0x14e>
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fb5c 	bl	800381e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <HAL_UART_IRQHandler+0x17a>
 800318a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d04f      	beq.n	8003232 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fa66 	bl	8003664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d041      	beq.n	800322a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3314      	adds	r3, #20
 80031ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3314      	adds	r3, #20
 80031ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1d9      	bne.n	80031a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d013      	beq.n	8003222 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fe:	4a7e      	ldr	r2, [pc, #504]	; (80033f8 <HAL_UART_IRQHandler+0x3e0>)
 8003200:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fda2 	bl	8001d50 <HAL_DMA_Abort_IT>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800321c:	4610      	mov	r0, r2
 800321e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e00e      	b.n	8003240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f99c 	bl	8003560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	e00a      	b.n	8003240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f998 	bl	8003560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e006      	b.n	8003240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f994 	bl	8003560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800323e:	e175      	b.n	800352c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	bf00      	nop
    return;
 8003242:	e173      	b.n	800352c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	2b01      	cmp	r3, #1
 800324a:	f040 814f 	bne.w	80034ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800324e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8148 	beq.w	80034ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800325c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8141 	beq.w	80034ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80b6 	beq.w	80033fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800329c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8145 	beq.w	8003530 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ae:	429a      	cmp	r2, r3
 80032b0:	f080 813e 	bcs.w	8003530 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	f000 8088 	beq.w	80033d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	330c      	adds	r3, #12
 80032ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d6:	e853 3f00 	ldrex	r3, [r3]
 80032da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003300:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003304:	e841 2300 	strex	r3, r2, [r1]
 8003308:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800330c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1d9      	bne.n	80032c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3314      	adds	r3, #20
 800331a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3314      	adds	r3, #20
 8003334:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003338:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800333c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003340:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800334a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e1      	bne.n	8003314 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3314      	adds	r3, #20
 8003356:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3314      	adds	r3, #20
 8003370:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003374:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003376:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800337a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e3      	bne.n	8003350 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a8:	f023 0310 	bic.w	r3, r3, #16
 80033ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80033bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e3      	bne.n	8003396 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fc81 	bl	8001cda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8bf 	bl	8003572 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033f4:	e09c      	b.n	8003530 <HAL_UART_IRQHandler+0x518>
 80033f6:	bf00      	nop
 80033f8:	08003729 	.word	0x08003729
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003404:	b29b      	uxth	r3, r3
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 808e 	beq.w	8003534 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8089 	beq.w	8003534 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003438:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003446:	647a      	str	r2, [r7, #68]	; 0x44
 8003448:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800344c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e3      	bne.n	8003422 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3314      	adds	r3, #20
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	623b      	str	r3, [r7, #32]
   return(result);
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800347e:	633a      	str	r2, [r7, #48]	; 0x30
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e3      	bne.n	800345a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0310 	bic.w	r3, r3, #16
 80034b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034c4:	61fa      	str	r2, [r7, #28]
 80034c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	617b      	str	r3, [r7, #20]
   return(result);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e3      	bne.n	80034a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f844 	bl	8003572 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034ea:	e023      	b.n	8003534 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <HAL_UART_IRQHandler+0x4f4>
 80034f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f923 	bl	8003750 <UART_Transmit_IT>
    return;
 800350a:	e014      	b.n	8003536 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800350c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <HAL_UART_IRQHandler+0x51e>
 8003518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f962 	bl	80037ee <UART_EndTransmit_IT>
    return;
 800352a:	e004      	b.n	8003536 <HAL_UART_IRQHandler+0x51e>
    return;
 800352c:	bf00      	nop
 800352e:	e002      	b.n	8003536 <HAL_UART_IRQHandler+0x51e>
      return;
 8003530:	bf00      	nop
 8003532:	e000      	b.n	8003536 <HAL_UART_IRQHandler+0x51e>
      return;
 8003534:	bf00      	nop
  }
}
 8003536:	37e8      	adds	r7, #232	; 0xe8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr

08003572 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b090      	sub	sp, #64	; 0x40
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003598:	e050      	b.n	800363c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d04c      	beq.n	800363c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035a8:	f7fd fa68 	bl	8000a7c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d241      	bcs.n	800363c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	330c      	adds	r3, #12
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	330c      	adds	r3, #12
 80035d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035d8:	637a      	str	r2, [r7, #52]	; 0x34
 80035da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e5      	bne.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3314      	adds	r3, #20
 80035f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	613b      	str	r3, [r7, #16]
   return(result);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	63bb      	str	r3, [r7, #56]	; 0x38
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3314      	adds	r3, #20
 800360a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800360c:	623a      	str	r2, [r7, #32]
 800360e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	69f9      	ldr	r1, [r7, #28]
 8003612:	6a3a      	ldr	r2, [r7, #32]
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	61bb      	str	r3, [r7, #24]
   return(result);
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e00f      	b.n	800365c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4013      	ands	r3, r2
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	429a      	cmp	r2, r3
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	429a      	cmp	r2, r3
 8003658:	d09f      	beq.n	800359a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3740      	adds	r7, #64	; 0x40
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003664:	b480      	push	{r7}
 8003666:	b095      	sub	sp, #84	; 0x54
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800368c:	643a      	str	r2, [r7, #64]	; 0x40
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e5      	bne.n	800366c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3314      	adds	r3, #20
 80036a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3314      	adds	r3, #20
 80036be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e5      	bne.n	80036a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d119      	bne.n	8003710 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f023 0310 	bic.w	r3, r3, #16
 80036f2:	647b      	str	r3, [r7, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036fc:	61ba      	str	r2, [r7, #24]
 80036fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6979      	ldr	r1, [r7, #20]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	613b      	str	r3, [r7, #16]
   return(result);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e5      	bne.n	80036dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800371e:	bf00      	nop
 8003720:	3754      	adds	r7, #84	; 0x54
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff ff0c 	bl	8003560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b21      	cmp	r3, #33	; 0x21
 8003762:	d13e      	bne.n	80037e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376c:	d114      	bne.n	8003798 <UART_Transmit_IT+0x48>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d110      	bne.n	8003798 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800378a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	1c9a      	adds	r2, r3, #2
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	621a      	str	r2, [r3, #32]
 8003796:	e008      	b.n	80037aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	1c59      	adds	r1, r3, #1
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6211      	str	r1, [r2, #32]
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4619      	mov	r1, r3
 80037b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003804:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fe94 	bl	800353c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b08c      	sub	sp, #48	; 0x30
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b22      	cmp	r3, #34	; 0x22
 8003830:	f040 80ae 	bne.w	8003990 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383c:	d117      	bne.n	800386e <UART_Receive_IT+0x50>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d113      	bne.n	800386e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	b29b      	uxth	r3, r3
 8003858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385c:	b29a      	uxth	r2, r3
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	1c9a      	adds	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
 800386c:	e026      	b.n	80038bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003880:	d007      	beq.n	8003892 <UART_Receive_IT+0x74>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <UART_Receive_IT+0x82>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e008      	b.n	80038b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4619      	mov	r1, r3
 80038ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d15d      	bne.n	800398c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0220 	bic.w	r2, r2, #32
 80038de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	2b01      	cmp	r3, #1
 8003914:	d135      	bne.n	8003982 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	613b      	str	r3, [r7, #16]
   return(result);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f023 0310 	bic.w	r3, r3, #16
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	623a      	str	r2, [r7, #32]
 800393e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	69f9      	ldr	r1, [r7, #28]
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	61bb      	str	r3, [r7, #24]
   return(result);
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e5      	bne.n	800391c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b10      	cmp	r3, #16
 800395c:	d10a      	bne.n	8003974 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fdf9 	bl	8003572 <HAL_UARTEx_RxEventCallback>
 8003980:	e002      	b.n	8003988 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fde3 	bl	800354e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e002      	b.n	8003992 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	3730      	adds	r7, #48	; 0x30
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039d6:	f023 030c 	bic.w	r3, r3, #12
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a2c      	ldr	r2, [pc, #176]	; (8003ab0 <UART_SetConfig+0x114>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d103      	bne.n	8003a0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a04:	f7fe ff96 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	e002      	b.n	8003a12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7fe ff7e 	bl	800290c <HAL_RCC_GetPCLK1Freq>
 8003a10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009a      	lsls	r2, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <UART_SetConfig+0x118>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	0119      	lsls	r1, r3, #4
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	009a      	lsls	r2, r3, #2
 8003a3c:	441a      	add	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a48:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <UART_SetConfig+0x118>)
 8003a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2064      	movs	r0, #100	; 0x64
 8003a52:	fb00 f303 	mul.w	r3, r0, r3
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	3332      	adds	r3, #50	; 0x32
 8003a5c:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <UART_SetConfig+0x118>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a68:	4419      	add	r1, r3
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009a      	lsls	r2, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <UART_SetConfig+0x118>)
 8003a82:	fba3 0302 	umull	r0, r3, r3, r2
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	2064      	movs	r0, #100	; 0x64
 8003a8a:	fb00 f303 	mul.w	r3, r0, r3
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	3332      	adds	r3, #50	; 0x32
 8003a94:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <UART_SetConfig+0x118>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	f003 020f 	and.w	r2, r3, #15
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	440a      	add	r2, r1
 8003aa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40013800 	.word	0x40013800
 8003ab4:	51eb851f 	.word	0x51eb851f

08003ab8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003abe:	f3ef 8305 	mrs	r3, IPSR
 8003ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10f      	bne.n	8003aea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ace:	607b      	str	r3, [r7, #4]
  return(result);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <osKernelInitialize+0x32>
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <osKernelInitialize+0x60>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d109      	bne.n	8003af2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ade:	f3ef 8311 	mrs	r3, BASEPRI
 8003ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003aea:	f06f 0305 	mvn.w	r3, #5
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e00c      	b.n	8003b0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <osKernelInitialize+0x60>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d105      	bne.n	8003b06 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003afa:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <osKernelInitialize+0x60>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	e002      	b.n	8003b0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	20000928 	.word	0x20000928

08003b1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b22:	f3ef 8305 	mrs	r3, IPSR
 8003b26:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b32:	607b      	str	r3, [r7, #4]
  return(result);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <osKernelStart+0x32>
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <osKernelStart+0x64>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d109      	bne.n	8003b56 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b42:	f3ef 8311 	mrs	r3, BASEPRI
 8003b46:	603b      	str	r3, [r7, #0]
  return(result);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003b4e:	f06f 0305 	mvn.w	r3, #5
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e00e      	b.n	8003b74 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <osKernelStart+0x64>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d107      	bne.n	8003b6e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <osKernelStart+0x64>)
 8003b60:	2202      	movs	r2, #2
 8003b62:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003b64:	f002 fb78 	bl	8006258 <vTaskStartScheduler>
      stat = osOK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e002      	b.n	8003b74 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b74:	68fb      	ldr	r3, [r7, #12]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000928 	.word	0x20000928

08003b84 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b8a:	f3ef 8305 	mrs	r3, IPSR
 8003b8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b90:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b96:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9a:	607b      	str	r3, [r7, #4]
  return(result);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <osKernelGetTickCount+0x32>
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <osKernelGetTickCount+0x4c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d109      	bne.n	8003bbe <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003baa:	f3ef 8311 	mrs	r3, BASEPRI
 8003bae:	603b      	str	r3, [r7, #0]
  return(result);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8003bb6:	f002 fc6f 	bl	8006498 <xTaskGetTickCountFromISR>
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	e002      	b.n	8003bc4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8003bbe:	f002 fc5d 	bl	800647c <xTaskGetTickCount>
 8003bc2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000928 	.word	0x20000928

08003bd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b092      	sub	sp, #72	; 0x48
 8003bd8:	af04      	add	r7, sp, #16
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003be4:	f3ef 8305 	mrs	r3, IPSR
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f040 8094 	bne.w	8003d1a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf6:	623b      	str	r3, [r7, #32]
  return(result);
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 808d 	bne.w	8003d1a <osThreadNew+0x146>
 8003c00:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <osThreadNew+0x150>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d106      	bne.n	8003c16 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c08:	f3ef 8311 	mrs	r3, BASEPRI
 8003c0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 8082 	bne.w	8003d1a <osThreadNew+0x146>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d07e      	beq.n	8003d1a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003c20:	2318      	movs	r3, #24
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003c24:	2300      	movs	r3, #0
 8003c26:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003c28:	f107 031b 	add.w	r3, r7, #27
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d045      	beq.n	8003cc6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <osThreadNew+0x74>
        name = attr->name;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <osThreadNew+0x9a>
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	2b38      	cmp	r3, #56	; 0x38
 8003c60:	d805      	bhi.n	8003c6e <osThreadNew+0x9a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <osThreadNew+0x9e>
        return (NULL);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e054      	b.n	8003d1c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00e      	beq.n	8003ca8 <osThreadNew+0xd4>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b5b      	cmp	r3, #91	; 0x5b
 8003c90:	d90a      	bls.n	8003ca8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d006      	beq.n	8003ca8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <osThreadNew+0xd4>
        mem = 1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca6:	e010      	b.n	8003cca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10c      	bne.n	8003cca <osThreadNew+0xf6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d108      	bne.n	8003cca <osThreadNew+0xf6>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <osThreadNew+0xf6>
          mem = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc4:	e001      	b.n	8003cca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d110      	bne.n	8003cf2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cd8:	9202      	str	r2, [sp, #8]
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f002 f848 	bl	8005d7c <xTaskCreateStatic>
 8003cec:	4603      	mov	r3, r0
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e013      	b.n	8003d1a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d110      	bne.n	8003d1a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f002 f892 	bl	8005e34 <xTaskCreate>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <osThreadNew+0x146>
          hTask = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d1a:	697b      	ldr	r3, [r7, #20]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3738      	adds	r7, #56	; 0x38
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000928 	.word	0x20000928

08003d28 <osThreadSetPriority>:
   */
  (void) thread_id;
  return 0;
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d36:	f3ef 8305 	mrs	r3, IPSR
 8003d3a:	617b      	str	r3, [r7, #20]
  return(result);
 8003d3c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <osThreadSetPriority+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d42:	f3ef 8310 	mrs	r3, PRIMASK
 8003d46:	613b      	str	r3, [r7, #16]
  return(result);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <osThreadSetPriority+0x3a>
 8003d4e:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <osThreadSetPriority+0x74>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d109      	bne.n	8003d6a <osThreadSetPriority+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d56:	f3ef 8311 	mrs	r3, BASEPRI
 8003d5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <osThreadSetPriority+0x42>
    stat = osErrorISR;
 8003d62:	f06f 0305 	mvn.w	r3, #5
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	e013      	b.n	8003d92 <osThreadSetPriority+0x6a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <osThreadSetPriority+0x54>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	dd02      	ble.n	8003d7c <osThreadSetPriority+0x54>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b38      	cmp	r3, #56	; 0x38
 8003d7a:	dd03      	ble.n	8003d84 <osThreadSetPriority+0x5c>
    stat = osErrorParameter;
 8003d7c:	f06f 0303 	mvn.w	r3, #3
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	e006      	b.n	8003d92 <osThreadSetPriority+0x6a>
  }
  else {
    stat = osOK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	69b8      	ldr	r0, [r7, #24]
 8003d8e:	f002 f9c1 	bl	8006114 <vTaskPrioritySet>
  }

  return (stat);
 8003d92:	69fb      	ldr	r3, [r7, #28]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000928 	.word	0x20000928

08003da0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003da8:	f3ef 8305 	mrs	r3, IPSR
 8003dac:	613b      	str	r3, [r7, #16]
  return(result);
 8003dae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10f      	bne.n	8003dd4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db4:	f3ef 8310 	mrs	r3, PRIMASK
 8003db8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <osDelay+0x34>
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <osDelay+0x58>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d109      	bne.n	8003ddc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dc8:	f3ef 8311 	mrs	r3, BASEPRI
 8003dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <osDelay+0x3c>
    stat = osErrorISR;
 8003dd4:	f06f 0305 	mvn.w	r3, #5
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e007      	b.n	8003dec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <osDelay+0x4c>
      vTaskDelay(ticks);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f002 f960 	bl	80060ac <vTaskDelay>
    }
  }

  return (stat);
 8003dec:	697b      	ldr	r3, [r7, #20]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000928 	.word	0x20000928

08003dfc <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e08:	f3ef 8305 	mrs	r3, IPSR
 8003e0c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d13d      	bne.n	8003e90 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e14:	f3ef 8310 	mrs	r3, PRIMASK
 8003e18:	613b      	str	r3, [r7, #16]
  return(result);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d137      	bne.n	8003e90 <osEventFlagsNew+0x94>
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <osEventFlagsNew+0xa0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d105      	bne.n	8003e34 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e28:	f3ef 8311 	mrs	r3, BASEPRI
 8003e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d12d      	bne.n	8003e90 <osEventFlagsNew+0x94>
    mem = -1;
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295
 8003e38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d006      	beq.n	8003e56 <osEventFlagsNew+0x5a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b1f      	cmp	r3, #31
 8003e4e:	d902      	bls.n	8003e56 <osEventFlagsNew+0x5a>
        mem = 1;
 8003e50:	2301      	movs	r3, #1
 8003e52:	61bb      	str	r3, [r7, #24]
 8003e54:	e00c      	b.n	8003e70 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d108      	bne.n	8003e70 <osEventFlagsNew+0x74>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <osEventFlagsNew+0x74>
          mem = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e001      	b.n	8003e70 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d106      	bne.n	8003e84 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fbe4 	bl	8004648 <xEventGroupCreateStatic>
 8003e80:	61f8      	str	r0, [r7, #28]
 8003e82:	e005      	b.n	8003e90 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d102      	bne.n	8003e90 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8003e8a:	f000 fc14 	bl	80046b6 <xEventGroupCreate>
 8003e8e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003e90:	69fb      	ldr	r3, [r7, #28]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000928 	.word	0x20000928

08003ea0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <osEventFlagsSet+0x1e>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8003ebe:	f06f 0303 	mvn.w	r3, #3
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	e03a      	b.n	8003f3c <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec6:	f3ef 8305 	mrs	r3, IPSR
 8003eca:	617b      	str	r3, [r7, #20]
  return(result);
 8003ecc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <osEventFlagsSet+0x52>
 8003ede:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <osEventFlagsSet+0xa8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d123      	bne.n	8003f2e <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ee6:	f3ef 8311 	mrs	r3, BASEPRI
 8003eea:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01d      	beq.n	8003f2e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	461a      	mov	r2, r3
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	69b8      	ldr	r0, [r7, #24]
 8003f00:	f000 fd7c 	bl	80049fc <xEventGroupSetBitsFromISR>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8003f0a:	f06f 0302 	mvn.w	r3, #2
 8003f0e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003f10:	e013      	b.n	8003f3a <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <osEventFlagsSet+0x9a>
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <osEventFlagsSet+0xac>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003f2c:	e005      	b.n	8003f3a <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003f2e:	6839      	ldr	r1, [r7, #0]
 8003f30:	69b8      	ldr	r0, [r7, #24]
 8003f32:	f000 fca9 	bl	8004888 <xEventGroupSetBits>
 8003f36:	61f8      	str	r0, [r7, #28]
 8003f38:	e000      	b.n	8003f3c <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8003f3a:	bf00      	nop
  }

  return (rflags);
 8003f3c:	69fb      	ldr	r3, [r7, #28]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000928 	.word	0x20000928
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08e      	sub	sp, #56	; 0x38
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <osEventFlagsWait+0x22>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8003f72:	f06f 0303 	mvn.w	r3, #3
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	e059      	b.n	800402e <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f7a:	f3ef 8305 	mrs	r3, IPSR
 8003f7e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f80:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10f      	bne.n	8003fa6 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f86:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <osEventFlagsWait+0x56>
 8003f92:	4b29      	ldr	r3, [pc, #164]	; (8004038 <osEventFlagsWait+0xe8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d109      	bne.n	8003fae <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f9e:	617b      	str	r3, [r7, #20]
  return(result);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8003fa6:	f06f 0305 	mvn.w	r3, #5
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	e03f      	b.n	800402e <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbc:	e001      	b.n	8003fc2 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd0:	e001      	b.n	8003fd6 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	6a38      	ldr	r0, [r7, #32]
 8003fe2:	f000 fb83 	bl	80046ec <xEventGroupWaitBits>
 8003fe6:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00e      	beq.n	8004010 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d019      	beq.n	800402e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8004000:	f06f 0301 	mvn.w	r3, #1
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	e012      	b.n	800402e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004008:	f06f 0302 	mvn.w	r3, #2
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	e00e      	b.n	800402e <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8004020:	f06f 0301 	mvn.w	r3, #1
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
 8004026:	e002      	b.n	800402e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004028:	f06f 0302 	mvn.w	r3, #2
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004030:	4618      	mov	r0, r3
 8004032:	3730      	adds	r7, #48	; 0x30
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000928 	.word	0x20000928

0800403c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	; 0x28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004044:	2300      	movs	r3, #0
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004048:	f3ef 8305 	mrs	r3, IPSR
 800404c:	613b      	str	r3, [r7, #16]
  return(result);
 800404e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004050:	2b00      	cmp	r3, #0
 8004052:	f040 8085 	bne.w	8004160 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004056:	f3ef 8310 	mrs	r3, PRIMASK
 800405a:	60fb      	str	r3, [r7, #12]
  return(result);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d17e      	bne.n	8004160 <osMutexNew+0x124>
 8004062:	4b42      	ldr	r3, [pc, #264]	; (800416c <osMutexNew+0x130>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d105      	bne.n	8004076 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800406a:	f3ef 8311 	mrs	r3, BASEPRI
 800406e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d174      	bne.n	8004160 <osMutexNew+0x124>
    if (attr != NULL) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <osMutexNew+0x48>
      type = attr->attr_bits;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	e001      	b.n	8004088 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <osMutexNew+0x5c>
      rmtx = 1U;
 8004092:	2301      	movs	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	e001      	b.n	800409c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d15c      	bne.n	8004160 <osMutexNew+0x124>
      mem = -1;
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
 80040aa:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d015      	beq.n	80040de <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d006      	beq.n	80040c8 <osMutexNew+0x8c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b4f      	cmp	r3, #79	; 0x4f
 80040c0:	d902      	bls.n	80040c8 <osMutexNew+0x8c>
          mem = 1;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e00c      	b.n	80040e2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d108      	bne.n	80040e2 <osMutexNew+0xa6>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d104      	bne.n	80040e2 <osMutexNew+0xa6>
            mem = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	e001      	b.n	80040e2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d112      	bne.n	800410e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	4619      	mov	r1, r3
 80040f4:	2004      	movs	r0, #4
 80040f6:	f000 feb7 	bl	8004e68 <xQueueCreateMutexStatic>
 80040fa:	6278      	str	r0, [r7, #36]	; 0x24
 80040fc:	e016      	b.n	800412c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	4619      	mov	r1, r3
 8004104:	2001      	movs	r0, #1
 8004106:	f000 feaf 	bl	8004e68 <xQueueCreateMutexStatic>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24
 800410c:	e00e      	b.n	800412c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800411a:	2004      	movs	r0, #4
 800411c:	f000 fe8c 	bl	8004e38 <xQueueCreateMutex>
 8004120:	6278      	str	r0, [r7, #36]	; 0x24
 8004122:	e003      	b.n	800412c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004124:	2001      	movs	r0, #1
 8004126:	f000 fe87 	bl	8004e38 <xQueueCreateMutex>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00c      	beq.n	800414c <osMutexNew+0x110>
        if (attr != NULL) {
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <osMutexNew+0x104>
          name = attr->name;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e001      	b.n	8004144 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004144:	6979      	ldr	r1, [r7, #20]
 8004146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004148:	f001 fd92 	bl	8005c70 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	2b00      	cmp	r3, #0
 8004150:	d006      	beq.n	8004160 <osMutexNew+0x124>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004162:	4618      	mov	r0, r3
 8004164:	3728      	adds	r7, #40	; 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000928 	.word	0x20000928

08004170 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800418e:	f3ef 8305 	mrs	r3, IPSR
 8004192:	613b      	str	r3, [r7, #16]
  return(result);
 8004194:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10f      	bne.n	80041ba <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419a:	f3ef 8310 	mrs	r3, PRIMASK
 800419e:	60fb      	str	r3, [r7, #12]
  return(result);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <osMutexAcquire+0x4a>
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <osMutexAcquire+0xb8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d109      	bne.n	80041c2 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041ae:	f3ef 8311 	mrs	r3, BASEPRI
 80041b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80041ba:	f06f 0305 	mvn.w	r3, #5
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	e02c      	b.n	800421c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d103      	bne.n	80041d0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80041c8:	f06f 0303 	mvn.w	r3, #3
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	e025      	b.n	800421c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d011      	beq.n	80041fa <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80041d6:	6839      	ldr	r1, [r7, #0]
 80041d8:	69b8      	ldr	r0, [r7, #24]
 80041da:	f000 fe94 	bl	8004f06 <xQueueTakeMutexRecursive>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d01b      	beq.n	800421c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80041ea:	f06f 0301 	mvn.w	r3, #1
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	e014      	b.n	800421c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80041f2:	f06f 0302 	mvn.w	r3, #2
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	e010      	b.n	800421c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80041fa:	6839      	ldr	r1, [r7, #0]
 80041fc:	69b8      	ldr	r0, [r7, #24]
 80041fe:	f001 fa27 	bl	8005650 <xQueueSemaphoreTake>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d009      	beq.n	800421c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800420e:	f06f 0301 	mvn.w	r3, #1
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	e002      	b.n	800421c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004216:	f06f 0302 	mvn.w	r3, #2
 800421a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800421c:	69fb      	ldr	r3, [r7, #28]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000928 	.word	0x20000928

0800422c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f023 0301 	bic.w	r3, r3, #1
 800423a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004248:	f3ef 8305 	mrs	r3, IPSR
 800424c:	613b      	str	r3, [r7, #16]
  return(result);
 800424e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10f      	bne.n	8004274 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004254:	f3ef 8310 	mrs	r3, PRIMASK
 8004258:	60fb      	str	r3, [r7, #12]
  return(result);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d109      	bne.n	8004274 <osMutexRelease+0x48>
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <osMutexRelease+0x9c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d109      	bne.n	800427c <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004268:	f3ef 8311 	mrs	r3, BASEPRI
 800426c:	60bb      	str	r3, [r7, #8]
  return(result);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <osMutexRelease+0x50>
    stat = osErrorISR;
 8004274:	f06f 0305 	mvn.w	r3, #5
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e01f      	b.n	80042bc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004282:	f06f 0303 	mvn.w	r3, #3
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e018      	b.n	80042bc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004290:	69b8      	ldr	r0, [r7, #24]
 8004292:	f000 fe04 	bl	8004e9e <xQueueGiveMutexRecursive>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d00f      	beq.n	80042bc <osMutexRelease+0x90>
        stat = osErrorResource;
 800429c:	f06f 0302 	mvn.w	r3, #2
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	e00b      	b.n	80042bc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80042a4:	2300      	movs	r3, #0
 80042a6:	2200      	movs	r2, #0
 80042a8:	2100      	movs	r1, #0
 80042aa:	69b8      	ldr	r0, [r7, #24]
 80042ac:	f000 fecc 	bl	8005048 <xQueueGenericSend>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d002      	beq.n	80042bc <osMutexRelease+0x90>
        stat = osErrorResource;
 80042b6:	f06f 0302 	mvn.w	r3, #2
 80042ba:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80042bc:	69fb      	ldr	r3, [r7, #28]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000928 	.word	0x20000928

080042cc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	; 0x30
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042dc:	f3ef 8305 	mrs	r3, IPSR
 80042e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80042e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f040 8086 	bne.w	80043f6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ea:	f3ef 8310 	mrs	r3, PRIMASK
 80042ee:	617b      	str	r3, [r7, #20]
  return(result);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d17f      	bne.n	80043f6 <osSemaphoreNew+0x12a>
 80042f6:	4b42      	ldr	r3, [pc, #264]	; (8004400 <osSemaphoreNew+0x134>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d105      	bne.n	800430a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004302:	613b      	str	r3, [r7, #16]
  return(result);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d175      	bne.n	80043f6 <osSemaphoreNew+0x12a>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d072      	beq.n	80043f6 <osSemaphoreNew+0x12a>
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	429a      	cmp	r2, r3
 8004316:	d86e      	bhi.n	80043f6 <osSemaphoreNew+0x12a>
    mem = -1;
 8004318:	f04f 33ff 	mov.w	r3, #4294967295
 800431c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d006      	beq.n	800433a <osSemaphoreNew+0x6e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b4f      	cmp	r3, #79	; 0x4f
 8004332:	d902      	bls.n	800433a <osSemaphoreNew+0x6e>
        mem = 1;
 8004334:	2301      	movs	r3, #1
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	e00c      	b.n	8004354 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <osSemaphoreNew+0x88>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <osSemaphoreNew+0x88>
          mem = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	623b      	str	r3, [r7, #32]
 800434e:	e001      	b.n	8004354 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d04c      	beq.n	80043f6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d128      	bne.n	80043b4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d10a      	bne.n	800437e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2203      	movs	r2, #3
 800436e:	9200      	str	r2, [sp, #0]
 8004370:	2200      	movs	r2, #0
 8004372:	2100      	movs	r1, #0
 8004374:	2001      	movs	r0, #1
 8004376:	f000 fc6d 	bl	8004c54 <xQueueGenericCreateStatic>
 800437a:	6278      	str	r0, [r7, #36]	; 0x24
 800437c:	e005      	b.n	800438a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800437e:	2203      	movs	r2, #3
 8004380:	2100      	movs	r1, #0
 8004382:	2001      	movs	r0, #1
 8004384:	f000 fcdd 	bl	8004d42 <xQueueGenericCreate>
 8004388:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d022      	beq.n	80043d6 <osSemaphoreNew+0x10a>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01f      	beq.n	80043d6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004396:	2300      	movs	r3, #0
 8004398:	2200      	movs	r2, #0
 800439a:	2100      	movs	r1, #0
 800439c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800439e:	f000 fe53 	bl	8005048 <xQueueGenericSend>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d016      	beq.n	80043d6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80043a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043aa:	f001 fb16 	bl	80059da <vQueueDelete>
            hSemaphore = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
 80043b2:	e010      	b.n	80043d6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d108      	bne.n	80043cc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	461a      	mov	r2, r3
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fdd5 	bl	8004f72 <xQueueCreateCountingSemaphoreStatic>
 80043c8:	6278      	str	r0, [r7, #36]	; 0x24
 80043ca:	e004      	b.n	80043d6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fe06 	bl	8004fe0 <xQueueCreateCountingSemaphore>
 80043d4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00c      	beq.n	80043f6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <osSemaphoreNew+0x11e>
          name = attr->name;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	e001      	b.n	80043ee <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80043ee:	69f9      	ldr	r1, [r7, #28]
 80043f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043f2:	f001 fc3d 	bl	8005c70 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3728      	adds	r7, #40	; 0x28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000928 	.word	0x20000928

08004404 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800441c:	f06f 0303 	mvn.w	r3, #3
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	e04b      	b.n	80044bc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004424:	f3ef 8305 	mrs	r3, IPSR
 8004428:	617b      	str	r3, [r7, #20]
  return(result);
 800442a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10f      	bne.n	8004450 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004430:	f3ef 8310 	mrs	r3, PRIMASK
 8004434:	613b      	str	r3, [r7, #16]
  return(result);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d109      	bne.n	8004450 <osSemaphoreAcquire+0x4c>
 800443c:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <osSemaphoreAcquire+0xc4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d128      	bne.n	8004496 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004444:	f3ef 8311 	mrs	r3, BASEPRI
 8004448:	60fb      	str	r3, [r7, #12]
  return(result);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d022      	beq.n	8004496 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004456:	f06f 0303 	mvn.w	r3, #3
 800445a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800445c:	e02d      	b.n	80044ba <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004462:	f107 0308 	add.w	r3, r7, #8
 8004466:	461a      	mov	r2, r3
 8004468:	2100      	movs	r1, #0
 800446a:	69b8      	ldr	r0, [r7, #24]
 800446c:	f001 f9fc 	bl	8005868 <xQueueReceiveFromISR>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d003      	beq.n	800447e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004476:	f06f 0302 	mvn.w	r3, #2
 800447a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800447c:	e01d      	b.n	80044ba <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01a      	beq.n	80044ba <osSemaphoreAcquire+0xb6>
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <osSemaphoreAcquire+0xc8>)
 8004486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004494:	e011      	b.n	80044ba <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004496:	6839      	ldr	r1, [r7, #0]
 8004498:	69b8      	ldr	r0, [r7, #24]
 800449a:	f001 f8d9 	bl	8005650 <xQueueSemaphoreTake>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d00b      	beq.n	80044bc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80044aa:	f06f 0301 	mvn.w	r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e004      	b.n	80044bc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80044b2:	f06f 0302 	mvn.w	r3, #2
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	e000      	b.n	80044bc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80044ba:	bf00      	nop
      }
    }
  }

  return (stat);
 80044bc:	69fb      	ldr	r3, [r7, #28]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000928 	.word	0x20000928
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d103      	bne.n	80044ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80044e6:	f06f 0303 	mvn.w	r3, #3
 80044ea:	61fb      	str	r3, [r7, #28]
 80044ec:	e03e      	b.n	800456c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ee:	f3ef 8305 	mrs	r3, IPSR
 80044f2:	617b      	str	r3, [r7, #20]
  return(result);
 80044f4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fa:	f3ef 8310 	mrs	r3, PRIMASK
 80044fe:	613b      	str	r3, [r7, #16]
  return(result);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <osSemaphoreRelease+0x4a>
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <osSemaphoreRelease+0xa8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d120      	bne.n	8004550 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800450e:	f3ef 8311 	mrs	r3, BASEPRI
 8004512:	60fb      	str	r3, [r7, #12]
  return(result);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01a      	beq.n	8004550 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800451e:	f107 0308 	add.w	r3, r7, #8
 8004522:	4619      	mov	r1, r3
 8004524:	69b8      	ldr	r0, [r7, #24]
 8004526:	f000 ff25 	bl	8005374 <xQueueGiveFromISR>
 800452a:	4603      	mov	r3, r0
 800452c:	2b01      	cmp	r3, #1
 800452e:	d003      	beq.n	8004538 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004530:	f06f 0302 	mvn.w	r3, #2
 8004534:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004536:	e018      	b.n	800456a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d015      	beq.n	800456a <osSemaphoreRelease+0x9a>
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <osSemaphoreRelease+0xac>)
 8004540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800454e:	e00c      	b.n	800456a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004550:	2300      	movs	r3, #0
 8004552:	2200      	movs	r2, #0
 8004554:	2100      	movs	r1, #0
 8004556:	69b8      	ldr	r0, [r7, #24]
 8004558:	f000 fd76 	bl	8005048 <xQueueGenericSend>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d004      	beq.n	800456c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004562:	f06f 0302 	mvn.w	r3, #2
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	e000      	b.n	800456c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800456a:	bf00      	nop
    }
  }

  return (stat);
 800456c:	69fb      	ldr	r3, [r7, #28]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000928 	.word	0x20000928
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d102      	bne.n	8004598 <osSemaphoreGetCount+0x18>
    count = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	e01e      	b.n	80045d6 <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004598:	f3ef 8305 	mrs	r3, IPSR
 800459c:	617b      	str	r3, [r7, #20]
  return(result);
 800459e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10f      	bne.n	80045c4 <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a4:	f3ef 8310 	mrs	r3, PRIMASK
 80045a8:	613b      	str	r3, [r7, #16]
  return(result);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <osSemaphoreGetCount+0x44>
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <osSemaphoreGetCount+0x60>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d10a      	bne.n	80045ce <osSemaphoreGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045b8:	f3ef 8311 	mrs	r3, BASEPRI
 80045bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80045c4:	69b8      	ldr	r0, [r7, #24]
 80045c6:	f001 f9ed 	bl	80059a4 <uxQueueMessagesWaitingFromISR>
 80045ca:	61f8      	str	r0, [r7, #28]
 80045cc:	e003      	b.n	80045d6 <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80045ce:	69b8      	ldr	r0, [r7, #24]
 80045d0:	f001 f9ca 	bl	8005968 <uxQueueMessagesWaiting>
 80045d4:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 80045d6:	69fb      	ldr	r3, [r7, #28]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000928 	.word	0x20000928

080045e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a06      	ldr	r2, [pc, #24]	; (800460c <vApplicationGetIdleTaskMemory+0x28>)
 80045f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4a05      	ldr	r2, [pc, #20]	; (8004610 <vApplicationGetIdleTaskMemory+0x2c>)
 80045fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	601a      	str	r2, [r3, #0]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	2000092c 	.word	0x2000092c
 8004610:	20000988 	.word	0x20000988

08004614 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4a07      	ldr	r2, [pc, #28]	; (8004640 <vApplicationGetTimerTaskMemory+0x2c>)
 8004624:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4a06      	ldr	r2, [pc, #24]	; (8004644 <vApplicationGetTimerTaskMemory+0x30>)
 800462a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004632:	601a      	str	r2, [r3, #0]
}
 8004634:	bf00      	nop
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20000b88 	.word	0x20000b88
 8004644:	20000be4 	.word	0x20000be4

08004648 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800466c:	2320      	movs	r3, #32
 800466e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b20      	cmp	r3, #32
 8004674:	d00a      	beq.n	800468c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	60fb      	str	r3, [r7, #12]
}
 8004688:	bf00      	nop
 800468a:	e7fe      	b.n	800468a <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	3304      	adds	r3, #4
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 f9bf 	bl	8004a24 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2201      	movs	r2, #1
 80046aa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80046ac:	697b      	ldr	r3, [r7, #20]
	}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80046bc:	2020      	movs	r0, #32
 80046be:	f003 fa05 	bl	8007acc <pvPortMalloc>
 80046c2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 f9a5 	bl	8004a24 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80046e0:	687b      	ldr	r3, [r7, #4]
	}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b090      	sub	sp, #64	; 0x40
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004702:	2300      	movs	r3, #0
 8004704:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <xEventGroupWaitBits+0x36>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	623b      	str	r3, [r7, #32]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <xEventGroupWaitBits+0x56>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	61fb      	str	r3, [r7, #28]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <xEventGroupWaitBits+0x72>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	61bb      	str	r3, [r7, #24]
}
 800475a:	bf00      	nop
 800475c:	e7fe      	b.n	800475c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800475e:	f002 fa95 	bl	8006c8c <xTaskGetSchedulerState>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <xEventGroupWaitBits+0x82>
 8004768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <xEventGroupWaitBits+0x86>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <xEventGroupWaitBits+0x88>
 8004772:	2300      	movs	r3, #0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	617b      	str	r3, [r7, #20]
}
 800478a:	bf00      	nop
 800478c:	e7fe      	b.n	800478c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800478e:	f001 fdc9 	bl	8006324 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800479e:	f000 f90b 	bl	80049b8 <prvTestWaitCondition>
 80047a2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00e      	beq.n	80047c8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d028      	beq.n	800480a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	43db      	mvns	r3, r3
 80047c0:	401a      	ands	r2, r3
 80047c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e020      	b.n	800480a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80047c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d104      	bne.n	80047d8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80047d2:	2301      	movs	r3, #1
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30
 80047d6:	e018      	b.n	800480a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047f2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	1d18      	adds	r0, r3, #4
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	4313      	orrs	r3, r2
 80047fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004800:	4619      	mov	r1, r3
 8004802:	f001 ffa9 	bl	8006758 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800480a:	f001 fd99 	bl	8006340 <xTaskResumeAll>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004812:	2b00      	cmp	r3, #0
 8004814:	d031      	beq.n	800487a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d107      	bne.n	800482c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <xEventGroupWaitBits+0x198>)
 800481e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800482c:	f002 fbae 	bl	8006f8c <uxTaskResetEventItemValue>
 8004830:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d11a      	bne.n	8004872 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800483c:	f003 f846 	bl	80078cc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800484c:	f000 f8b4 	bl	80049b8 <prvTestWaitCondition>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d006      	beq.n	800486a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	43db      	mvns	r3, r3
 8004864:	401a      	ands	r2, r3
 8004866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004868:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800486a:	2301      	movs	r3, #1
 800486c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800486e:	f003 f85d 	bl	800792c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004874:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004878:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800487a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800487c:	4618      	mov	r0, r3
 800487e:	3740      	adds	r7, #64	; 0x40
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08e      	sub	sp, #56	; 0x38
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004892:	2300      	movs	r3, #0
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800489a:	2300      	movs	r3, #0
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xEventGroupSetBits+0x32>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	613b      	str	r3, [r7, #16]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <xEventGroupSetBits+0x52>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	60fb      	str	r3, [r7, #12]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	3304      	adds	r3, #4
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	3308      	adds	r3, #8
 80048e4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80048e6:	f001 fd1d 	bl	8006324 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80048fc:	e03c      	b.n	8004978 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80048fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004914:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800491c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d108      	bne.n	800493a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004934:	2301      	movs	r3, #1
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004938:	e008      	b.n	800494c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	429a      	cmp	r2, r3
 8004946:	d101      	bne.n	800494c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004948:	2301      	movs	r3, #1
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800495c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	4313      	orrs	r3, r2
 8004962:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800496c:	4619      	mov	r1, r3
 800496e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004970:	f001 ffbe 	bl	80068f0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	429a      	cmp	r2, r3
 800497e:	d1be      	bne.n	80048fe <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	43db      	mvns	r3, r3
 8004988:	401a      	ands	r2, r3
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800498e:	f001 fcd7 	bl	8006340 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	681b      	ldr	r3, [r3, #0]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3738      	adds	r7, #56	; 0x38
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80049a8:	6839      	ldr	r1, [r7, #0]
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ff6c 	bl	8004888 <xEventGroupSetBits>
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d107      	bne.n	80049de <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e007      	b.n	80049ee <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d101      	bne.n	80049ee <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80049ea:	2301      	movs	r3, #1
 80049ec:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80049ee:	697b      	ldr	r3, [r7, #20]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
	...

080049fc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	4804      	ldr	r0, [pc, #16]	; (8004a20 <xEventGroupSetBitsFromISR+0x24>)
 8004a10:	f002 fe4e 	bl	80076b0 <xTimerPendFunctionCallFromISR>
 8004a14:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004a16:	697b      	ldr	r3, [r7, #20]
	}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	0800499f 	.word	0x0800499f

08004a24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f103 0208 	add.w	r2, r3, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f103 0208 	add.w	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f103 0208 	add.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d103      	bne.n	8004ae0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e00c      	b.n	8004afa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e002      	b.n	8004aee <vListInsert+0x2e>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d2f6      	bcs.n	8004ae8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6892      	ldr	r2, [r2, #8]
 8004b46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6852      	ldr	r2, [r2, #4]
 8004b50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d103      	bne.n	8004b64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	1e5a      	subs	r2, r3, #1
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
	...

08004b84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <xQueueGenericReset+0x2a>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	60bb      	str	r3, [r7, #8]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bae:	f002 fe8d 	bl	80078cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	68f9      	ldr	r1, [r7, #12]
 8004bbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	441a      	add	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	3b01      	subs	r3, #1
 8004be0:	68f9      	ldr	r1, [r7, #12]
 8004be2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	441a      	add	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	22ff      	movs	r2, #255	; 0xff
 8004bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	22ff      	movs	r2, #255	; 0xff
 8004bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d114      	bne.n	8004c2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01a      	beq.n	8004c42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3310      	adds	r3, #16
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 fe09 	bl	8006828 <xTaskRemoveFromEventList>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d012      	beq.n	8004c42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <xQueueGenericReset+0xcc>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	e009      	b.n	8004c42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3310      	adds	r3, #16
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff fef6 	bl	8004a24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3324      	adds	r3, #36	; 0x24
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fef1 	bl	8004a24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c42:	f002 fe73 	bl	800792c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c46:	2301      	movs	r3, #1
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	e000ed04 	.word	0xe000ed04

08004c54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08e      	sub	sp, #56	; 0x38
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <xQueueGenericCreateStatic+0x52>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <xQueueGenericCreateStatic+0x56>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <xQueueGenericCreateStatic+0x58>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	623b      	str	r3, [r7, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <xQueueGenericCreateStatic+0x7e>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <xQueueGenericCreateStatic+0x82>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericCreateStatic+0x84>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	61fb      	str	r3, [r7, #28]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cf2:	2350      	movs	r3, #80	; 0x50
 8004cf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b50      	cmp	r3, #80	; 0x50
 8004cfa:	d00a      	beq.n	8004d12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	61bb      	str	r3, [r7, #24]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00d      	beq.n	8004d38 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d24:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f843 	bl	8004dbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3730      	adds	r7, #48	; 0x30
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b08a      	sub	sp, #40	; 0x28
 8004d46:	af02      	add	r7, sp, #8
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	613b      	str	r3, [r7, #16]
}
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	e004      	b.n	8004d82 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3350      	adds	r3, #80	; 0x50
 8004d86:	4618      	mov	r0, r3
 8004d88:	f002 fea0 	bl	8007acc <pvPortMalloc>
 8004d8c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00f      	beq.n	8004db4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	3350      	adds	r3, #80	; 0x50
 8004d98:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004da2:	79fa      	ldrb	r2, [r7, #7]
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f805 	bl	8004dbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004db4:	69bb      	ldr	r3, [r7, #24]
	}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3720      	adds	r7, #32
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e002      	b.n	8004de0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004dec:	2101      	movs	r1, #1
 8004dee:	69b8      	ldr	r0, [r7, #24]
 8004df0:	f7ff fec8 	bl	8004b84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00e      	beq.n	8004e30 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e24:	2300      	movs	r3, #0
 8004e26:	2200      	movs	r2, #0
 8004e28:	2100      	movs	r1, #0
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f90c 	bl	8005048 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e42:	2301      	movs	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	2300      	movs	r3, #0
 8004e48:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6939      	ldr	r1, [r7, #16]
 8004e50:	6978      	ldr	r0, [r7, #20]
 8004e52:	f7ff ff76 	bl	8004d42 <xQueueGenericCreate>
 8004e56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff ffd3 	bl	8004e04 <prvInitialiseMutex>

		return pxNewQueue;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	4603      	mov	r3, r0
 8004e70:	6039      	str	r1, [r7, #0]
 8004e72:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e74:	2301      	movs	r3, #1
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	6939      	ldr	r1, [r7, #16]
 8004e86:	6978      	ldr	r0, [r7, #20]
 8004e88:	f7ff fee4 	bl	8004c54 <xQueueGenericCreateStatic>
 8004e8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f7ff ffb8 	bl	8004e04 <prvInitialiseMutex>

		return pxNewQueue;
 8004e94:	68fb      	ldr	r3, [r7, #12]
	}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004e9e:	b590      	push	{r4, r7, lr}
 8004ea0:	b087      	sub	sp, #28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60fb      	str	r3, [r7, #12]
}
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	685c      	ldr	r4, [r3, #4]
 8004eca:	f001 fed1 	bl	8006c70 <xTaskGetCurrentTaskHandle>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	429c      	cmp	r4, r3
 8004ed2:	d111      	bne.n	8004ef8 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d105      	bne.n	8004ef2 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2100      	movs	r1, #0
 8004eec:	6938      	ldr	r0, [r7, #16]
 8004eee:	f000 f8ab 	bl	8005048 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e001      	b.n	8004efc <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004efc:	697b      	ldr	r3, [r7, #20]
	}
 8004efe:	4618      	mov	r0, r3
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd90      	pop	{r4, r7, pc}

08004f06 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004f06:	b590      	push	{r4, r7, lr}
 8004f08:	b087      	sub	sp, #28
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	60fb      	str	r3, [r7, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	685c      	ldr	r4, [r3, #4]
 8004f34:	f001 fe9c 	bl	8006c70 <xTaskGetCurrentTaskHandle>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	d107      	bne.n	8004f4e <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e00c      	b.n	8004f68 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	6938      	ldr	r0, [r7, #16]
 8004f52:	f000 fb7d 	bl	8005650 <xQueueSemaphoreTake>
 8004f56:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004f68:	697b      	ldr	r3, [r7, #20]
	}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd90      	pop	{r4, r7, pc}

08004f72 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b08a      	sub	sp, #40	; 0x28
 8004f76:	af02      	add	r7, sp, #8
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	61bb      	str	r3, [r7, #24]
}
 8004f96:	bf00      	nop
 8004f98:	e7fe      	b.n	8004f98 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d90a      	bls.n	8004fb8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	617b      	str	r3, [r7, #20]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004fb8:	2302      	movs	r3, #2
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff fe46 	bl	8004c54 <xQueueGenericCreateStatic>
 8004fc8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
	}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	613b      	str	r3, [r7, #16]
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d90a      	bls.n	8005024 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	60fb      	str	r3, [r7, #12]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005024:	2202      	movs	r2, #2
 8005026:	2100      	movs	r1, #0
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fe8a 	bl	8004d42 <xQueueGenericCreate>
 800502e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800503c:	697b      	ldr	r3, [r7, #20]
	}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08e      	sub	sp, #56	; 0x38
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005056:	2300      	movs	r3, #0
 8005058:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xQueueGenericSend+0x32>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d103      	bne.n	8005088 <xQueueGenericSend+0x40>
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <xQueueGenericSend+0x44>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <xQueueGenericSend+0x46>
 800508c:	2300      	movs	r3, #0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <xQueueGenericSend+0x60>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d103      	bne.n	80050b6 <xQueueGenericSend+0x6e>
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <xQueueGenericSend+0x72>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <xQueueGenericSend+0x74>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	623b      	str	r3, [r7, #32]
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050d6:	f001 fdd9 	bl	8006c8c <xTaskGetSchedulerState>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d102      	bne.n	80050e6 <xQueueGenericSend+0x9e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <xQueueGenericSend+0xa2>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <xQueueGenericSend+0xa4>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <xQueueGenericSend+0xbe>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	61fb      	str	r3, [r7, #28]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005106:	f002 fbe1 	bl	80078cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <xQueueGenericSend+0xd4>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d129      	bne.n	8005170 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005122:	f000 fc94 	bl	8005a4e <prvCopyDataToQueue>
 8005126:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	d010      	beq.n	8005152 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	3324      	adds	r3, #36	; 0x24
 8005134:	4618      	mov	r0, r3
 8005136:	f001 fb77 	bl	8006828 <xTaskRemoveFromEventList>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d013      	beq.n	8005168 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005140:	4b3f      	ldr	r3, [pc, #252]	; (8005240 <xQueueGenericSend+0x1f8>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	e00a      	b.n	8005168 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005158:	4b39      	ldr	r3, [pc, #228]	; (8005240 <xQueueGenericSend+0x1f8>)
 800515a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005168:	f002 fbe0 	bl	800792c <vPortExitCritical>
				return pdPASS;
 800516c:	2301      	movs	r3, #1
 800516e:	e063      	b.n	8005238 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d103      	bne.n	800517e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005176:	f002 fbd9 	bl	800792c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800517a:	2300      	movs	r3, #0
 800517c:	e05c      	b.n	8005238 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	4618      	mov	r0, r3
 800518a:	f001 fc13 	bl	80069b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800518e:	2301      	movs	r3, #1
 8005190:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005192:	f002 fbcb 	bl	800792c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005196:	f001 f8c5 	bl	8006324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800519a:	f002 fb97 	bl	80078cc <vPortEnterCritical>
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051a4:	b25b      	sxtb	r3, r3
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d103      	bne.n	80051b4 <xQueueGenericSend+0x16c>
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ba:	b25b      	sxtb	r3, r3
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d103      	bne.n	80051ca <xQueueGenericSend+0x182>
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051ca:	f002 fbaf 	bl	800792c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ce:	1d3a      	adds	r2, r7, #4
 80051d0:	f107 0314 	add.w	r3, r7, #20
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 fc02 	bl	80069e0 <xTaskCheckForTimeOut>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d124      	bne.n	800522c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051e4:	f000 fd2b 	bl	8005c3e <prvIsQueueFull>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d018      	beq.n	8005220 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	3310      	adds	r3, #16
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	4611      	mov	r1, r2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f001 fa8a 	bl	8006710 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051fe:	f000 fcb6 	bl	8005b6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005202:	f001 f89d 	bl	8006340 <xTaskResumeAll>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	f47f af7c 	bne.w	8005106 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800520e:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <xQueueGenericSend+0x1f8>)
 8005210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	e772      	b.n	8005106 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005222:	f000 fca4 	bl	8005b6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005226:	f001 f88b 	bl	8006340 <xTaskResumeAll>
 800522a:	e76c      	b.n	8005106 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800522c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800522e:	f000 fc9e 	bl	8005b6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005232:	f001 f885 	bl	8006340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005236:	2300      	movs	r3, #0
		}
	}
}
 8005238:	4618      	mov	r0, r3
 800523a:	3738      	adds	r7, #56	; 0x38
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	e000ed04 	.word	0xe000ed04

08005244 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08e      	sub	sp, #56	; 0x38
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d103      	bne.n	8005280 <xQueueGenericSendFromISR+0x3c>
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <xQueueGenericSendFromISR+0x40>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <xQueueGenericSendFromISR+0x42>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	623b      	str	r3, [r7, #32]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d103      	bne.n	80052ae <xQueueGenericSendFromISR+0x6a>
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <xQueueGenericSendFromISR+0x6e>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <xQueueGenericSendFromISR+0x70>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	61fb      	str	r3, [r7, #28]
}
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052ce:	f002 fbbf 	bl	8007a50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052d2:	f3ef 8211 	mrs	r2, BASEPRI
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	61ba      	str	r2, [r7, #24]
 80052e8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <xQueueGenericSendFromISR+0xbc>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d12c      	bne.n	800535a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005310:	f000 fb9d 	bl	8005a4e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005314:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d112      	bne.n	8005344 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	3324      	adds	r3, #36	; 0x24
 800532a:	4618      	mov	r0, r3
 800532c:	f001 fa7c 	bl	8006828 <xTaskRemoveFromEventList>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00e      	beq.n	8005354 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00b      	beq.n	8005354 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e007      	b.n	8005354 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005344:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005348:	3301      	adds	r3, #1
 800534a:	b2db      	uxtb	r3, r3
 800534c:	b25a      	sxtb	r2, r3
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005354:	2301      	movs	r3, #1
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005358:	e001      	b.n	800535e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800535a:	2300      	movs	r3, #0
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005368:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800536c:	4618      	mov	r0, r3
 800536e:	3738      	adds	r7, #56	; 0x38
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08e      	sub	sp, #56	; 0x38
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	623b      	str	r3, [r7, #32]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <xQueueGiveFromISR+0x48>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	61fb      	str	r3, [r7, #28]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <xQueueGiveFromISR+0x58>
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <xQueueGiveFromISR+0x5c>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <xQueueGiveFromISR+0x5e>
 80053d0:	2300      	movs	r3, #0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <xQueueGiveFromISR+0x78>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	61bb      	str	r3, [r7, #24]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053ec:	f002 fb30 	bl	8007a50 <vPortValidateInterruptPriority>
	__asm volatile
 80053f0:	f3ef 8211 	mrs	r2, BASEPRI
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	617a      	str	r2, [r7, #20]
 8005406:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005408:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005418:	429a      	cmp	r2, r3
 800541a:	d22b      	bcs.n	8005474 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800542e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005436:	d112      	bne.n	800545e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d016      	beq.n	800546e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	3324      	adds	r3, #36	; 0x24
 8005444:	4618      	mov	r0, r3
 8005446:	f001 f9ef 	bl	8006828 <xTaskRemoveFromEventList>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00e      	beq.n	800546e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	e007      	b.n	800546e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800545e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005462:	3301      	adds	r3, #1
 8005464:	b2db      	uxtb	r3, r3
 8005466:	b25a      	sxtb	r2, r3
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800546e:	2301      	movs	r3, #1
 8005470:	637b      	str	r3, [r7, #52]	; 0x34
 8005472:	e001      	b.n	8005478 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005474:	2300      	movs	r3, #0
 8005476:	637b      	str	r3, [r7, #52]	; 0x34
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f383 8811 	msr	BASEPRI, r3
}
 8005482:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005486:	4618      	mov	r0, r3
 8005488:	3738      	adds	r7, #56	; 0x38
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08c      	sub	sp, #48	; 0x30
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800549c:	2300      	movs	r3, #0
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <xQueueReceive+0x30>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	623b      	str	r3, [r7, #32]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d103      	bne.n	80054ce <xQueueReceive+0x3e>
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <xQueueReceive+0x42>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <xQueueReceive+0x44>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <xQueueReceive+0x5e>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	61fb      	str	r3, [r7, #28]
}
 80054ea:	bf00      	nop
 80054ec:	e7fe      	b.n	80054ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054ee:	f001 fbcd 	bl	8006c8c <xTaskGetSchedulerState>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <xQueueReceive+0x6e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <xQueueReceive+0x72>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <xQueueReceive+0x74>
 8005502:	2300      	movs	r3, #0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10a      	bne.n	800551e <xQueueReceive+0x8e>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	61bb      	str	r3, [r7, #24]
}
 800551a:	bf00      	nop
 800551c:	e7fe      	b.n	800551c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800551e:	f002 f9d5 	bl	80078cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01f      	beq.n	800556e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005532:	f000 faf6 	bl	8005b22 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	1e5a      	subs	r2, r3, #1
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00f      	beq.n	8005566 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	3310      	adds	r3, #16
 800554a:	4618      	mov	r0, r3
 800554c:	f001 f96c 	bl	8006828 <xTaskRemoveFromEventList>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005556:	4b3d      	ldr	r3, [pc, #244]	; (800564c <xQueueReceive+0x1bc>)
 8005558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005566:	f002 f9e1 	bl	800792c <vPortExitCritical>
				return pdPASS;
 800556a:	2301      	movs	r3, #1
 800556c:	e069      	b.n	8005642 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d103      	bne.n	800557c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005574:	f002 f9da 	bl	800792c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005578:	2300      	movs	r3, #0
 800557a:	e062      	b.n	8005642 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005582:	f107 0310 	add.w	r3, r7, #16
 8005586:	4618      	mov	r0, r3
 8005588:	f001 fa14 	bl	80069b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800558c:	2301      	movs	r3, #1
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005590:	f002 f9cc 	bl	800792c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005594:	f000 fec6 	bl	8006324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005598:	f002 f998 	bl	80078cc <vPortEnterCritical>
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055a2:	b25b      	sxtb	r3, r3
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d103      	bne.n	80055b2 <xQueueReceive+0x122>
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d103      	bne.n	80055c8 <xQueueReceive+0x138>
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055c8:	f002 f9b0 	bl	800792c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055cc:	1d3a      	adds	r2, r7, #4
 80055ce:	f107 0310 	add.w	r3, r7, #16
 80055d2:	4611      	mov	r1, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fa03 	bl	80069e0 <xTaskCheckForTimeOut>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d123      	bne.n	8005628 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055e2:	f000 fb16 	bl	8005c12 <prvIsQueueEmpty>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d017      	beq.n	800561c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	3324      	adds	r3, #36	; 0x24
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 f88b 	bl	8006710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055fc:	f000 fab7 	bl	8005b6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005600:	f000 fe9e 	bl	8006340 <xTaskResumeAll>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d189      	bne.n	800551e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800560a:	4b10      	ldr	r3, [pc, #64]	; (800564c <xQueueReceive+0x1bc>)
 800560c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	e780      	b.n	800551e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800561c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561e:	f000 faa6 	bl	8005b6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005622:	f000 fe8d 	bl	8006340 <xTaskResumeAll>
 8005626:	e77a      	b.n	800551e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800562a:	f000 faa0 	bl	8005b6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800562e:	f000 fe87 	bl	8006340 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005634:	f000 faed 	bl	8005c12 <prvIsQueueEmpty>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	f43f af6f 	beq.w	800551e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005640:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005642:	4618      	mov	r0, r3
 8005644:	3730      	adds	r7, #48	; 0x30
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	e000ed04 	.word	0xe000ed04

08005650 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08e      	sub	sp, #56	; 0x38
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800565a:	2300      	movs	r3, #0
 800565c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005662:	2300      	movs	r3, #0
 8005664:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	623b      	str	r3, [r7, #32]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	61fb      	str	r3, [r7, #28]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056a0:	f001 faf4 	bl	8006c8c <xTaskGetSchedulerState>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <xQueueSemaphoreTake+0x60>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <xQueueSemaphoreTake+0x64>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <xQueueSemaphoreTake+0x66>
 80056b4:	2300      	movs	r3, #0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	61bb      	str	r3, [r7, #24]
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80056d0:	f002 f8fc 	bl	80078cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d024      	beq.n	800572a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	1e5a      	subs	r2, r3, #1
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80056f0:	f001 fc64 	bl	8006fbc <pvTaskIncrementMutexHeldCount>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00f      	beq.n	8005722 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	3310      	adds	r3, #16
 8005706:	4618      	mov	r0, r3
 8005708:	f001 f88e 	bl	8006828 <xTaskRemoveFromEventList>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005712:	4b54      	ldr	r3, [pc, #336]	; (8005864 <xQueueSemaphoreTake+0x214>)
 8005714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005722:	f002 f903 	bl	800792c <vPortExitCritical>
				return pdPASS;
 8005726:	2301      	movs	r3, #1
 8005728:	e097      	b.n	800585a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d111      	bne.n	8005754 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	617b      	str	r3, [r7, #20]
}
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800574c:	f002 f8ee 	bl	800792c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005750:	2300      	movs	r3, #0
 8005752:	e082      	b.n	800585a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800575a:	f107 030c 	add.w	r3, r7, #12
 800575e:	4618      	mov	r0, r3
 8005760:	f001 f928 	bl	80069b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005764:	2301      	movs	r3, #1
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005768:	f002 f8e0 	bl	800792c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800576c:	f000 fdda 	bl	8006324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005770:	f002 f8ac 	bl	80078cc <vPortEnterCritical>
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800577a:	b25b      	sxtb	r3, r3
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d103      	bne.n	800578a <xQueueSemaphoreTake+0x13a>
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005790:	b25b      	sxtb	r3, r3
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d103      	bne.n	80057a0 <xQueueSemaphoreTake+0x150>
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a0:	f002 f8c4 	bl	800792c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057a4:	463a      	mov	r2, r7
 80057a6:	f107 030c 	add.w	r3, r7, #12
 80057aa:	4611      	mov	r1, r2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 f917 	bl	80069e0 <xTaskCheckForTimeOut>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d132      	bne.n	800581e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057ba:	f000 fa2a 	bl	8005c12 <prvIsQueueEmpty>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d026      	beq.n	8005812 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80057cc:	f002 f87e 	bl	80078cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fa77 	bl	8006cc8 <xTaskPriorityInherit>
 80057da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057dc:	f002 f8a6 	bl	800792c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	3324      	adds	r3, #36	; 0x24
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	4611      	mov	r1, r2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 ff91 	bl	8006710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057f0:	f000 f9bd 	bl	8005b6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057f4:	f000 fda4 	bl	8006340 <xTaskResumeAll>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f47f af68 	bne.w	80056d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005800:	4b18      	ldr	r3, [pc, #96]	; (8005864 <xQueueSemaphoreTake+0x214>)
 8005802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	e75e      	b.n	80056d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005814:	f000 f9ab 	bl	8005b6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005818:	f000 fd92 	bl	8006340 <xTaskResumeAll>
 800581c:	e758      	b.n	80056d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800581e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005820:	f000 f9a5 	bl	8005b6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005824:	f000 fd8c 	bl	8006340 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800582a:	f000 f9f2 	bl	8005c12 <prvIsQueueEmpty>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	f43f af4d 	beq.w	80056d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00d      	beq.n	8005858 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800583c:	f002 f846 	bl	80078cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005842:	f000 f8ed 	bl	8005a20 <prvGetDisinheritPriorityAfterTimeout>
 8005846:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800584e:	4618      	mov	r0, r3
 8005850:	f001 fb16 	bl	8006e80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005854:	f002 f86a 	bl	800792c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005858:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800585a:	4618      	mov	r0, r3
 800585c:	3738      	adds	r7, #56	; 0x38
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08e      	sub	sp, #56	; 0x38
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	623b      	str	r3, [r7, #32]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <xQueueReceiveFromISR+0x3a>
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <xQueueReceiveFromISR+0x3e>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <xQueueReceiveFromISR+0x40>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	61fb      	str	r3, [r7, #28]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058c2:	f002 f8c5 	bl	8007a50 <vPortValidateInterruptPriority>
	__asm volatile
 80058c6:	f3ef 8211 	mrs	r2, BASEPRI
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	61ba      	str	r2, [r7, #24]
 80058dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80058de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02f      	beq.n	800594e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058fc:	f000 f911 	bl	8005b22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	1e5a      	subs	r2, r3, #1
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005908:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d112      	bne.n	8005938 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d016      	beq.n	8005948 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	3310      	adds	r3, #16
 800591e:	4618      	mov	r0, r3
 8005920:	f000 ff82 	bl	8006828 <xTaskRemoveFromEventList>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00b      	beq.n	8005948 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e007      	b.n	8005948 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800593c:	3301      	adds	r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	b25a      	sxtb	r2, r3
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005948:	2301      	movs	r3, #1
 800594a:	637b      	str	r3, [r7, #52]	; 0x34
 800594c:	e001      	b.n	8005952 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800594e:	2300      	movs	r3, #0
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f383 8811 	msr	BASEPRI, r3
}
 800595c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005960:	4618      	mov	r0, r3
 8005962:	3738      	adds	r7, #56	; 0x38
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	60bb      	str	r3, [r7, #8]
}
 8005988:	bf00      	nop
 800598a:	e7fe      	b.n	800598a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800598c:	f001 ff9e 	bl	80078cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005996:	f001 ffc9 	bl	800792c <vPortExitCritical>

	return uxReturn;
 800599a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	60bb      	str	r3, [r7, #8]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 80059ce:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr

080059da <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <vQueueDelete+0x28>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	60bb      	str	r3, [r7, #8]
}
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f95c 	bl	8005cc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f002 f91e 	bl	8007c54 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d006      	beq.n	8005a3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e001      	b.n	8005a42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005a42:	68fb      	ldr	r3, [r7, #12]
	}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr

08005a4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b086      	sub	sp, #24
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10d      	bne.n	8005a88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d14d      	bne.n	8005b10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 f993 	bl	8006da4 <xTaskPriorityDisinherit>
 8005a7e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	e043      	b.n	8005b10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d119      	bne.n	8005ac2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6898      	ldr	r0, [r3, #8]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	461a      	mov	r2, r3
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	f003 facb 	bl	8009034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	441a      	add	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d32b      	bcc.n	8005b10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	e026      	b.n	8005b10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	68d8      	ldr	r0, [r3, #12]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	461a      	mov	r2, r3
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	f003 fab1 	bl	8009034 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	425b      	negs	r3, r3
 8005adc:	441a      	add	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d207      	bcs.n	8005afe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	425b      	negs	r3, r3
 8005af8:	441a      	add	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d105      	bne.n	8005b10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b18:	697b      	ldr	r3, [r7, #20]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d018      	beq.n	8005b66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	441a      	add	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d303      	bcc.n	8005b56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68d9      	ldr	r1, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	461a      	mov	r2, r3
 8005b60:	6838      	ldr	r0, [r7, #0]
 8005b62:	f003 fa67 	bl	8009034 <memcpy>
	}
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b76:	f001 fea9 	bl	80078cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b82:	e011      	b.n	8005ba8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d012      	beq.n	8005bb2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3324      	adds	r3, #36	; 0x24
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fe49 	bl	8006828 <xTaskRemoveFromEventList>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b9c:	f000 ff82 	bl	8006aa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	dce9      	bgt.n	8005b84 <prvUnlockQueue+0x16>
 8005bb0:	e000      	b.n	8005bb4 <prvUnlockQueue+0x46>
					break;
 8005bb2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	22ff      	movs	r2, #255	; 0xff
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005bbc:	f001 feb6 	bl	800792c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bc0:	f001 fe84 	bl	80078cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bcc:	e011      	b.n	8005bf2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d012      	beq.n	8005bfc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3310      	adds	r3, #16
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fe24 	bl	8006828 <xTaskRemoveFromEventList>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005be6:	f000 ff5d 	bl	8006aa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	dce9      	bgt.n	8005bce <prvUnlockQueue+0x60>
 8005bfa:	e000      	b.n	8005bfe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bfc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	22ff      	movs	r2, #255	; 0xff
 8005c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c06:	f001 fe91 	bl	800792c <vPortExitCritical>
}
 8005c0a:	bf00      	nop
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c1a:	f001 fe57 	bl	80078cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c26:	2301      	movs	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e001      	b.n	8005c30 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c30:	f001 fe7c 	bl	800792c <vPortExitCritical>

	return xReturn;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c46:	f001 fe41 	bl	80078cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d102      	bne.n	8005c5c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c56:	2301      	movs	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e001      	b.n	8005c60 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c60:	f001 fe64 	bl	800792c <vPortExitCritical>

	return xReturn;
 8005c64:	68fb      	ldr	r3, [r7, #12]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	e014      	b.n	8005caa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c80:	4a0e      	ldr	r2, [pc, #56]	; (8005cbc <vQueueAddToRegistry+0x4c>)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10b      	bne.n	8005ca4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c8c:	490b      	ldr	r1, [pc, #44]	; (8005cbc <vQueueAddToRegistry+0x4c>)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c96:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <vQueueAddToRegistry+0x4c>)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ca2:	e006      	b.n	8005cb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b07      	cmp	r3, #7
 8005cae:	d9e7      	bls.n	8005c80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr
 8005cbc:	20000fe4 	.word	0x20000fe4

08005cc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e016      	b.n	8005cfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005cce:	4a10      	ldr	r2, [pc, #64]	; (8005d10 <vQueueUnregisterQueue+0x50>)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4413      	add	r3, r2
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d10b      	bne.n	8005cf6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005cde:	4a0c      	ldr	r2, [pc, #48]	; (8005d10 <vQueueUnregisterQueue+0x50>)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ce8:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <vQueueUnregisterQueue+0x50>)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4413      	add	r3, r2
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	605a      	str	r2, [r3, #4]
				break;
 8005cf4:	e006      	b.n	8005d04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b07      	cmp	r3, #7
 8005d00:	d9e5      	bls.n	8005cce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005d02:	bf00      	nop
 8005d04:	bf00      	nop
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000fe4 	.word	0x20000fe4

08005d14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d24:	f001 fdd2 	bl	80078cc <vPortEnterCritical>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d2e:	b25b      	sxtb	r3, r3
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d103      	bne.n	8005d3e <vQueueWaitForMessageRestricted+0x2a>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d103      	bne.n	8005d54 <vQueueWaitForMessageRestricted+0x40>
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d54:	f001 fdea 	bl	800792c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	3324      	adds	r3, #36	; 0x24
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fd31 	bl	80067d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d6e:	6978      	ldr	r0, [r7, #20]
 8005d70:	f7ff fefd 	bl	8005b6e <prvUnlockQueue>
	}
 8005d74:	bf00      	nop
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08e      	sub	sp, #56	; 0x38
 8005d80:	af04      	add	r7, sp, #16
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	623b      	str	r3, [r7, #32]
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	61fb      	str	r3, [r7, #28]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dc2:	235c      	movs	r3, #92	; 0x5c
 8005dc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b5c      	cmp	r3, #92	; 0x5c
 8005dca:	d00a      	beq.n	8005de2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	61bb      	str	r3, [r7, #24]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01e      	beq.n	8005e26 <xTaskCreateStatic+0xaa>
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d01b      	beq.n	8005e26 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e00:	2300      	movs	r3, #0
 8005e02:	9303      	str	r3, [sp, #12]
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	9302      	str	r3, [sp, #8]
 8005e08:	f107 0314 	add.w	r3, r7, #20
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f850 	bl	8005ebe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e20:	f000 f8d4 	bl	8005fcc <prvAddNewTaskToReadyList>
 8005e24:	e001      	b.n	8005e2a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e2a:	697b      	ldr	r3, [r7, #20]
	}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3728      	adds	r7, #40	; 0x28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08c      	sub	sp, #48	; 0x30
 8005e38:	af04      	add	r7, sp, #16
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fe3f 	bl	8007acc <pvPortMalloc>
 8005e4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e56:	205c      	movs	r0, #92	; 0x5c
 8005e58:	f001 fe38 	bl	8007acc <pvPortMalloc>
 8005e5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
 8005e6a:	e005      	b.n	8005e78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e6c:	6978      	ldr	r0, [r7, #20]
 8005e6e:	f001 fef1 	bl	8007c54 <vPortFree>
 8005e72:	e001      	b.n	8005e78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d017      	beq.n	8005eae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9303      	str	r3, [sp, #12]
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	9302      	str	r3, [sp, #8]
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f80e 	bl	8005ebe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ea2:	69f8      	ldr	r0, [r7, #28]
 8005ea4:	f000 f892 	bl	8005fcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e002      	b.n	8005eb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005eae:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
	}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	21a5      	movs	r1, #165	; 0xa5
 8005ed8:	f003 f832 	bl	8008f40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f023 0307 	bic.w	r3, r3, #7
 8005ef4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	617b      	str	r3, [r7, #20]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f16:	2300      	movs	r3, #0
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	e012      	b.n	8005f42 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	7819      	ldrb	r1, [r3, #0]
 8005f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	3334      	adds	r3, #52	; 0x34
 8005f2c:	460a      	mov	r2, r1
 8005f2e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d006      	beq.n	8005f4a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2b0f      	cmp	r3, #15
 8005f46:	d9e9      	bls.n	8005f1c <prvInitialiseNewTask+0x5e>
 8005f48:	e000      	b.n	8005f4c <prvInitialiseNewTask+0x8e>
		{
			break;
 8005f4a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	2b37      	cmp	r3, #55	; 0x37
 8005f58:	d901      	bls.n	8005f5e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f5a:	2337      	movs	r3, #55	; 0x37
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f68:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	3304      	adds	r3, #4
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fe fd74 	bl	8004a62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	3318      	adds	r3, #24
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fd6f 	bl	8004a62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	68f9      	ldr	r1, [r7, #12]
 8005fac:	69b8      	ldr	r0, [r7, #24]
 8005fae:	f001 fb9f 	bl	80076f0 <pxPortInitialiseStack>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fc4:	bf00      	nop
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fd4:	f001 fc7a 	bl	80078cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fd8:	4b2d      	ldr	r3, [pc, #180]	; (8006090 <prvAddNewTaskToReadyList+0xc4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	4a2c      	ldr	r2, [pc, #176]	; (8006090 <prvAddNewTaskToReadyList+0xc4>)
 8005fe0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fe2:	4b2c      	ldr	r3, [pc, #176]	; (8006094 <prvAddNewTaskToReadyList+0xc8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fea:	4a2a      	ldr	r2, [pc, #168]	; (8006094 <prvAddNewTaskToReadyList+0xc8>)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ff0:	4b27      	ldr	r3, [pc, #156]	; (8006090 <prvAddNewTaskToReadyList+0xc4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d110      	bne.n	800601a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ff8:	f000 fd78 	bl	8006aec <prvInitialiseTaskLists>
 8005ffc:	e00d      	b.n	800601a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ffe:	4b26      	ldr	r3, [pc, #152]	; (8006098 <prvAddNewTaskToReadyList+0xcc>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006006:	4b23      	ldr	r3, [pc, #140]	; (8006094 <prvAddNewTaskToReadyList+0xc8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	429a      	cmp	r2, r3
 8006012:	d802      	bhi.n	800601a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006014:	4a1f      	ldr	r2, [pc, #124]	; (8006094 <prvAddNewTaskToReadyList+0xc8>)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800601a:	4b20      	ldr	r3, [pc, #128]	; (800609c <prvAddNewTaskToReadyList+0xd0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	4a1e      	ldr	r2, [pc, #120]	; (800609c <prvAddNewTaskToReadyList+0xd0>)
 8006022:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006024:	4b1d      	ldr	r3, [pc, #116]	; (800609c <prvAddNewTaskToReadyList+0xd0>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <prvAddNewTaskToReadyList+0xd4>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d903      	bls.n	8006040 <prvAddNewTaskToReadyList+0x74>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	4a18      	ldr	r2, [pc, #96]	; (80060a0 <prvAddNewTaskToReadyList+0xd4>)
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4a15      	ldr	r2, [pc, #84]	; (80060a4 <prvAddNewTaskToReadyList+0xd8>)
 800604e:	441a      	add	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f7fe fd0f 	bl	8004a7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800605c:	f001 fc66 	bl	800792c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <prvAddNewTaskToReadyList+0xcc>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <prvAddNewTaskToReadyList+0xc8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	429a      	cmp	r2, r3
 8006074:	d207      	bcs.n	8006086 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006076:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <prvAddNewTaskToReadyList+0xdc>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	200014f8 	.word	0x200014f8
 8006094:	20001024 	.word	0x20001024
 8006098:	20001504 	.word	0x20001504
 800609c:	20001514 	.word	0x20001514
 80060a0:	20001500 	.word	0x20001500
 80060a4:	20001028 	.word	0x20001028
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d017      	beq.n	80060ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060be:	4b13      	ldr	r3, [pc, #76]	; (800610c <vTaskDelay+0x60>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <vTaskDelay+0x30>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	60bb      	str	r3, [r7, #8]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060dc:	f000 f922 	bl	8006324 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060e0:	2100      	movs	r1, #0
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 ff7e 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060e8:	f000 f92a 	bl	8006340 <xTaskResumeAll>
 80060ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d107      	bne.n	8006104 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <vTaskDelay+0x64>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20001520 	.word	0x20001520
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800611e:	2300      	movs	r3, #0
 8006120:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b37      	cmp	r3, #55	; 0x37
 8006126:	d90a      	bls.n	800613e <vTaskPrioritySet+0x2a>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60fb      	str	r3, [r7, #12]
}
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b37      	cmp	r3, #55	; 0x37
 8006142:	d901      	bls.n	8006148 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006144:	2337      	movs	r3, #55	; 0x37
 8006146:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8006148:	f001 fbc0 	bl	80078cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <vTaskPrioritySet+0x44>
 8006152:	4b3d      	ldr	r3, [pc, #244]	; (8006248 <vTaskPrioritySet+0x134>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	e000      	b.n	800615a <vTaskPrioritySet+0x46>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006160:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d068      	beq.n	800623c <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	429a      	cmp	r2, r3
 8006170:	d90d      	bls.n	800618e <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8006172:	4b35      	ldr	r3, [pc, #212]	; (8006248 <vTaskPrioritySet+0x134>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	429a      	cmp	r2, r3
 800617a:	d00f      	beq.n	800619c <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800617c:	4b32      	ldr	r3, [pc, #200]	; (8006248 <vTaskPrioritySet+0x134>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d309      	bcc.n	800619c <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	e006      	b.n	800619c <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800618e:	4b2e      	ldr	r3, [pc, #184]	; (8006248 <vTaskPrioritySet+0x134>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	429a      	cmp	r2, r3
 8006196:	d101      	bne.n	800619c <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d102      	bne.n	80061b4 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	db04      	blt.n	80061cc <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	6959      	ldr	r1, [r3, #20]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4a1c      	ldr	r2, [pc, #112]	; (800624c <vTaskPrioritySet+0x138>)
 80061dc:	4413      	add	r3, r2
 80061de:	4299      	cmp	r1, r3
 80061e0:	d101      	bne.n	80061e6 <vTaskPrioritySet+0xd2>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <vTaskPrioritySet+0xd4>
 80061e6:	2300      	movs	r3, #0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01c      	beq.n	8006226 <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe fc9d 	bl	8004b30 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fa:	4b15      	ldr	r3, [pc, #84]	; (8006250 <vTaskPrioritySet+0x13c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d903      	bls.n	800620a <vTaskPrioritySet+0xf6>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	4a12      	ldr	r2, [pc, #72]	; (8006250 <vTaskPrioritySet+0x13c>)
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4a0d      	ldr	r2, [pc, #52]	; (800624c <vTaskPrioritySet+0x138>)
 8006218:	441a      	add	r2, r3
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	3304      	adds	r3, #4
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f7fe fc2a 	bl	8004a7a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d007      	beq.n	800623c <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <vTaskPrioritySet+0x140>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800623c:	f001 fb76 	bl	800792c <vPortExitCritical>
	}
 8006240:	bf00      	nop
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20001024 	.word	0x20001024
 800624c:	20001028 	.word	0x20001028
 8006250:	20001500 	.word	0x20001500
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006266:	463a      	mov	r2, r7
 8006268:	1d39      	adds	r1, r7, #4
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe f9b8 	bl	80045e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	9202      	str	r2, [sp, #8]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	2300      	movs	r3, #0
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2300      	movs	r3, #0
 8006284:	460a      	mov	r2, r1
 8006286:	4921      	ldr	r1, [pc, #132]	; (800630c <vTaskStartScheduler+0xb4>)
 8006288:	4821      	ldr	r0, [pc, #132]	; (8006310 <vTaskStartScheduler+0xb8>)
 800628a:	f7ff fd77 	bl	8005d7c <xTaskCreateStatic>
 800628e:	4603      	mov	r3, r0
 8006290:	4a20      	ldr	r2, [pc, #128]	; (8006314 <vTaskStartScheduler+0xbc>)
 8006292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006294:	4b1f      	ldr	r3, [pc, #124]	; (8006314 <vTaskStartScheduler+0xbc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800629c:	2301      	movs	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e001      	b.n	80062a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d102      	bne.n	80062b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062ac:	f000 feee 	bl	800708c <xTimerCreateTimerTask>
 80062b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d116      	bne.n	80062e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	613b      	str	r3, [r7, #16]
}
 80062ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <vTaskStartScheduler+0xc0>)
 80062ce:	f04f 32ff 	mov.w	r2, #4294967295
 80062d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062d4:	4b11      	ldr	r3, [pc, #68]	; (800631c <vTaskStartScheduler+0xc4>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062da:	4b11      	ldr	r3, [pc, #68]	; (8006320 <vTaskStartScheduler+0xc8>)
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062e0:	f001 fa82 	bl	80077e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062e4:	e00e      	b.n	8006304 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d10a      	bne.n	8006304 <vTaskStartScheduler+0xac>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60fb      	str	r3, [r7, #12]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <vTaskStartScheduler+0xaa>
}
 8006304:	bf00      	nop
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	0800a03c 	.word	0x0800a03c
 8006310:	08006abd 	.word	0x08006abd
 8006314:	2000151c 	.word	0x2000151c
 8006318:	20001518 	.word	0x20001518
 800631c:	20001504 	.word	0x20001504
 8006320:	200014fc 	.word	0x200014fc

08006324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006328:	4b04      	ldr	r3, [pc, #16]	; (800633c <vTaskSuspendAll+0x18>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3301      	adds	r3, #1
 800632e:	4a03      	ldr	r2, [pc, #12]	; (800633c <vTaskSuspendAll+0x18>)
 8006330:	6013      	str	r3, [r2, #0]
}
 8006332:	bf00      	nop
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20001520 	.word	0x20001520

08006340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800634a:	2300      	movs	r3, #0
 800634c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800634e:	4b42      	ldr	r3, [pc, #264]	; (8006458 <xTaskResumeAll+0x118>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <xTaskResumeAll+0x2c>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	603b      	str	r3, [r7, #0]
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800636c:	f001 faae 	bl	80078cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006370:	4b39      	ldr	r3, [pc, #228]	; (8006458 <xTaskResumeAll+0x118>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3b01      	subs	r3, #1
 8006376:	4a38      	ldr	r2, [pc, #224]	; (8006458 <xTaskResumeAll+0x118>)
 8006378:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800637a:	4b37      	ldr	r3, [pc, #220]	; (8006458 <xTaskResumeAll+0x118>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d162      	bne.n	8006448 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006382:	4b36      	ldr	r3, [pc, #216]	; (800645c <xTaskResumeAll+0x11c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d05e      	beq.n	8006448 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800638a:	e02f      	b.n	80063ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800638c:	4b34      	ldr	r3, [pc, #208]	; (8006460 <xTaskResumeAll+0x120>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3318      	adds	r3, #24
 8006398:	4618      	mov	r0, r3
 800639a:	f7fe fbc9 	bl	8004b30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3304      	adds	r3, #4
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fbc4 	bl	8004b30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	4b2d      	ldr	r3, [pc, #180]	; (8006464 <xTaskResumeAll+0x124>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d903      	bls.n	80063bc <xTaskResumeAll+0x7c>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <xTaskResumeAll+0x124>)
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4a27      	ldr	r2, [pc, #156]	; (8006468 <xTaskResumeAll+0x128>)
 80063ca:	441a      	add	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7fe fb51 	bl	8004a7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063dc:	4b23      	ldr	r3, [pc, #140]	; (800646c <xTaskResumeAll+0x12c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80063e6:	4b22      	ldr	r3, [pc, #136]	; (8006470 <xTaskResumeAll+0x130>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ec:	4b1c      	ldr	r3, [pc, #112]	; (8006460 <xTaskResumeAll+0x120>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1cb      	bne.n	800638c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063fa:	f000 fc15 	bl	8006c28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063fe:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <xTaskResumeAll+0x134>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d010      	beq.n	800642c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800640a:	f000 f857 	bl	80064bc <xTaskIncrementTick>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006414:	4b16      	ldr	r3, [pc, #88]	; (8006470 <xTaskResumeAll+0x130>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3b01      	subs	r3, #1
 800641e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1f1      	bne.n	800640a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <xTaskResumeAll+0x134>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800642c:	4b10      	ldr	r3, [pc, #64]	; (8006470 <xTaskResumeAll+0x130>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006434:	2301      	movs	r3, #1
 8006436:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006438:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <xTaskResumeAll+0x138>)
 800643a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006448:	f001 fa70 	bl	800792c <vPortExitCritical>

	return xAlreadyYielded;
 800644c:	68bb      	ldr	r3, [r7, #8]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20001520 	.word	0x20001520
 800645c:	200014f8 	.word	0x200014f8
 8006460:	200014b8 	.word	0x200014b8
 8006464:	20001500 	.word	0x20001500
 8006468:	20001028 	.word	0x20001028
 800646c:	20001024 	.word	0x20001024
 8006470:	2000150c 	.word	0x2000150c
 8006474:	20001508 	.word	0x20001508
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006482:	4b04      	ldr	r3, [pc, #16]	; (8006494 <xTaskGetTickCount+0x18>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006488:	687b      	ldr	r3, [r7, #4]
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr
 8006494:	200014fc 	.word	0x200014fc

08006498 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800649e:	f001 fad7 	bl	8007a50 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80064a6:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <xTaskGetTickCountFromISR+0x20>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064ac:	683b      	ldr	r3, [r7, #0]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	200014fc 	.word	0x200014fc

080064bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c6:	4b51      	ldr	r3, [pc, #324]	; (800660c <xTaskIncrementTick+0x150>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f040 808e 	bne.w	80065ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064d0:	4b4f      	ldr	r3, [pc, #316]	; (8006610 <xTaskIncrementTick+0x154>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064d8:	4a4d      	ldr	r2, [pc, #308]	; (8006610 <xTaskIncrementTick+0x154>)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d120      	bne.n	8006526 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064e4:	4b4b      	ldr	r3, [pc, #300]	; (8006614 <xTaskIncrementTick+0x158>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <xTaskIncrementTick+0x48>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	603b      	str	r3, [r7, #0]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <xTaskIncrementTick+0x46>
 8006504:	4b43      	ldr	r3, [pc, #268]	; (8006614 <xTaskIncrementTick+0x158>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	4b43      	ldr	r3, [pc, #268]	; (8006618 <xTaskIncrementTick+0x15c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a41      	ldr	r2, [pc, #260]	; (8006614 <xTaskIncrementTick+0x158>)
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	4a41      	ldr	r2, [pc, #260]	; (8006618 <xTaskIncrementTick+0x15c>)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	4b40      	ldr	r3, [pc, #256]	; (800661c <xTaskIncrementTick+0x160>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	4a3f      	ldr	r2, [pc, #252]	; (800661c <xTaskIncrementTick+0x160>)
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	f000 fb81 	bl	8006c28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006526:	4b3e      	ldr	r3, [pc, #248]	; (8006620 <xTaskIncrementTick+0x164>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	429a      	cmp	r2, r3
 800652e:	d34e      	bcc.n	80065ce <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006530:	4b38      	ldr	r3, [pc, #224]	; (8006614 <xTaskIncrementTick+0x158>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <xTaskIncrementTick+0x82>
 800653a:	2301      	movs	r3, #1
 800653c:	e000      	b.n	8006540 <xTaskIncrementTick+0x84>
 800653e:	2300      	movs	r3, #0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006544:	4b36      	ldr	r3, [pc, #216]	; (8006620 <xTaskIncrementTick+0x164>)
 8006546:	f04f 32ff 	mov.w	r2, #4294967295
 800654a:	601a      	str	r2, [r3, #0]
					break;
 800654c:	e03f      	b.n	80065ce <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <xTaskIncrementTick+0x158>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	429a      	cmp	r2, r3
 8006564:	d203      	bcs.n	800656e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006566:	4a2e      	ldr	r2, [pc, #184]	; (8006620 <xTaskIncrementTick+0x164>)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6013      	str	r3, [r2, #0]
						break;
 800656c:	e02f      	b.n	80065ce <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	3304      	adds	r3, #4
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fadc 	bl	8004b30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	3318      	adds	r3, #24
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe fad3 	bl	8004b30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	4b25      	ldr	r3, [pc, #148]	; (8006624 <xTaskIncrementTick+0x168>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d903      	bls.n	800659e <xTaskIncrementTick+0xe2>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	4a22      	ldr	r2, [pc, #136]	; (8006624 <xTaskIncrementTick+0x168>)
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4a1f      	ldr	r2, [pc, #124]	; (8006628 <xTaskIncrementTick+0x16c>)
 80065ac:	441a      	add	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4619      	mov	r1, r3
 80065b4:	4610      	mov	r0, r2
 80065b6:	f7fe fa60 	bl	8004a7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065be:	4b1b      	ldr	r3, [pc, #108]	; (800662c <xTaskIncrementTick+0x170>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d3b3      	bcc.n	8006530 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065cc:	e7b0      	b.n	8006530 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065ce:	4b17      	ldr	r3, [pc, #92]	; (800662c <xTaskIncrementTick+0x170>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d4:	4914      	ldr	r1, [pc, #80]	; (8006628 <xTaskIncrementTick+0x16c>)
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	440b      	add	r3, r1
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d907      	bls.n	80065f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80065e6:	2301      	movs	r3, #1
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	e004      	b.n	80065f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80065ec:	4b10      	ldr	r3, [pc, #64]	; (8006630 <xTaskIncrementTick+0x174>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	4a0f      	ldr	r2, [pc, #60]	; (8006630 <xTaskIncrementTick+0x174>)
 80065f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <xTaskIncrementTick+0x178>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80065fe:	2301      	movs	r3, #1
 8006600:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006602:	697b      	ldr	r3, [r7, #20]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20001520 	.word	0x20001520
 8006610:	200014fc 	.word	0x200014fc
 8006614:	200014b0 	.word	0x200014b0
 8006618:	200014b4 	.word	0x200014b4
 800661c:	20001510 	.word	0x20001510
 8006620:	20001518 	.word	0x20001518
 8006624:	20001500 	.word	0x20001500
 8006628:	20001028 	.word	0x20001028
 800662c:	20001024 	.word	0x20001024
 8006630:	20001508 	.word	0x20001508
 8006634:	2000150c 	.word	0x2000150c

08006638 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800663e:	4b2f      	ldr	r3, [pc, #188]	; (80066fc <vTaskSwitchContext+0xc4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006646:	4b2e      	ldr	r3, [pc, #184]	; (8006700 <vTaskSwitchContext+0xc8>)
 8006648:	2201      	movs	r2, #1
 800664a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800664c:	e052      	b.n	80066f4 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 800664e:	4b2c      	ldr	r3, [pc, #176]	; (8006700 <vTaskSwitchContext+0xc8>)
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006654:	4b2b      	ldr	r3, [pc, #172]	; (8006704 <vTaskSwitchContext+0xcc>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b2a      	ldr	r3, [pc, #168]	; (8006704 <vTaskSwitchContext+0xcc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	429a      	cmp	r2, r3
 8006662:	d808      	bhi.n	8006676 <vTaskSwitchContext+0x3e>
 8006664:	4b27      	ldr	r3, [pc, #156]	; (8006704 <vTaskSwitchContext+0xcc>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	4b26      	ldr	r3, [pc, #152]	; (8006704 <vTaskSwitchContext+0xcc>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3334      	adds	r3, #52	; 0x34
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7f9 fd6d 	bl	8000150 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006676:	4b24      	ldr	r3, [pc, #144]	; (8006708 <vTaskSwitchContext+0xd0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	e010      	b.n	80066a0 <vTaskSwitchContext+0x68>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <vTaskSwitchContext+0x62>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	607b      	str	r3, [r7, #4]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <vTaskSwitchContext+0x60>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3b01      	subs	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	491a      	ldr	r1, [pc, #104]	; (800670c <vTaskSwitchContext+0xd4>)
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0e4      	beq.n	800667e <vTaskSwitchContext+0x46>
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4a13      	ldr	r2, [pc, #76]	; (800670c <vTaskSwitchContext+0xd4>)
 80066c0:	4413      	add	r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3308      	adds	r3, #8
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d104      	bne.n	80066e4 <vTaskSwitchContext+0xac>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	605a      	str	r2, [r3, #4]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	4a06      	ldr	r2, [pc, #24]	; (8006704 <vTaskSwitchContext+0xcc>)
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	4a06      	ldr	r2, [pc, #24]	; (8006708 <vTaskSwitchContext+0xd0>)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6013      	str	r3, [r2, #0]
}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20001520 	.word	0x20001520
 8006700:	2000150c 	.word	0x2000150c
 8006704:	20001024 	.word	0x20001024
 8006708:	20001500 	.word	0x20001500
 800670c:	20001028 	.word	0x20001028

08006710 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	60fb      	str	r3, [r7, #12]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006736:	4b07      	ldr	r3, [pc, #28]	; (8006754 <vTaskPlaceOnEventList+0x44>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3318      	adds	r3, #24
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fe f9be 	bl	8004ac0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006744:	2101      	movs	r1, #1
 8006746:	6838      	ldr	r0, [r7, #0]
 8006748:	f000 fc4c 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
}
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20001024 	.word	0x20001024

08006758 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	617b      	str	r3, [r7, #20]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	613b      	str	r3, [r7, #16]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800679e:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <vTaskPlaceOnUnorderedEventList+0x74>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80067a8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067aa:	4b08      	ldr	r3, [pc, #32]	; (80067cc <vTaskPlaceOnUnorderedEventList+0x74>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3318      	adds	r3, #24
 80067b0:	4619      	mov	r1, r3
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7fe f961 	bl	8004a7a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067b8:	2101      	movs	r1, #1
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fc12 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
}
 80067c0:	bf00      	nop
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20001520 	.word	0x20001520
 80067cc:	20001024 	.word	0x20001024

080067d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	617b      	str	r3, [r7, #20]
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067f8:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <vTaskPlaceOnEventListRestricted+0x54>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3318      	adds	r3, #24
 80067fe:	4619      	mov	r1, r3
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7fe f93a 	bl	8004a7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800680c:	f04f 33ff 	mov.w	r3, #4294967295
 8006810:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	68b8      	ldr	r0, [r7, #8]
 8006816:	f000 fbe5 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
	}
 800681a:	bf00      	nop
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20001024 	.word	0x20001024

08006828 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10a      	bne.n	8006854 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	60fb      	str	r3, [r7, #12]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	3318      	adds	r3, #24
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe f969 	bl	8004b30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800685e:	4b1e      	ldr	r3, [pc, #120]	; (80068d8 <xTaskRemoveFromEventList+0xb0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d11d      	bne.n	80068a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	3304      	adds	r3, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe f960 	bl	8004b30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	4b19      	ldr	r3, [pc, #100]	; (80068dc <xTaskRemoveFromEventList+0xb4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d903      	bls.n	8006884 <xTaskRemoveFromEventList+0x5c>
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	4a16      	ldr	r2, [pc, #88]	; (80068dc <xTaskRemoveFromEventList+0xb4>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4a13      	ldr	r2, [pc, #76]	; (80068e0 <xTaskRemoveFromEventList+0xb8>)
 8006892:	441a      	add	r2, r3
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	3304      	adds	r3, #4
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f7fe f8ed 	bl	8004a7a <vListInsertEnd>
 80068a0:	e005      	b.n	80068ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	3318      	adds	r3, #24
 80068a6:	4619      	mov	r1, r3
 80068a8:	480e      	ldr	r0, [pc, #56]	; (80068e4 <xTaskRemoveFromEventList+0xbc>)
 80068aa:	f7fe f8e6 	bl	8004a7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b2:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <xTaskRemoveFromEventList+0xc0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d905      	bls.n	80068c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <xTaskRemoveFromEventList+0xc4>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e001      	b.n	80068cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80068cc:	697b      	ldr	r3, [r7, #20]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20001520 	.word	0x20001520
 80068dc:	20001500 	.word	0x20001500
 80068e0:	20001028 	.word	0x20001028
 80068e4:	200014b8 	.word	0x200014b8
 80068e8:	20001024 	.word	0x20001024
 80068ec:	2000150c 	.word	0x2000150c

080068f0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80068fa:	4b29      	ldr	r3, [pc, #164]	; (80069a0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	613b      	str	r3, [r7, #16]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	60fb      	str	r3, [r7, #12]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7fe f8f3 	bl	8004b30 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	3304      	adds	r3, #4
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe f8ee 	bl	8004b30 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006958:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d903      	bls.n	8006968 <vTaskRemoveFromUnorderedEventList+0x78>
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	4a0f      	ldr	r2, [pc, #60]	; (80069a4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006976:	441a      	add	r2, r3
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f7fe f87b 	bl	8004a7a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006988:	4b08      	ldr	r3, [pc, #32]	; (80069ac <vTaskRemoveFromUnorderedEventList+0xbc>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	429a      	cmp	r2, r3
 8006990:	d902      	bls.n	8006998 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006992:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]
	}
}
 8006998:	bf00      	nop
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20001520 	.word	0x20001520
 80069a4:	20001500 	.word	0x20001500
 80069a8:	20001028 	.word	0x20001028
 80069ac:	20001024 	.word	0x20001024
 80069b0:	2000150c 	.word	0x2000150c

080069b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <vTaskInternalSetTimeOutState+0x24>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <vTaskInternalSetTimeOutState+0x28>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	605a      	str	r2, [r3, #4]
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	20001510 	.word	0x20001510
 80069dc:	200014fc 	.word	0x200014fc

080069e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	613b      	str	r3, [r7, #16]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	60fb      	str	r3, [r7, #12]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a22:	f000 ff53 	bl	80078cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a26:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <xTaskCheckForTimeOut+0xbc>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3e:	d102      	bne.n	8006a46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	e023      	b.n	8006a8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <xTaskCheckForTimeOut+0xc0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d007      	beq.n	8006a62 <xTaskCheckForTimeOut+0x82>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d302      	bcc.n	8006a62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	61fb      	str	r3, [r7, #28]
 8006a60:	e015      	b.n	8006a8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d20b      	bcs.n	8006a84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	1ad2      	subs	r2, r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff ff9b 	bl	80069b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	e004      	b.n	8006a8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a8e:	f000 ff4d 	bl	800792c <vPortExitCritical>

	return xReturn;
 8006a92:	69fb      	ldr	r3, [r7, #28]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3720      	adds	r7, #32
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	200014fc 	.word	0x200014fc
 8006aa0:	20001510 	.word	0x20001510

08006aa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006aa8:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <vTaskMissedYield+0x14>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
}
 8006aae:	bf00      	nop
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	2000150c 	.word	0x2000150c

08006abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ac4:	f000 f852 	bl	8006b6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ac8:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <prvIdleTask+0x28>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d9f9      	bls.n	8006ac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <prvIdleTask+0x2c>)
 8006ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ae0:	e7f0      	b.n	8006ac4 <prvIdleTask+0x8>
 8006ae2:	bf00      	nop
 8006ae4:	20001028 	.word	0x20001028
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006af2:	2300      	movs	r3, #0
 8006af4:	607b      	str	r3, [r7, #4]
 8006af6:	e00c      	b.n	8006b12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4a12      	ldr	r2, [pc, #72]	; (8006b4c <prvInitialiseTaskLists+0x60>)
 8006b04:	4413      	add	r3, r2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fd ff8c 	bl	8004a24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	607b      	str	r3, [r7, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b37      	cmp	r3, #55	; 0x37
 8006b16:	d9ef      	bls.n	8006af8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b18:	480d      	ldr	r0, [pc, #52]	; (8006b50 <prvInitialiseTaskLists+0x64>)
 8006b1a:	f7fd ff83 	bl	8004a24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b1e:	480d      	ldr	r0, [pc, #52]	; (8006b54 <prvInitialiseTaskLists+0x68>)
 8006b20:	f7fd ff80 	bl	8004a24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b24:	480c      	ldr	r0, [pc, #48]	; (8006b58 <prvInitialiseTaskLists+0x6c>)
 8006b26:	f7fd ff7d 	bl	8004a24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b2a:	480c      	ldr	r0, [pc, #48]	; (8006b5c <prvInitialiseTaskLists+0x70>)
 8006b2c:	f7fd ff7a 	bl	8004a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b30:	480b      	ldr	r0, [pc, #44]	; (8006b60 <prvInitialiseTaskLists+0x74>)
 8006b32:	f7fd ff77 	bl	8004a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b36:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <prvInitialiseTaskLists+0x78>)
 8006b38:	4a05      	ldr	r2, [pc, #20]	; (8006b50 <prvInitialiseTaskLists+0x64>)
 8006b3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <prvInitialiseTaskLists+0x7c>)
 8006b3e:	4a05      	ldr	r2, [pc, #20]	; (8006b54 <prvInitialiseTaskLists+0x68>)
 8006b40:	601a      	str	r2, [r3, #0]
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20001028 	.word	0x20001028
 8006b50:	20001488 	.word	0x20001488
 8006b54:	2000149c 	.word	0x2000149c
 8006b58:	200014b8 	.word	0x200014b8
 8006b5c:	200014cc 	.word	0x200014cc
 8006b60:	200014e4 	.word	0x200014e4
 8006b64:	200014b0 	.word	0x200014b0
 8006b68:	200014b4 	.word	0x200014b4

08006b6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b72:	e019      	b.n	8006ba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b74:	f000 feaa 	bl	80078cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b78:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <prvCheckTasksWaitingTermination+0x50>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fd ffd3 	bl	8004b30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b8a:	4b0d      	ldr	r3, [pc, #52]	; (8006bc0 <prvCheckTasksWaitingTermination+0x54>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	4a0b      	ldr	r2, [pc, #44]	; (8006bc0 <prvCheckTasksWaitingTermination+0x54>)
 8006b92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b94:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <prvCheckTasksWaitingTermination+0x58>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	4a0a      	ldr	r2, [pc, #40]	; (8006bc4 <prvCheckTasksWaitingTermination+0x58>)
 8006b9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b9e:	f000 fec5 	bl	800792c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f810 	bl	8006bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <prvCheckTasksWaitingTermination+0x58>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e1      	bne.n	8006b74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200014cc 	.word	0x200014cc
 8006bc0:	200014f8 	.word	0x200014f8
 8006bc4:	200014e0 	.word	0x200014e0

08006bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d108      	bne.n	8006bec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	4618      	mov	r0, r3
 8006be0:	f001 f838 	bl	8007c54 <vPortFree>
				vPortFree( pxTCB );
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 f835 	bl	8007c54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bea:	e018      	b.n	8006c1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d103      	bne.n	8006bfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 f82c 	bl	8007c54 <vPortFree>
	}
 8006bfc:	e00f      	b.n	8006c1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d00a      	beq.n	8006c1e <prvDeleteTCB+0x56>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	60fb      	str	r3, [r7, #12]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <prvDeleteTCB+0x54>
	}
 8006c1e:	bf00      	nop
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c2e:	4b0e      	ldr	r3, [pc, #56]	; (8006c68 <prvResetNextTaskUnblockTime+0x40>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <prvResetNextTaskUnblockTime+0x14>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <prvResetNextTaskUnblockTime+0x16>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c42:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <prvResetNextTaskUnblockTime+0x44>)
 8006c44:	f04f 32ff 	mov.w	r2, #4294967295
 8006c48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c4a:	e008      	b.n	8006c5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <prvResetNextTaskUnblockTime+0x40>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	4a04      	ldr	r2, [pc, #16]	; (8006c6c <prvResetNextTaskUnblockTime+0x44>)
 8006c5c:	6013      	str	r3, [r2, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr
 8006c68:	200014b0 	.word	0x200014b0
 8006c6c:	20001518 	.word	0x20001518

08006c70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006c76:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <xTaskGetCurrentTaskHandle+0x18>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006c7c:	687b      	ldr	r3, [r7, #4]
	}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr
 8006c88:	20001024 	.word	0x20001024

08006c8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c92:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <xTaskGetSchedulerState+0x34>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d102      	bne.n	8006ca0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	e008      	b.n	8006cb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ca0:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <xTaskGetSchedulerState+0x38>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	607b      	str	r3, [r7, #4]
 8006cac:	e001      	b.n	8006cb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cb2:	687b      	ldr	r3, [r7, #4]
	}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	20001504 	.word	0x20001504
 8006cc4:	20001520 	.word	0x20001520

08006cc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d056      	beq.n	8006d8c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce2:	4b2d      	ldr	r3, [pc, #180]	; (8006d98 <xTaskPriorityInherit+0xd0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d246      	bcs.n	8006d7a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	db06      	blt.n	8006d02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf4:	4b28      	ldr	r3, [pc, #160]	; (8006d98 <xTaskPriorityInherit+0xd0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	6959      	ldr	r1, [r3, #20]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4a22      	ldr	r2, [pc, #136]	; (8006d9c <xTaskPriorityInherit+0xd4>)
 8006d14:	4413      	add	r3, r2
 8006d16:	4299      	cmp	r1, r3
 8006d18:	d101      	bne.n	8006d1e <xTaskPriorityInherit+0x56>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <xTaskPriorityInherit+0x58>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d022      	beq.n	8006d6a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fd ff01 	bl	8004b30 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d2e:	4b1a      	ldr	r3, [pc, #104]	; (8006d98 <xTaskPriorityInherit+0xd0>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3c:	4b18      	ldr	r3, [pc, #96]	; (8006da0 <xTaskPriorityInherit+0xd8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d903      	bls.n	8006d4c <xTaskPriorityInherit+0x84>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	4a15      	ldr	r2, [pc, #84]	; (8006da0 <xTaskPriorityInherit+0xd8>)
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <xTaskPriorityInherit+0xd4>)
 8006d5a:	441a      	add	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f7fd fe89 	bl	8004a7a <vListInsertEnd>
 8006d68:	e004      	b.n	8006d74 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <xTaskPriorityInherit+0xd0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d74:	2301      	movs	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e008      	b.n	8006d8c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d7e:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <xTaskPriorityInherit+0xd0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d201      	bcs.n	8006d8c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
	}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20001024 	.word	0x20001024
 8006d9c:	20001028 	.word	0x20001028
 8006da0:	20001500 	.word	0x20001500

08006da4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d056      	beq.n	8006e68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dba:	4b2e      	ldr	r3, [pc, #184]	; (8006e74 <xTaskPriorityDisinherit+0xd0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d00a      	beq.n	8006dda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	60fb      	str	r3, [r7, #12]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	60bb      	str	r3, [r7, #8]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfc:	1e5a      	subs	r2, r3, #1
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d02c      	beq.n	8006e68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d128      	bne.n	8006e68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fd fe88 	bl	8004b30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e38:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <xTaskPriorityDisinherit+0xd4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d903      	bls.n	8006e48 <xTaskPriorityDisinherit+0xa4>
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <xTaskPriorityDisinherit+0xd4>)
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4a09      	ldr	r2, [pc, #36]	; (8006e7c <xTaskPriorityDisinherit+0xd8>)
 8006e56:	441a      	add	r2, r3
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	f7fd fe0b 	bl	8004a7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e64:	2301      	movs	r3, #1
 8006e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e68:	697b      	ldr	r3, [r7, #20]
	}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20001024 	.word	0x20001024
 8006e78:	20001500 	.word	0x20001500
 8006e7c:	20001028 	.word	0x20001028

08006e80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d06f      	beq.n	8006f78 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d902      	bls.n	8006ec6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	e002      	b.n	8006ecc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d050      	beq.n	8006f78 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d14b      	bne.n	8006f78 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ee0:	4b27      	ldr	r3, [pc, #156]	; (8006f80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d10a      	bne.n	8006f00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	60bb      	str	r3, [r7, #8]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	db04      	blt.n	8006f1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	6959      	ldr	r1, [r3, #20]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4a15      	ldr	r2, [pc, #84]	; (8006f84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006f2e:	4413      	add	r3, r2
 8006f30:	4299      	cmp	r1, r3
 8006f32:	d101      	bne.n	8006f38 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e000      	b.n	8006f3a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01c      	beq.n	8006f78 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fd fdf4 	bl	8004b30 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4c:	4b0e      	ldr	r3, [pc, #56]	; (8006f88 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d903      	bls.n	8006f5c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	4a0b      	ldr	r2, [pc, #44]	; (8006f88 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4a06      	ldr	r2, [pc, #24]	; (8006f84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006f6a:	441a      	add	r2, r3
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f7fd fd81 	bl	8004a7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f78:	bf00      	nop
 8006f7a:	3720      	adds	r7, #32
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20001024 	.word	0x20001024
 8006f84:	20001028 	.word	0x20001028
 8006f88:	20001500 	.word	0x20001500

08006f8c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006f92:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <uxTaskResetEventItemValue+0x2c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <uxTaskResetEventItemValue+0x2c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <uxTaskResetEventItemValue+0x2c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006fa8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006faa:	687b      	ldr	r3, [r7, #4]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bc80      	pop	{r7}
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20001024 	.word	0x20001024

08006fbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fce:	3201      	adds	r2, #1
 8006fd0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006fd2:	4b03      	ldr	r3, [pc, #12]	; (8006fe0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
	}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20001024 	.word	0x20001024

08006fe4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fee:	4b21      	ldr	r3, [pc, #132]	; (8007074 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ff4:	4b20      	ldr	r3, [pc, #128]	; (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fd fd98 	bl	8004b30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007006:	d10a      	bne.n	800701e <prvAddCurrentTaskToDelayedList+0x3a>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800700e:	4b1a      	ldr	r3, [pc, #104]	; (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4819      	ldr	r0, [pc, #100]	; (800707c <prvAddCurrentTaskToDelayedList+0x98>)
 8007018:	f7fd fd2f 	bl	8004a7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800701c:	e026      	b.n	800706c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4413      	add	r3, r2
 8007024:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007026:	4b14      	ldr	r3, [pc, #80]	; (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	429a      	cmp	r2, r3
 8007034:	d209      	bcs.n	800704a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007036:	4b12      	ldr	r3, [pc, #72]	; (8007080 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3304      	adds	r3, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f7fd fd3c 	bl	8004ac0 <vListInsert>
}
 8007048:	e010      	b.n	800706c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800704a:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <prvAddCurrentTaskToDelayedList+0xa0>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <prvAddCurrentTaskToDelayedList+0x94>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3304      	adds	r3, #4
 8007054:	4619      	mov	r1, r3
 8007056:	4610      	mov	r0, r2
 8007058:	f7fd fd32 	bl	8004ac0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800705c:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <prvAddCurrentTaskToDelayedList+0xa4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	429a      	cmp	r2, r3
 8007064:	d202      	bcs.n	800706c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007066:	4a08      	ldr	r2, [pc, #32]	; (8007088 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6013      	str	r3, [r2, #0]
}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	200014fc 	.word	0x200014fc
 8007078:	20001024 	.word	0x20001024
 800707c:	200014e4 	.word	0x200014e4
 8007080:	200014b4 	.word	0x200014b4
 8007084:	200014b0 	.word	0x200014b0
 8007088:	20001518 	.word	0x20001518

0800708c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007096:	f000 facb 	bl	8007630 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800709a:	4b1c      	ldr	r3, [pc, #112]	; (800710c <xTimerCreateTimerTask+0x80>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d021      	beq.n	80070e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070aa:	1d3a      	adds	r2, r7, #4
 80070ac:	f107 0108 	add.w	r1, r7, #8
 80070b0:	f107 030c 	add.w	r3, r7, #12
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fd faad 	bl	8004614 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	9202      	str	r2, [sp, #8]
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	2302      	movs	r3, #2
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	460a      	mov	r2, r1
 80070cc:	4910      	ldr	r1, [pc, #64]	; (8007110 <xTimerCreateTimerTask+0x84>)
 80070ce:	4811      	ldr	r0, [pc, #68]	; (8007114 <xTimerCreateTimerTask+0x88>)
 80070d0:	f7fe fe54 	bl	8005d7c <xTaskCreateStatic>
 80070d4:	4603      	mov	r3, r0
 80070d6:	4a10      	ldr	r2, [pc, #64]	; (8007118 <xTimerCreateTimerTask+0x8c>)
 80070d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070da:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <xTimerCreateTimerTask+0x8c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070e2:	2301      	movs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	613b      	str	r3, [r7, #16]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007102:	697b      	ldr	r3, [r7, #20]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20001554 	.word	0x20001554
 8007110:	0800a044 	.word	0x0800a044
 8007114:	08007239 	.word	0x08007239
 8007118:	20001558 	.word	0x20001558

0800711c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	; 0x28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800712a:	2300      	movs	r3, #0
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10a      	bne.n	800714a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	623b      	str	r3, [r7, #32]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800714a:	4b1a      	ldr	r3, [pc, #104]	; (80071b4 <xTimerGenericCommand+0x98>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d02a      	beq.n	80071a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b05      	cmp	r3, #5
 8007162:	dc18      	bgt.n	8007196 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007164:	f7ff fd92 	bl	8006c8c <xTaskGetSchedulerState>
 8007168:	4603      	mov	r3, r0
 800716a:	2b02      	cmp	r3, #2
 800716c:	d109      	bne.n	8007182 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800716e:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <xTimerGenericCommand+0x98>)
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f107 0110 	add.w	r1, r7, #16
 8007176:	2300      	movs	r3, #0
 8007178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800717a:	f7fd ff65 	bl	8005048 <xQueueGenericSend>
 800717e:	6278      	str	r0, [r7, #36]	; 0x24
 8007180:	e012      	b.n	80071a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007182:	4b0c      	ldr	r3, [pc, #48]	; (80071b4 <xTimerGenericCommand+0x98>)
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	f107 0110 	add.w	r1, r7, #16
 800718a:	2300      	movs	r3, #0
 800718c:	2200      	movs	r2, #0
 800718e:	f7fd ff5b 	bl	8005048 <xQueueGenericSend>
 8007192:	6278      	str	r0, [r7, #36]	; 0x24
 8007194:	e008      	b.n	80071a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007196:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <xTimerGenericCommand+0x98>)
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	f107 0110 	add.w	r1, r7, #16
 800719e:	2300      	movs	r3, #0
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	f7fe f84f 	bl	8005244 <xQueueGenericSendFromISR>
 80071a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3728      	adds	r7, #40	; 0x28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20001554 	.word	0x20001554

080071b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af02      	add	r7, sp, #8
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071c2:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <prvProcessExpiredTimer+0x7c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fd fcad 	bl	8004b30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d122      	bne.n	8007224 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	18d1      	adds	r1, r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	6978      	ldr	r0, [r7, #20]
 80071ec:	f000 f8c8 	bl	8007380 <prvInsertTimerInActiveList>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d016      	beq.n	8007224 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071f6:	2300      	movs	r3, #0
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	2300      	movs	r3, #0
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	2100      	movs	r1, #0
 8007200:	6978      	ldr	r0, [r7, #20]
 8007202:	f7ff ff8b 	bl	800711c <xTimerGenericCommand>
 8007206:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60fb      	str	r3, [r7, #12]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	6978      	ldr	r0, [r7, #20]
 800722a:	4798      	blx	r3
}
 800722c:	bf00      	nop
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	2000154c 	.word	0x2000154c

08007238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007240:	f107 0308 	add.w	r3, r7, #8
 8007244:	4618      	mov	r0, r3
 8007246:	f000 f857 	bl	80072f8 <prvGetNextExpireTime>
 800724a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4619      	mov	r1, r3
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f803 	bl	800725c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007256:	f000 f8d5 	bl	8007404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800725a:	e7f1      	b.n	8007240 <prvTimerTask+0x8>

0800725c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007266:	f7ff f85d 	bl	8006324 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800726a:	f107 0308 	add.w	r3, r7, #8
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f866 	bl	8007340 <prvSampleTimeNow>
 8007274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d130      	bne.n	80072de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <prvProcessTimerOrBlockTask+0x3c>
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	429a      	cmp	r2, r3
 8007288:	d806      	bhi.n	8007298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800728a:	f7ff f859 	bl	8006340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff ff91 	bl	80071b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007296:	e024      	b.n	80072e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d008      	beq.n	80072b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800729e:	4b13      	ldr	r3, [pc, #76]	; (80072ec <prvProcessTimerOrBlockTask+0x90>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bf0c      	ite	eq
 80072a8:	2301      	moveq	r3, #1
 80072aa:	2300      	movne	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072b0:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <prvProcessTimerOrBlockTask+0x94>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4619      	mov	r1, r3
 80072be:	f7fe fd29 	bl	8005d14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072c2:	f7ff f83d 	bl	8006340 <xTaskResumeAll>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <prvProcessTimerOrBlockTask+0x98>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	f3bf 8f6f 	isb	sy
}
 80072dc:	e001      	b.n	80072e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072de:	f7ff f82f 	bl	8006340 <xTaskResumeAll>
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20001550 	.word	0x20001550
 80072f0:	20001554 	.word	0x20001554
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007300:	4b0e      	ldr	r3, [pc, #56]	; (800733c <prvGetNextExpireTime+0x44>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	bf0c      	ite	eq
 800730a:	2301      	moveq	r3, #1
 800730c:	2300      	movne	r3, #0
 800730e:	b2db      	uxtb	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800731e:	4b07      	ldr	r3, [pc, #28]	; (800733c <prvGetNextExpireTime+0x44>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e001      	b.n	800732e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800732e:	68fb      	ldr	r3, [r7, #12]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	bc80      	pop	{r7}
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	2000154c 	.word	0x2000154c

08007340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007348:	f7ff f898 	bl	800647c <xTaskGetTickCount>
 800734c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800734e:	4b0b      	ldr	r3, [pc, #44]	; (800737c <prvSampleTimeNow+0x3c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	429a      	cmp	r2, r3
 8007356:	d205      	bcs.n	8007364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007358:	f000 f908 	bl	800756c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	e002      	b.n	800736a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800736a:	4a04      	ldr	r2, [pc, #16]	; (800737c <prvSampleTimeNow+0x3c>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007370:	68fb      	ldr	r3, [r7, #12]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	2000155c 	.word	0x2000155c

08007380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d812      	bhi.n	80073cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d302      	bcc.n	80073ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	e01b      	b.n	80073f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073ba:	4b10      	ldr	r3, [pc, #64]	; (80073fc <prvInsertTimerInActiveList+0x7c>)
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7fd fb7b 	bl	8004ac0 <vListInsert>
 80073ca:	e012      	b.n	80073f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d206      	bcs.n	80073e2 <prvInsertTimerInActiveList+0x62>
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d302      	bcc.n	80073e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073dc:	2301      	movs	r3, #1
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e007      	b.n	80073f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <prvInsertTimerInActiveList+0x80>)
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fd fb67 	bl	8004ac0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073f2:	697b      	ldr	r3, [r7, #20]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20001550 	.word	0x20001550
 8007400:	2000154c 	.word	0x2000154c

08007404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08e      	sub	sp, #56	; 0x38
 8007408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800740a:	e09d      	b.n	8007548 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	da18      	bge.n	8007444 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	3304      	adds	r3, #4
 8007416:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	61fb      	str	r3, [r7, #28]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743a:	6850      	ldr	r0, [r2, #4]
 800743c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743e:	6892      	ldr	r2, [r2, #8]
 8007440:	4611      	mov	r1, r2
 8007442:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	db7e      	blt.n	8007548 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	3304      	adds	r3, #4
 800745a:	4618      	mov	r0, r3
 800745c:	f7fd fb68 	bl	8004b30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007460:	463b      	mov	r3, r7
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff ff6c 	bl	8007340 <prvSampleTimeNow>
 8007468:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b09      	cmp	r3, #9
 800746e:	d86a      	bhi.n	8007546 <prvProcessReceivedCommands+0x142>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <prvProcessReceivedCommands+0x74>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	080074a1 	.word	0x080074a1
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a1 	.word	0x080074a1
 8007484:	08007549 	.word	0x08007549
 8007488:	080074fd 	.word	0x080074fd
 800748c:	08007535 	.word	0x08007535
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074a1 	.word	0x080074a1
 8007498:	08007549 	.word	0x08007549
 800749c:	080074fd 	.word	0x080074fd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	18d1      	adds	r1, r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ae:	f7ff ff67 	bl	8007380 <prvInsertTimerInActiveList>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d047      	beq.n	8007548 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d13f      	bne.n	8007548 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	441a      	add	r2, r3
 80074d0:	2300      	movs	r3, #0
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	2300      	movs	r3, #0
 80074d6:	2100      	movs	r1, #0
 80074d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074da:	f7ff fe1f 	bl	800711c <xTimerGenericCommand>
 80074de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d130      	bne.n	8007548 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	61bb      	str	r3, [r7, #24]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	617b      	str	r3, [r7, #20]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	699a      	ldr	r2, [r3, #24]
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	18d1      	adds	r1, r2, r3
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800752c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752e:	f7ff ff27 	bl	8007380 <prvInsertTimerInActiveList>
					break;
 8007532:	e009      	b.n	8007548 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d104      	bne.n	8007548 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800753e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007540:	f000 fb88 	bl	8007c54 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007544:	e000      	b.n	8007548 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007546:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007548:	4b07      	ldr	r3, [pc, #28]	; (8007568 <prvProcessReceivedCommands+0x164>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	1d39      	adds	r1, r7, #4
 800754e:	2200      	movs	r2, #0
 8007550:	4618      	mov	r0, r3
 8007552:	f7fd ff9d 	bl	8005490 <xQueueReceive>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	f47f af57 	bne.w	800740c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800755e:	bf00      	nop
 8007560:	bf00      	nop
 8007562:	3730      	adds	r7, #48	; 0x30
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	20001554 	.word	0x20001554

0800756c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007572:	e045      	b.n	8007600 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007574:	4b2c      	ldr	r3, [pc, #176]	; (8007628 <prvSwitchTimerLists+0xbc>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800757e:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <prvSwitchTimerLists+0xbc>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3304      	adds	r3, #4
 800758c:	4618      	mov	r0, r3
 800758e:	f7fd facf 	bl	8004b30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d12e      	bne.n	8007600 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	4413      	add	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d90e      	bls.n	80075d2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075c0:	4b19      	ldr	r3, [pc, #100]	; (8007628 <prvSwitchTimerLists+0xbc>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3304      	adds	r3, #4
 80075c8:	4619      	mov	r1, r3
 80075ca:	4610      	mov	r0, r2
 80075cc:	f7fd fa78 	bl	8004ac0 <vListInsert>
 80075d0:	e016      	b.n	8007600 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075d2:	2300      	movs	r3, #0
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	2300      	movs	r3, #0
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	2100      	movs	r1, #0
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff fd9d 	bl	800711c <xTimerGenericCommand>
 80075e2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <prvSwitchTimerLists+0x94>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	603b      	str	r3, [r7, #0]
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007600:	4b09      	ldr	r3, [pc, #36]	; (8007628 <prvSwitchTimerLists+0xbc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1b4      	bne.n	8007574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800760a:	4b07      	ldr	r3, [pc, #28]	; (8007628 <prvSwitchTimerLists+0xbc>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007610:	4b06      	ldr	r3, [pc, #24]	; (800762c <prvSwitchTimerLists+0xc0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a04      	ldr	r2, [pc, #16]	; (8007628 <prvSwitchTimerLists+0xbc>)
 8007616:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007618:	4a04      	ldr	r2, [pc, #16]	; (800762c <prvSwitchTimerLists+0xc0>)
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	6013      	str	r3, [r2, #0]
}
 800761e:	bf00      	nop
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	2000154c 	.word	0x2000154c
 800762c:	20001550 	.word	0x20001550

08007630 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007636:	f000 f949 	bl	80078cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800763a:	4b15      	ldr	r3, [pc, #84]	; (8007690 <prvCheckForValidListAndQueue+0x60>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d120      	bne.n	8007684 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007642:	4814      	ldr	r0, [pc, #80]	; (8007694 <prvCheckForValidListAndQueue+0x64>)
 8007644:	f7fd f9ee 	bl	8004a24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007648:	4813      	ldr	r0, [pc, #76]	; (8007698 <prvCheckForValidListAndQueue+0x68>)
 800764a:	f7fd f9eb 	bl	8004a24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800764e:	4b13      	ldr	r3, [pc, #76]	; (800769c <prvCheckForValidListAndQueue+0x6c>)
 8007650:	4a10      	ldr	r2, [pc, #64]	; (8007694 <prvCheckForValidListAndQueue+0x64>)
 8007652:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007654:	4b12      	ldr	r3, [pc, #72]	; (80076a0 <prvCheckForValidListAndQueue+0x70>)
 8007656:	4a10      	ldr	r2, [pc, #64]	; (8007698 <prvCheckForValidListAndQueue+0x68>)
 8007658:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800765a:	2300      	movs	r3, #0
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	4b11      	ldr	r3, [pc, #68]	; (80076a4 <prvCheckForValidListAndQueue+0x74>)
 8007660:	4a11      	ldr	r2, [pc, #68]	; (80076a8 <prvCheckForValidListAndQueue+0x78>)
 8007662:	2110      	movs	r1, #16
 8007664:	200a      	movs	r0, #10
 8007666:	f7fd faf5 	bl	8004c54 <xQueueGenericCreateStatic>
 800766a:	4603      	mov	r3, r0
 800766c:	4a08      	ldr	r2, [pc, #32]	; (8007690 <prvCheckForValidListAndQueue+0x60>)
 800766e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007670:	4b07      	ldr	r3, [pc, #28]	; (8007690 <prvCheckForValidListAndQueue+0x60>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007678:	4b05      	ldr	r3, [pc, #20]	; (8007690 <prvCheckForValidListAndQueue+0x60>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	490b      	ldr	r1, [pc, #44]	; (80076ac <prvCheckForValidListAndQueue+0x7c>)
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe faf6 	bl	8005c70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007684:	f000 f952 	bl	800792c <vPortExitCritical>
}
 8007688:	bf00      	nop
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20001554 	.word	0x20001554
 8007694:	20001524 	.word	0x20001524
 8007698:	20001538 	.word	0x20001538
 800769c:	2000154c 	.word	0x2000154c
 80076a0:	20001550 	.word	0x20001550
 80076a4:	20001600 	.word	0x20001600
 80076a8:	20001560 	.word	0x20001560
 80076ac:	0800a04c 	.word	0x0800a04c

080076b0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	; 0x28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80076be:	f06f 0301 	mvn.w	r3, #1
 80076c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <xTimerPendFunctionCallFromISR+0x3c>)
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	f107 0114 	add.w	r1, r7, #20
 80076d8:	2300      	movs	r3, #0
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	f7fd fdb2 	bl	8005244 <xQueueGenericSendFromISR>
 80076e0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3728      	adds	r7, #40	; 0x28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20001554 	.word	0x20001554

080076f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3b04      	subs	r3, #4
 8007700:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3b04      	subs	r3, #4
 800770e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f023 0201 	bic.w	r2, r3, #1
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3b04      	subs	r3, #4
 800771e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007720:	4a08      	ldr	r2, [pc, #32]	; (8007744 <pxPortInitialiseStack+0x54>)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3b14      	subs	r3, #20
 800772a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3b20      	subs	r3, #32
 8007736:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007738:	68fb      	ldr	r3, [r7, #12]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr
 8007744:	08007749 	.word	0x08007749

08007748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800774e:	2300      	movs	r3, #0
 8007750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007752:	4b12      	ldr	r3, [pc, #72]	; (800779c <prvTaskExitError+0x54>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775a:	d00a      	beq.n	8007772 <prvTaskExitError+0x2a>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	60fb      	str	r3, [r7, #12]
}
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <prvTaskExitError+0x28>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	60bb      	str	r3, [r7, #8]
}
 8007784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007786:	bf00      	nop
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0fc      	beq.n	8007788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800778e:	bf00      	nop
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	2000000c 	.word	0x2000000c

080077a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <pxCurrentTCBConst2>)
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	6808      	ldr	r0, [r1, #0]
 80077a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077aa:	f380 8809 	msr	PSP, r0
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f380 8811 	msr	BASEPRI, r0
 80077ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80077be:	4770      	bx	lr

080077c0 <pxCurrentTCBConst2>:
 80077c0:	20001024 	.word	0x20001024
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop

080077c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80077c8:	4806      	ldr	r0, [pc, #24]	; (80077e4 <prvPortStartFirstTask+0x1c>)
 80077ca:	6800      	ldr	r0, [r0, #0]
 80077cc:	6800      	ldr	r0, [r0, #0]
 80077ce:	f380 8808 	msr	MSP, r0
 80077d2:	b662      	cpsie	i
 80077d4:	b661      	cpsie	f
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	df00      	svc	0
 80077e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077e2:	bf00      	nop
 80077e4:	e000ed08 	.word	0xe000ed08

080077e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077ee:	4b32      	ldr	r3, [pc, #200]	; (80078b8 <xPortStartScheduler+0xd0>)
 80077f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	22ff      	movs	r2, #255	; 0xff
 80077fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007810:	b2da      	uxtb	r2, r3
 8007812:	4b2a      	ldr	r3, [pc, #168]	; (80078bc <xPortStartScheduler+0xd4>)
 8007814:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007816:	4b2a      	ldr	r3, [pc, #168]	; (80078c0 <xPortStartScheduler+0xd8>)
 8007818:	2207      	movs	r2, #7
 800781a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800781c:	e009      	b.n	8007832 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800781e:	4b28      	ldr	r3, [pc, #160]	; (80078c0 <xPortStartScheduler+0xd8>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3b01      	subs	r3, #1
 8007824:	4a26      	ldr	r2, [pc, #152]	; (80078c0 <xPortStartScheduler+0xd8>)
 8007826:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007828:	78fb      	ldrb	r3, [r7, #3]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	b2db      	uxtb	r3, r3
 8007830:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b80      	cmp	r3, #128	; 0x80
 800783c:	d0ef      	beq.n	800781e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800783e:	4b20      	ldr	r3, [pc, #128]	; (80078c0 <xPortStartScheduler+0xd8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f1c3 0307 	rsb	r3, r3, #7
 8007846:	2b04      	cmp	r3, #4
 8007848:	d00a      	beq.n	8007860 <xPortStartScheduler+0x78>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	60bb      	str	r3, [r7, #8]
}
 800785c:	bf00      	nop
 800785e:	e7fe      	b.n	800785e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007860:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <xPortStartScheduler+0xd8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	4a16      	ldr	r2, [pc, #88]	; (80078c0 <xPortStartScheduler+0xd8>)
 8007868:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800786a:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <xPortStartScheduler+0xd8>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007872:	4a13      	ldr	r2, [pc, #76]	; (80078c0 <xPortStartScheduler+0xd8>)
 8007874:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	b2da      	uxtb	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800787e:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <xPortStartScheduler+0xdc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a10      	ldr	r2, [pc, #64]	; (80078c4 <xPortStartScheduler+0xdc>)
 8007884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007888:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800788a:	4b0e      	ldr	r3, [pc, #56]	; (80078c4 <xPortStartScheduler+0xdc>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a0d      	ldr	r2, [pc, #52]	; (80078c4 <xPortStartScheduler+0xdc>)
 8007890:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007894:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007896:	f000 f8b9 	bl	8007a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800789a:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <xPortStartScheduler+0xe0>)
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078a0:	f7ff ff92 	bl	80077c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078a4:	f7fe fec8 	bl	8006638 <vTaskSwitchContext>
	prvTaskExitError();
 80078a8:	f7ff ff4e 	bl	8007748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	e000e400 	.word	0xe000e400
 80078bc:	20001650 	.word	0x20001650
 80078c0:	20001654 	.word	0x20001654
 80078c4:	e000ed20 	.word	0xe000ed20
 80078c8:	2000000c 	.word	0x2000000c

080078cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	607b      	str	r3, [r7, #4]
}
 80078e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078e6:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <vPortEnterCritical+0x58>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	4a0d      	ldr	r2, [pc, #52]	; (8007924 <vPortEnterCritical+0x58>)
 80078ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078f0:	4b0c      	ldr	r3, [pc, #48]	; (8007924 <vPortEnterCritical+0x58>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d10f      	bne.n	8007918 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078f8:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <vPortEnterCritical+0x5c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <vPortEnterCritical+0x4c>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	603b      	str	r3, [r7, #0]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <vPortEnterCritical+0x4a>
	}
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	2000000c 	.word	0x2000000c
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007932:	4b11      	ldr	r3, [pc, #68]	; (8007978 <vPortExitCritical+0x4c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <vPortExitCritical+0x24>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	607b      	str	r3, [r7, #4]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007950:	4b09      	ldr	r3, [pc, #36]	; (8007978 <vPortExitCritical+0x4c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3b01      	subs	r3, #1
 8007956:	4a08      	ldr	r2, [pc, #32]	; (8007978 <vPortExitCritical+0x4c>)
 8007958:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800795a:	4b07      	ldr	r3, [pc, #28]	; (8007978 <vPortExitCritical+0x4c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <vPortExitCritical+0x42>
 8007962:	2300      	movs	r3, #0
 8007964:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	f383 8811 	msr	BASEPRI, r3
}
 800796c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr
 8007978:	2000000c 	.word	0x2000000c
 800797c:	00000000 	.word	0x00000000

08007980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007980:	f3ef 8009 	mrs	r0, PSP
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	4b0d      	ldr	r3, [pc, #52]	; (80079c0 <pxCurrentTCBConst>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007990:	6010      	str	r0, [r2, #0]
 8007992:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007996:	f04f 0050 	mov.w	r0, #80	; 0x50
 800799a:	f380 8811 	msr	BASEPRI, r0
 800799e:	f7fe fe4b 	bl	8006638 <vTaskSwitchContext>
 80079a2:	f04f 0000 	mov.w	r0, #0
 80079a6:	f380 8811 	msr	BASEPRI, r0
 80079aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80079ae:	6819      	ldr	r1, [r3, #0]
 80079b0:	6808      	ldr	r0, [r1, #0]
 80079b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079b6:	f380 8809 	msr	PSP, r0
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	4770      	bx	lr

080079c0 <pxCurrentTCBConst>:
 80079c0:	20001024 	.word	0x20001024
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop

080079c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	607b      	str	r3, [r7, #4]
}
 80079e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079e2:	f7fe fd6b 	bl	80064bc <xTaskIncrementTick>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079ec:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <xPortSysTickHandler+0x40>)
 80079ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	2300      	movs	r3, #0
 80079f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f383 8811 	msr	BASEPRI, r3
}
 80079fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	e000ed04 	.word	0xe000ed04

08007a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <vPortSetupTimerInterrupt+0x30>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a16:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <vPortSetupTimerInterrupt+0x34>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a1c:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <vPortSetupTimerInterrupt+0x38>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a09      	ldr	r2, [pc, #36]	; (8007a48 <vPortSetupTimerInterrupt+0x3c>)
 8007a22:	fba2 2303 	umull	r2, r3, r2, r3
 8007a26:	099b      	lsrs	r3, r3, #6
 8007a28:	4a08      	ldr	r2, [pc, #32]	; (8007a4c <vPortSetupTimerInterrupt+0x40>)
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a2e:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <vPortSetupTimerInterrupt+0x30>)
 8007a30:	2207      	movs	r2, #7
 8007a32:	601a      	str	r2, [r3, #0]
}
 8007a34:	bf00      	nop
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr
 8007a3c:	e000e010 	.word	0xe000e010
 8007a40:	e000e018 	.word	0xe000e018
 8007a44:	20000000 	.word	0x20000000
 8007a48:	10624dd3 	.word	0x10624dd3
 8007a4c:	e000e014 	.word	0xe000e014

08007a50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a56:	f3ef 8305 	mrs	r3, IPSR
 8007a5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b0f      	cmp	r3, #15
 8007a60:	d914      	bls.n	8007a8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a62:	4a16      	ldr	r2, [pc, #88]	; (8007abc <vPortValidateInterruptPriority+0x6c>)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a6c:	4b14      	ldr	r3, [pc, #80]	; (8007ac0 <vPortValidateInterruptPriority+0x70>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	7afa      	ldrb	r2, [r7, #11]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d20a      	bcs.n	8007a8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	607b      	str	r3, [r7, #4]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ac4 <vPortValidateInterruptPriority+0x74>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <vPortValidateInterruptPriority+0x78>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d90a      	bls.n	8007ab2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	603b      	str	r3, [r7, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	e7fe      	b.n	8007ab0 <vPortValidateInterruptPriority+0x60>
	}
 8007ab2:	bf00      	nop
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr
 8007abc:	e000e3f0 	.word	0xe000e3f0
 8007ac0:	20001650 	.word	0x20001650
 8007ac4:	e000ed0c 	.word	0xe000ed0c
 8007ac8:	20001654 	.word	0x20001654

08007acc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08a      	sub	sp, #40	; 0x28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ad8:	f7fe fc24 	bl	8006324 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007adc:	4b58      	ldr	r3, [pc, #352]	; (8007c40 <pvPortMalloc+0x174>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ae4:	f000 f910 	bl	8007d08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ae8:	4b56      	ldr	r3, [pc, #344]	; (8007c44 <pvPortMalloc+0x178>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4013      	ands	r3, r2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f040 808e 	bne.w	8007c12 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01d      	beq.n	8007b38 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007afc:	2208      	movs	r2, #8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4413      	add	r3, r2
 8007b02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d014      	beq.n	8007b38 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f023 0307 	bic.w	r3, r3, #7
 8007b14:	3308      	adds	r3, #8
 8007b16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <pvPortMalloc+0x6c>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	617b      	str	r3, [r7, #20]
}
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d069      	beq.n	8007c12 <pvPortMalloc+0x146>
 8007b3e:	4b42      	ldr	r3, [pc, #264]	; (8007c48 <pvPortMalloc+0x17c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d864      	bhi.n	8007c12 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b48:	4b40      	ldr	r3, [pc, #256]	; (8007c4c <pvPortMalloc+0x180>)
 8007b4a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b4c:	4b3f      	ldr	r3, [pc, #252]	; (8007c4c <pvPortMalloc+0x180>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b52:	e004      	b.n	8007b5e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d903      	bls.n	8007b70 <pvPortMalloc+0xa4>
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f1      	bne.n	8007b54 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b70:	4b33      	ldr	r3, [pc, #204]	; (8007c40 <pvPortMalloc+0x174>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d04b      	beq.n	8007c12 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2208      	movs	r2, #8
 8007b80:	4413      	add	r3, r2
 8007b82:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	1ad2      	subs	r2, r2, r3
 8007b94:	2308      	movs	r3, #8
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d91f      	bls.n	8007bdc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <pvPortMalloc+0xf8>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	613b      	str	r3, [r7, #16]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	1ad2      	subs	r2, r2, r3
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bd6:	69b8      	ldr	r0, [r7, #24]
 8007bd8:	f000 f8f8 	bl	8007dcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bdc:	4b1a      	ldr	r3, [pc, #104]	; (8007c48 <pvPortMalloc+0x17c>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <pvPortMalloc+0x17c>)
 8007be8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bea:	4b17      	ldr	r3, [pc, #92]	; (8007c48 <pvPortMalloc+0x17c>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	4b18      	ldr	r3, [pc, #96]	; (8007c50 <pvPortMalloc+0x184>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d203      	bcs.n	8007bfe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bf6:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <pvPortMalloc+0x17c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a15      	ldr	r2, [pc, #84]	; (8007c50 <pvPortMalloc+0x184>)
 8007bfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	4b10      	ldr	r3, [pc, #64]	; (8007c44 <pvPortMalloc+0x178>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c12:	f7fe fb95 	bl	8006340 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <pvPortMalloc+0x16a>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	60fb      	str	r3, [r7, #12]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <pvPortMalloc+0x168>
	return pvReturn;
 8007c36:	69fb      	ldr	r3, [r7, #28]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3728      	adds	r7, #40	; 0x28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20003660 	.word	0x20003660
 8007c44:	2000366c 	.word	0x2000366c
 8007c48:	20003664 	.word	0x20003664
 8007c4c:	20003658 	.word	0x20003658
 8007c50:	20003668 	.word	0x20003668

08007c54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d048      	beq.n	8007cf8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c66:	2308      	movs	r3, #8
 8007c68:	425b      	negs	r3, r3
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	4b21      	ldr	r3, [pc, #132]	; (8007d00 <vPortFree+0xac>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <vPortFree+0x44>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	60fb      	str	r3, [r7, #12]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <vPortFree+0x62>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	60bb      	str	r3, [r7, #8]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <vPortFree+0xac>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d019      	beq.n	8007cf8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d115      	bne.n	8007cf8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <vPortFree+0xac>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	401a      	ands	r2, r3
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cdc:	f7fe fb22 	bl	8006324 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	4b07      	ldr	r3, [pc, #28]	; (8007d04 <vPortFree+0xb0>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4413      	add	r3, r2
 8007cea:	4a06      	ldr	r2, [pc, #24]	; (8007d04 <vPortFree+0xb0>)
 8007cec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cee:	6938      	ldr	r0, [r7, #16]
 8007cf0:	f000 f86c 	bl	8007dcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007cf4:	f7fe fb24 	bl	8006340 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cf8:	bf00      	nop
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	2000366c 	.word	0x2000366c
 8007d04:	20003664 	.word	0x20003664

08007d08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d14:	4b27      	ldr	r3, [pc, #156]	; (8007db4 <prvHeapInit+0xac>)
 8007d16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00c      	beq.n	8007d3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3307      	adds	r3, #7
 8007d26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0307 	bic.w	r3, r3, #7
 8007d2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	4a1f      	ldr	r2, [pc, #124]	; (8007db4 <prvHeapInit+0xac>)
 8007d38:	4413      	add	r3, r2
 8007d3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d40:	4a1d      	ldr	r2, [pc, #116]	; (8007db8 <prvHeapInit+0xb0>)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d46:	4b1c      	ldr	r3, [pc, #112]	; (8007db8 <prvHeapInit+0xb0>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	4413      	add	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d54:	2208      	movs	r2, #8
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0307 	bic.w	r3, r3, #7
 8007d62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a15      	ldr	r2, [pc, #84]	; (8007dbc <prvHeapInit+0xb4>)
 8007d68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d6a:	4b14      	ldr	r3, [pc, #80]	; (8007dbc <prvHeapInit+0xb4>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d72:	4b12      	ldr	r3, [pc, #72]	; (8007dbc <prvHeapInit+0xb4>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	1ad2      	subs	r2, r2, r3
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <prvHeapInit+0xb4>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	4a0a      	ldr	r2, [pc, #40]	; (8007dc0 <prvHeapInit+0xb8>)
 8007d96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	4a09      	ldr	r2, [pc, #36]	; (8007dc4 <prvHeapInit+0xbc>)
 8007d9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007da0:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <prvHeapInit+0xc0>)
 8007da2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007da6:	601a      	str	r2, [r3, #0]
}
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bc80      	pop	{r7}
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	20001658 	.word	0x20001658
 8007db8:	20003658 	.word	0x20003658
 8007dbc:	20003660 	.word	0x20003660
 8007dc0:	20003668 	.word	0x20003668
 8007dc4:	20003664 	.word	0x20003664
 8007dc8:	2000366c 	.word	0x2000366c

08007dcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007dd4:	4b27      	ldr	r3, [pc, #156]	; (8007e74 <prvInsertBlockIntoFreeList+0xa8>)
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e002      	b.n	8007de0 <prvInsertBlockIntoFreeList+0x14>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d8f7      	bhi.n	8007dda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	4413      	add	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d108      	bne.n	8007e0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	441a      	add	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	441a      	add	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d118      	bne.n	8007e54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <prvInsertBlockIntoFreeList+0xac>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d00d      	beq.n	8007e4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	441a      	add	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	e008      	b.n	8007e5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e4a:	4b0b      	ldr	r3, [pc, #44]	; (8007e78 <prvInsertBlockIntoFreeList+0xac>)
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	e003      	b.n	8007e5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d002      	beq.n	8007e6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr
 8007e74:	20003658 	.word	0x20003658
 8007e78:	20003660 	.word	0x20003660

08007e7c <CANFrame_RcvTask>:
			return NULL;
		}
	}
}

void CANFrame_RcvTask(void *arg) {
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b090      	sub	sp, #64	; 0x40
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
	int Status = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
	CANFrame_HandlerStruct *CANHandler = (CANFrame_HandlerStruct*) arg;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	63bb      	str	r3, [r7, #56]	; 0x38
	CAN_RxHeaderTypeDef CAN_RxHeader;
	CANFrame_RxHeaderTypedef CANFrame_RxHeader;
	uint8_t RxData[8];
	uint8_t senderID;
	uint8_t TargetNode;
	uint8_t FifoFillLevel = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	72fb      	strb	r3, [r7, #11]
	while (1) {

//		SyncPrintf("Rcv Task 1 \r\n");
		CAN_OS_GetRxFifoFillLevel(CANHandler->CAN, CANHandler->RxFifo,
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f107 020b 	add.w	r2, r7, #11
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f000 f9e6 	bl	800826e <CAN_OS_GetRxFifoFillLevel>
				&FifoFillLevel);
		if (FifoFillLevel == 0) {
 8007ea2:	7afb      	ldrb	r3, [r7, #11]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10c      	bne.n	8007ec2 <CANFrame_RcvTask+0x46>
			Status = CAN_OS_ListenMsg(CANHandler->CAN, CANHandler->RxFifo,
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eaa:	6818      	ldr	r0, [r3, #0]
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f000 f998 	bl	80081ea <CAN_OS_ListenMsg>
 8007eba:	63f8      	str	r0, [r7, #60]	; 0x3c
			osWaitForever);
			if (Status != osOK) {
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d143      	bne.n	8007f4a <CANFrame_RcvTask+0xce>
				continue;
			}
		}
		Status = CAN_OS_GetRxMessage(CANHandler->CAN, CANHandler->RxFifo,
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	6899      	ldr	r1, [r3, #8]
 8007eca:	f107 030c 	add.w	r3, r7, #12
 8007ece:	f107 021c 	add.w	r2, r7, #28
 8007ed2:	f000 f9e1 	bl	8008298 <CAN_OS_GetRxMessage>
 8007ed6:	63f8      	str	r0, [r7, #60]	; 0x3c
				&CAN_RxHeader, RxData);
//		SyncPrintf("Rcv Task 2 \r\n");
		if (Status != osOK) {
 8007ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d137      	bne.n	8007f4e <CANFrame_RcvTask+0xd2>
//		{
//			SyncPrintf("0x%.2x ", RxData[i]);
//		}
//		SyncPrintf("\r\n");
//		SyncPrintf("Rcv message with id: %d\r\n",CAN_RxHeader.StdId);
		isotp_poll(&recv_link);
 8007ede:	481d      	ldr	r0, [pc, #116]	; (8007f54 <CANFrame_RcvTask+0xd8>)
 8007ee0:	f000 fe4d 	bl	8008b7e <isotp_poll>
		if (CAN_RxHeader.StdId == send_link.receive_arbitration_id) {
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	4b1c      	ldr	r3, [pc, #112]	; (8007f58 <CANFrame_RcvTask+0xdc>)
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d107      	bne.n	8007efe <CANFrame_RcvTask+0x82>
			isotp_on_can_message(&send_link, RxData, CAN_RxHeader.DLC);
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	f107 030c 	add.w	r3, r7, #12
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4817      	ldr	r0, [pc, #92]	; (8007f58 <CANFrame_RcvTask+0xdc>)
 8007efa:	f000 fcc7 	bl	800888c <isotp_on_can_message>
		}
		if (CAN_RxHeader.StdId == recv_link.receive_arbitration_id) {
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	4b14      	ldr	r3, [pc, #80]	; (8007f54 <CANFrame_RcvTask+0xd8>)
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d107      	bne.n	8007f18 <CANFrame_RcvTask+0x9c>
			isotp_on_can_message(&recv_link, RxData, CAN_RxHeader.DLC);
 8007f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	f107 030c 	add.w	r3, r7, #12
 8007f10:	4619      	mov	r1, r3
 8007f12:	4810      	ldr	r0, [pc, #64]	; (8007f54 <CANFrame_RcvTask+0xd8>)
 8007f14:	f000 fcba 	bl	800888c <isotp_on_can_message>

		}if (recv_link.receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8007f18:	4b0e      	ldr	r3, [pc, #56]	; (8007f54 <CANFrame_RcvTask+0xd8>)
 8007f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d107      	bne.n	8007f32 <CANFrame_RcvTask+0xb6>
			CANHandler->RcvSucessCounter++;
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
 8007f30:	e7ae      	b.n	8007e90 <CANFrame_RcvTask+0x14>
//				SyncPrintf("%s\n", (char*) recv_link.receive_buffer);
		} else if (recv_link.receive_protocol_result
 8007f32:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <CANFrame_RcvTask+0xd8>)
 8007f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0aa      	beq.n	8007e90 <CANFrame_RcvTask+0x14>
				!= ISOTP_PROTOCOL_RESULT_OK) {
			CANHandler->RcvFailedCounter++;
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
 8007f48:	e7a2      	b.n	8007e90 <CANFrame_RcvTask+0x14>
				continue;
 8007f4a:	bf00      	nop
 8007f4c:	e7a0      	b.n	8007e90 <CANFrame_RcvTask+0x14>
			continue;
 8007f4e:	bf00      	nop
		CAN_OS_GetRxFifoFillLevel(CANHandler->CAN, CANHandler->RxFifo,
 8007f50:	e79e      	b.n	8007e90 <CANFrame_RcvTask+0x14>
 8007f52:	bf00      	nop
 8007f54:	200001c0 	.word	0x200001c0
 8007f58:	20000180 	.word	0x20000180

08007f5c <CANFrame_Init>:
		}
	}
}

int CANFrame_Init(CANFrame_HandlerStruct *canhandler, CAN_OS_HandlerStruct *CAN,
		uint16_t nodeID, uint32_t CAN_RxFifo) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80fb      	strh	r3, [r7, #6]
	memset(canhandler, 0, sizeof(CANFrame_HandlerStruct));
 8007f6c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8007f70:	2100      	movs	r1, #0
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 ffe4 	bl	8008f40 <memset>
	canhandler->CAN = CAN;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	601a      	str	r2, [r3, #0]
	canhandler->nodeID = nodeID;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	88fa      	ldrh	r2, [r7, #6]
 8007f82:	809a      	strh	r2, [r3, #4]
	canhandler->usedFilterBank = 0;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	80da      	strh	r2, [r3, #6]
	canhandler->RxFifo = CAN_RxFifo;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	609a      	str	r2, [r3, #8]

	canhandler->TxSem = osSemaphoreNew(1, 1, NULL);
 8007f90:	2200      	movs	r2, #0
 8007f92:	2101      	movs	r1, #1
 8007f94:	2001      	movs	r0, #1
 8007f96:	f7fc f999 	bl	80042cc <osSemaphoreNew>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	60da      	str	r2, [r3, #12]
	canhandler->rcvHandler_Th = osThreadNew(CANFrame_RcvTask, canhandler,
 8007fa0:	4a0e      	ldr	r2, [pc, #56]	; (8007fdc <CANFrame_Init+0x80>)
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	480e      	ldr	r0, [pc, #56]	; (8007fe0 <CANFrame_Init+0x84>)
 8007fa6:	f7fb fe15 	bl	8003bd4 <osThreadNew>
 8007faa:	4602      	mov	r2, r0
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	611a      	str	r2, [r3, #16]
			&CANRcvTask_attributes);
	CANFrame_FilterConfig(canhandler, send_link.receive_arbitration_id, CAN_RxFifo);
 8007fb0:	4b0c      	ldr	r3, [pc, #48]	; (8007fe4 <CANFrame_Init+0x88>)
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 f816 	bl	8007fec <CANFrame_FilterConfig>
	return CANFrame_FilterConfig(canhandler, recv_link.receive_arbitration_id, CAN_RxFifo);
 8007fc0:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <CANFrame_Init+0x8c>)
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 f80e 	bl	8007fec <CANFrame_FilterConfig>
 8007fd0:	4603      	mov	r3, r0

}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	0800a328 	.word	0x0800a328
 8007fe0:	08007e7d 	.word	0x08007e7d
 8007fe4:	20000180 	.word	0x20000180
 8007fe8:	200001c0 	.word	0x200001c0

08007fec <CANFrame_FilterConfig>:
	}

}

int CANFrame_FilterConfig(CANFrame_HandlerStruct *Can, uint16_t NodeID,
		uint32_t RxFifo) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08e      	sub	sp, #56	; 0x38
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	817b      	strh	r3, [r7, #10]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	633b      	str	r3, [r7, #48]	; 0x30
	Can_filter_init.FilterBank = Can->usedFilterBank++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	88db      	ldrh	r3, [r3, #6]
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	b291      	uxth	r1, r2
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	80d1      	strh	r1, [r2, #6]
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
	if (Can->usedFilterBank > 14) {
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	88db      	ldrh	r3, [r3, #6]
 8008010:	2b0e      	cmp	r3, #14
 8008012:	d901      	bls.n	8008018 <CANFrame_FilterConfig+0x2c>
		Error_Handler();
 8008014:	f7f8 fa90 	bl	8000538 <Error_Handler>
	}
	Can_filter_init.FilterFIFOAssignment = RxFifo;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterIdHigh = NodeID << 5;
 800801c:	897b      	ldrh	r3, [r7, #10]
 800801e:	015b      	lsls	r3, r3, #5
 8008020:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdLow = 0x0000;
 8008022:	2300      	movs	r3, #0
 8008024:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMaskIdHigh = 0x0000;
 8008026:	2300      	movs	r3, #0
 8008028:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 800802a:	2300      	movs	r3, #0
 800802c:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800802e:	2300      	movs	r3, #0
 8008030:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8008032:	2301      	movs	r3, #1
 8008034:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (CAN_OS_ConfigFilter(Can->CAN, &Can_filter_init) != HAL_OK) {
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f107 0210 	add.w	r2, r7, #16
 800803e:	4611      	mov	r1, r2
 8008040:	4618      	mov	r0, r3
 8008042:	f000 f830 	bl	80080a6 <CAN_OS_ConfigFilter>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <CANFrame_FilterConfig+0x64>
		Error_Handler();
 800804c:	f7f8 fa74 	bl	8000538 <Error_Handler>
	}
	return osOK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3738      	adds	r7, #56	; 0x38
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <CAN_OS_Init>:

#include "CANHandler.h"

int CAN_OS_Init(CAN_OS_HandlerStruct* CANHandler, CAN_HandleTypeDef* hcan)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
	HAL_CAN_Stop(hcan);
 8008064:	6838      	ldr	r0, [r7, #0]
 8008066:	f7f9 f814 	bl	8001092 <HAL_CAN_Stop>
	CANHandler->hcan = hcan;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	601a      	str	r2, [r3, #0]
	CANHandler->EventFlag = osEventFlagsNew(NULL);
 8008070:	2000      	movs	r0, #0
 8008072:	f7fb fec3 	bl	8003dfc <osEventFlagsNew>
 8008076:	4602      	mov	r2, r0
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60da      	str	r2, [r3, #12]
	CANHandler->TxSemaphore = osSemaphoreNew(CAN_OS_TxMailBox_Max, CAN_OS_TxMailBox_Max, NULL);
 800807c:	2200      	movs	r2, #0
 800807e:	2103      	movs	r1, #3
 8008080:	2003      	movs	r0, #3
 8008082:	f7fc f923 	bl	80042cc <osSemaphoreNew>
 8008086:	4602      	mov	r2, r0
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]
	CANHandler->RxSemaphore = osSemaphoreNew(1, 1, NULL);
 800808c:	2200      	movs	r2, #0
 800808e:	2101      	movs	r1, #1
 8008090:	2001      	movs	r0, #1
 8008092:	f7fc f91b 	bl	80042cc <osSemaphoreNew>
 8008096:	4602      	mov	r2, r0
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <CAN_OS_ConfigFilter>:

int CAN_OS_ConfigFilter(CAN_OS_HandlerStruct* CANHandler,const CAN_FilterTypeDef* Filter)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef Status =  HAL_CAN_ConfigFilter(CANHandler->hcan, Filter);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7f8 fede 	bl	8000e78 <HAL_CAN_ConfigFilter>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]
	return Status == HAL_OK? osOK: osError;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <CAN_OS_ConfigFilter+0x24>
 80080c6:	2300      	movs	r3, #0
 80080c8:	e001      	b.n	80080ce <CAN_OS_ConfigFilter+0x28>
 80080ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <CAN_OS_Start>:
{
	 return HAL_CAN_ActivateNotification(CANHandler->hcan,ActiveITs);
}

int CAN_OS_Start(CAN_OS_HandlerStruct* CANHandler)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
//	CAN_OS_ActivateNotification(CANHandler, CAN_IT_TX_MAILBOX_EMPTY);

	return HAL_CAN_Start(CANHandler->hcan);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7f8 ff91 	bl	800100a <HAL_CAN_Start>
 80080e8:	4603      	mov	r3, r0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <CAN_MailboxSync>:

static inline void CAN_MailboxSync(CAN_OS_HandlerStruct* CANHandler)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
	uint32_t FreeMailbox;
	uint32_t semCount;
	while(1)
	{
		FreeMailbox = HAL_CAN_GetTxMailboxesFreeLevel(CANHandler->hcan);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4618      	mov	r0, r3
 8008100:	f7f9 f8df 	bl	80012c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8008104:	60f8      	str	r0, [r7, #12]
		semCount = osSemaphoreGetCount(CANHandler->TxSemaphore);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	4618      	mov	r0, r3
 800810c:	f7fc fa38 	bl	8004580 <osSemaphoreGetCount>
 8008110:	60b8      	str	r0, [r7, #8]
		if(semCount == FreeMailbox)
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	429a      	cmp	r2, r3
 8008118:	d010      	beq.n	800813c <CAN_MailboxSync+0x4a>
		{
			return;
		}else if( semCount < FreeMailbox)
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	429a      	cmp	r2, r3
 8008120:	d205      	bcs.n	800812e <CAN_MailboxSync+0x3c>
		{
			osSemaphoreRelease(CANHandler->TxSemaphore);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4618      	mov	r0, r3
 8008128:	f7fc f9d2 	bl	80044d0 <osSemaphoreRelease>
 800812c:	e7e5      	b.n	80080fa <CAN_MailboxSync+0x8>
		}else
		{
			osSemaphoreAcquire(CANHandler->TxSemaphore, 0);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2100      	movs	r1, #0
 8008134:	4618      	mov	r0, r3
 8008136:	f7fc f965 	bl	8004404 <osSemaphoreAcquire>
		FreeMailbox = HAL_CAN_GetTxMailboxesFreeLevel(CANHandler->hcan);
 800813a:	e7de      	b.n	80080fa <CAN_MailboxSync+0x8>
			return;
 800813c:	bf00      	nop
		}
	}
}
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <CAN_OS_Transmit>:

int CAN_OS_Transmit(CAN_OS_HandlerStruct* CANHandler, const CAN_TxHeaderTypeDef *txHeader, uint8_t* txData, uint32_t* txMailbox, uint32_t timeout)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
	int Status;
	uint32_t StartTime = osKernelGetTickCount();
 8008152:	f7fb fd17 	bl	8003b84 <osKernelGetTickCount>
 8008156:	6178      	str	r0, [r7, #20]
	CAN_MailboxSync(CANHandler);
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f7ff ffca 	bl	80080f2 <CAN_MailboxSync>
	Status = osSemaphoreAcquire(CANHandler->TxSemaphore, timeout);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	6a39      	ldr	r1, [r7, #32]
 8008164:	4618      	mov	r0, r3
 8008166:	f7fc f94d 	bl	8004404 <osSemaphoreAcquire>
 800816a:	6138      	str	r0, [r7, #16]
	if(Status == osErrorTimeout) return HAL_TIMEOUT;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f113 0f02 	cmn.w	r3, #2
 8008172:	d101      	bne.n	8008178 <CAN_OS_Transmit+0x34>
 8008174:	2303      	movs	r3, #3
 8008176:	e034      	b.n	80081e2 <CAN_OS_Transmit+0x9e>
	Status = HAL_CAN_AddTxMessage(CANHandler->hcan, txHeader, txData, txMailbox);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6818      	ldr	r0, [r3, #0]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	f7f8 ffcf 	bl	8001124 <HAL_CAN_AddTxMessage>
 8008186:	4603      	mov	r3, r0
 8008188:	613b      	str	r3, [r7, #16]

	if (Status != HAL_OK){
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d017      	beq.n	80081c0 <CAN_OS_Transmit+0x7c>
		osSemaphoreRelease(CANHandler->TxSemaphore);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	4618      	mov	r0, r3
 8008196:	f7fc f99b 	bl	80044d0 <osSemaphoreRelease>
		return osError;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	e020      	b.n	80081e2 <CAN_OS_Transmit+0x9e>
	}
	while(HAL_CAN_IsTxMessagePending(CANHandler->hcan, *txMailbox))
	{
		if (osKernelGetTickCount() - StartTime > timeout)
 80081a0:	f7fb fcf0 	bl	8003b84 <osKernelGetTickCount>
 80081a4:	4602      	mov	r2, r0
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	6a3a      	ldr	r2, [r7, #32]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d207      	bcs.n	80081c0 <CAN_OS_Transmit+0x7c>
		{
			osSemaphoreRelease(CANHandler->TxSemaphore);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fc f98b 	bl	80044d0 <osSemaphoreRelease>
			return osErrorTimeout;
 80081ba:	f06f 0301 	mvn.w	r3, #1
 80081be:	e010      	b.n	80081e2 <CAN_OS_Transmit+0x9e>
	while(HAL_CAN_IsTxMessagePending(CANHandler->hcan, *txMailbox))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4619      	mov	r1, r3
 80081ca:	4610      	mov	r0, r2
 80081cc:	f7f9 f8ad 	bl	800132a <HAL_CAN_IsTxMessagePending>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e4      	bne.n	80081a0 <CAN_OS_Transmit+0x5c>
		}
	}
	osSemaphoreRelease(CANHandler->TxSemaphore);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fc f978 	bl	80044d0 <osSemaphoreRelease>

	return osOK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <CAN_OS_ListenMsg>:
//	int Status = osEventFlagsWait(CANHandler->EventFlag, waitEvent, osFlagsWaitAll, timeout);
//	return Status > 0 ? osOK : Status;
//}

int CAN_OS_ListenMsg(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, uint32_t timeout)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b088      	sub	sp, #32
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
	int Status;
	uint32_t activateITS;
	uint8_t waitEvent;
	if (rxFifo == CAN_FILTER_FIFO0){
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <CAN_OS_ListenMsg+0x1c>
		activateITS = CAN_IT_RX_FIFO0_MSG_PENDING;
 80081fc:	2302      	movs	r3, #2
 80081fe:	61fb      	str	r3, [r7, #28]
		waitEvent = CAN_OS_RxFifo0Cplt_Event;
 8008200:	2301      	movs	r3, #1
 8008202:	76fb      	strb	r3, [r7, #27]
 8008204:	e00a      	b.n	800821c <CAN_OS_ListenMsg+0x32>
	}
	else if (rxFifo == CAN_FILTER_FIFO1 ) {
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d104      	bne.n	8008216 <CAN_OS_ListenMsg+0x2c>
		activateITS = CAN_IT_RX_FIFO1_MSG_PENDING;
 800820c:	2310      	movs	r3, #16
 800820e:	61fb      	str	r3, [r7, #28]
		waitEvent = CAN_OS_RxFifo1Cplt_Event;
 8008210:	2302      	movs	r3, #2
 8008212:	76fb      	strb	r3, [r7, #27]
 8008214:	e002      	b.n	800821c <CAN_OS_ListenMsg+0x32>
	}
	else return osErrorParameter;
 8008216:	f06f 0303 	mvn.w	r3, #3
 800821a:	e024      	b.n	8008266 <CAN_OS_ListenMsg+0x7c>

	Status = HAL_CAN_ActivateNotification(CANHandler->hcan, activateITS);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69f9      	ldr	r1, [r7, #28]
 8008222:	4618      	mov	r0, r3
 8008224:	f7f9 f9ec 	bl	8001600 <HAL_CAN_ActivateNotification>
 8008228:	4603      	mov	r3, r0
 800822a:	617b      	str	r3, [r7, #20]

	Status = osSemaphoreAcquire(CANHandler->RxSemaphore, timeout);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	4618      	mov	r0, r3
 8008234:	f7fc f8e6 	bl	8004404 <osSemaphoreAcquire>
 8008238:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <CAN_OS_ListenMsg+0x5a>
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	e010      	b.n	8008266 <CAN_OS_ListenMsg+0x7c>
	Status = osEventFlagsWait(CANHandler->EventFlag, waitEvent, osFlagsWaitAll, timeout);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68d8      	ldr	r0, [r3, #12]
 8008248:	7ef9      	ldrb	r1, [r7, #27]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f7fb fe7f 	bl	8003f50 <osEventFlagsWait>
 8008252:	4603      	mov	r3, r0
 8008254:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(CANHandler->RxSemaphore);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	4618      	mov	r0, r3
 800825c:	f7fc f938 	bl	80044d0 <osSemaphoreRelease>
	return Status > 0 ? osOK : Status;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 8008266:	4618      	mov	r0, r3
 8008268:	3720      	adds	r7, #32
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <CAN_OS_GetRxFifoFillLevel>:

int CAN_OS_GetRxFifoFillLevel(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, uint8_t* FillLevel)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	607a      	str	r2, [r7, #4]
	*FillLevel = HAL_CAN_GetRxFifoFillLevel(CANHandler->hcan, rxFifo);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	4618      	mov	r0, r3
 8008282:	f7f9 f996 	bl	80015b2 <HAL_CAN_GetRxFifoFillLevel>
 8008286:	4603      	mov	r3, r0
 8008288:	b2da      	uxtb	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	701a      	strb	r2, [r3, #0]
	return osOK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <CAN_OS_GetRxMessage>:

int CAN_OS_GetRxMessage(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, CAN_RxHeaderTypeDef* rxHeader, uint8_t* rxData)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
	uint8_t Status = HAL_CAN_GetRxMessage(CANHandler->hcan, rxFifo, rxHeader, rxData);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	68b9      	ldr	r1, [r7, #8]
 80082b0:	f7f9 f85e 	bl	8001370 <HAL_CAN_GetRxMessage>
 80082b4:	4603      	mov	r3, r0
 80082b6:	75fb      	strb	r3, [r7, #23]
	return Status == HAL_OK? osOK: osError;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <CAN_OS_GetRxMessage+0x2a>
 80082be:	2300      	movs	r3, #0
 80082c0:	e001      	b.n	80082c6 <CAN_OS_GetRxMessage+0x2e>
 80082c2:	f04f 33ff 	mov.w	r3, #4294967295

}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <CAN_OS_RxFifo0Cplt_CB>:

void CAN_OS_RxFifo0Cplt_CB(CAN_OS_HandlerStruct* CANHandler)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
	__HAL_CAN_DISABLE_IT(CANHandler->hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	695a      	ldr	r2, [r3, #20]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0202 	bic.w	r2, r2, #2
 80082ea:	615a      	str	r2, [r3, #20]
	osEventFlagsSet(CANHandler->EventFlag, CAN_OS_RxFifo0Cplt_Event);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	2101      	movs	r1, #1
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fb fdd4 	bl	8003ea0 <osEventFlagsSet>
	SyncPrintf("Can Rcv\r\n");
 80082f8:	4803      	ldr	r0, [pc, #12]	; (8008308 <CAN_OS_RxFifo0Cplt_CB+0x38>)
 80082fa:	f000 f877 	bl	80083ec <SyncPrintf>
}
 80082fe:	bf00      	nop
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	0800a0c8 	.word	0x0800a0c8

0800830c <CAN_OS_TxCplt_CB>:
{
	__HAL_CAN_DISABLE_IT(CANHandler->hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	osEventFlagsSet(CANHandler->EventFlag, CAN_OS_RxFifo1Cplt_Event);
}
void CAN_OS_TxCplt_CB(CAN_OS_HandlerStruct* CANHandler)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CANHandler->TxSemaphore);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	4618      	mov	r0, r3
 800831a:	f7fc f8d9 	bl	80044d0 <osSemaphoreRelease>

}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <CAN_OS_RegisterCB>:

int CAN_OS_RegisterCB(CAN_OS_HandlerStruct *hcan, uint8_t callbackID, void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	460b      	mov	r3, r1
 8008330:	607a      	str	r2, [r7, #4]
 8008332:	72fb      	strb	r3, [r7, #11]
	switch (callbackID)
 8008334:	7afb      	ldrb	r3, [r7, #11]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d039      	beq.n	80083ae <CAN_OS_RegisterCB+0x88>
 800833a:	2b02      	cmp	r3, #2
 800833c:	dc3f      	bgt.n	80083be <CAN_OS_RegisterCB+0x98>
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <CAN_OS_RegisterCB+0x22>
 8008342:	2b01      	cmp	r3, #1
 8008344:	d02b      	beq.n	800839e <CAN_OS_RegisterCB+0x78>
 8008346:	e03a      	b.n	80083be <CAN_OS_RegisterCB+0x98>
	{
		case CAN_OS_ActivateTxCB_ID:
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID,pCallback);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	2100      	movs	r1, #0
 8008350:	4618      	mov	r0, r3
 8008352:	f7f8 fce3 	bl	8000d1c <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID,pCallback);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	2101      	movs	r1, #1
 800835e:	4618      	mov	r0, r3
 8008360:	f7f8 fcdc 	bl	8000d1c <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID,pCallback);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	2102      	movs	r1, #2
 800836c:	4618      	mov	r0, r3
 800836e:	f7f8 fcd5 	bl	8000d1c <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX0_ABORT_CB_ID,pCallback);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	2103      	movs	r1, #3
 800837a:	4618      	mov	r0, r3
 800837c:	f7f8 fcce 	bl	8000d1c <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX1_ABORT_CB_ID,pCallback);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	2104      	movs	r1, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7f8 fcc7 	bl	8000d1c <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX2_ABORT_CB_ID,pCallback);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	2105      	movs	r1, #5
 8008396:	4618      	mov	r0, r3
 8008398:	f7f8 fcc0 	bl	8000d1c <HAL_CAN_RegisterCallback>
			break;
 800839c:	e012      	b.n	80083c4 <CAN_OS_RegisterCB+0x9e>
		case CAN_OS_ActivateRxFifo0_ID:
			HAL_CAN_RegisterCallback(hcan->hcan,HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID,pCallback);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	2106      	movs	r1, #6
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7f8 fcb8 	bl	8000d1c <HAL_CAN_RegisterCallback>

			break;
 80083ac:	e00a      	b.n	80083c4 <CAN_OS_RegisterCB+0x9e>
		case CAN_OS_ActivateRxFifo1_ID:
			HAL_CAN_RegisterCallback(hcan->hcan,HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID,pCallback);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	2108      	movs	r1, #8
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7f8 fcb0 	bl	8000d1c <HAL_CAN_RegisterCallback>

			break;
 80083bc:	e002      	b.n	80083c4 <CAN_OS_RegisterCB+0x9e>
		default:
			return osErrorParameter;
 80083be:	f06f 0303 	mvn.w	r3, #3
 80083c2:	e000      	b.n	80083c6 <CAN_OS_RegisterCB+0xa0>
			break;
	}
	return osOK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <SyncPrintf_Init>:
  NULL,                // memory for control block
  0U                   // size for control block
};

void 	SyncPrintf_Init()
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
 80083d4:	4803      	ldr	r0, [pc, #12]	; (80083e4 <SyncPrintf_Init+0x14>)
 80083d6:	f7fb fe31 	bl	800403c <osMutexNew>
 80083da:	4603      	mov	r3, r0
 80083dc:	4a02      	ldr	r2, [pc, #8]	; (80083e8 <SyncPrintf_Init+0x18>)
 80083de:	6013      	str	r3, [r2, #0]
}
 80083e0:	bf00      	nop
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	0800a34c 	.word	0x0800a34c
 80083e8:	20003670 	.word	0x20003670

080083ec <SyncPrintf>:

int	SyncPrintf(const char *__restrict format, ...)
{
 80083ec:	b40f      	push	{r0, r1, r2, r3}
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b09e      	sub	sp, #120	; 0x78
 80083f2:	af00      	add	r7, sp, #0
#if USE_SyncPrintf == 1
	int Status = osMutexAcquire(PrintfMutex, osWaitForever);
 80083f4:	4b21      	ldr	r3, [pc, #132]	; (800847c <SyncPrintf+0x90>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f04f 31ff 	mov.w	r1, #4294967295
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fb feb7 	bl	8004170 <osMutexAcquire>
 8008402:	6778      	str	r0, [r7, #116]	; 0x74
	if(Status != osOK)
 8008404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <SyncPrintf+0x22>
		return 0;
 800840a:	2300      	movs	r3, #0
 800840c:	e02e      	b.n	800846c <SyncPrintf+0x80>
	va_list arg;
	char Buffer[PrintBufferSize]={0};
 800840e:	2300      	movs	r3, #0
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	f107 030c 	add.w	r3, r7, #12
 8008416:	2260      	movs	r2, #96	; 0x60
 8008418:	2100      	movs	r1, #0
 800841a:	4618      	mov	r0, r3
 800841c:	f000 fd90 	bl	8008f40 <memset>
	size_t size = PrintBufferSize;
 8008420:	2364      	movs	r3, #100	; 0x64
 8008422:	607b      	str	r3, [r7, #4]
	va_start(arg,format);
 8008424:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008428:	66fb      	str	r3, [r7, #108]	; 0x6c
	char* Output  = vasnprintf(Buffer,&size,format,arg);
 800842a:	1d39      	adds	r1, r7, #4
 800842c:	f107 0008 	add.w	r0, r7, #8
 8008430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008432:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008436:	f000 fd75 	bl	8008f24 <vasniprintf>
 800843a:	6738      	str	r0, [r7, #112]	; 0x70
	va_end(arg);
	if(Output != NULL)
 800843c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00e      	beq.n	8008460 <SyncPrintf+0x74>
	{
		HAL_UART_Transmit(&DebugUART,(uint8_t*) Output, size, 10);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	b29a      	uxth	r2, r3
 8008446:	230a      	movs	r3, #10
 8008448:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800844a:	480d      	ldr	r0, [pc, #52]	; (8008480 <SyncPrintf+0x94>)
 800844c:	f7fa fd60 	bl	8002f10 <HAL_UART_Transmit>

		if(Output != Buffer)
 8008450:	f107 0308 	add.w	r3, r7, #8
 8008454:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008456:	429a      	cmp	r2, r3
 8008458:	d002      	beq.n	8008460 <SyncPrintf+0x74>
		{

			vPortFree(Output);
 800845a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800845c:	f7ff fbfa 	bl	8007c54 <vPortFree>
		}
	}
	osMutexRelease(PrintfMutex);
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <SyncPrintf+0x90>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f7fb fee1 	bl	800422c <osMutexRelease>

	return size;
 800846a:	687b      	ldr	r3, [r7, #4]
#else
	return 0;
#endif
}
 800846c:	4618      	mov	r0, r3
 800846e:	3778      	adds	r7, #120	; 0x78
 8008470:	46bd      	mov	sp, r7
 8008472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008476:	b004      	add	sp, #16
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20003670 	.word	0x20003670
 8008480:	20000134 	.word	0x20000134

08008484 <isotp_user_send_can>:

/* required, this must send a single CAN message with the given arbitration
 * ID (i.e. the CAN message ID) and data. The size will never be more than 8
 * bytes. */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t *data,
		const uint8_t size) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b08e      	sub	sp, #56	; 0x38
 8008488:	af02      	add	r7, sp, #8
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	71fb      	strb	r3, [r7, #7]
	// ...
	CAN_TxHeaderTypeDef TxHeader = { 0 };
 8008492:	f107 0314 	add.w	r3, r7, #20
 8008496:	2200      	movs	r2, #0
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	605a      	str	r2, [r3, #4]
 800849c:	609a      	str	r2, [r3, #8]
 800849e:	60da      	str	r2, [r3, #12]
 80084a0:	611a      	str	r2, [r3, #16]
 80084a2:	615a      	str	r2, [r3, #20]
	TxHeader.DLC = size;
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.RTR = CAN_RTR_DATA;
 80084a8:	2300      	movs	r3, #0
 80084aa:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_STD;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = arbitration_id;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	617b      	str	r3, [r7, #20]
	uint32_t TxMailBox;
	uint8_t ret = CAN_OS_Transmit(&CANmain, &TxHeader, (uint8_t*) data,
 80084b4:	f107 0310 	add.w	r3, r7, #16
 80084b8:	f107 0114 	add.w	r1, r7, #20
 80084bc:	2214      	movs	r2, #20
 80084be:	9200      	str	r2, [sp, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	4806      	ldr	r0, [pc, #24]	; (80084dc <isotp_user_send_can+0x58>)
 80084c4:	f7ff fe3e 	bl	8008144 <CAN_OS_Transmit>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&TxMailBox, 20);
	return ret;
 80084ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3730      	adds	r7, #48	; 0x30
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	200005e8 	.word	0x200005e8

080084e0 <isotp_user_get_ms>:

/* required, return system tick, unit is millisecond */
uint32_t isotp_user_get_ms(void) {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
	// ...
	return osKernelGetTickCount();
 80084e4:	f7fb fb4e 	bl	8003b84 <osKernelGetTickCount>
 80084e8:	4603      	mov	r3, r0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	bd80      	pop	{r7, pc}

080084ee <isotp_user_debug>:

/* optional, provide to receive debugging log messages */
void isotp_user_debug(const char *message, ...) {
 80084ee:	b40f      	push	{r0, r1, r2, r3}
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0
	// ...
}
 80084f4:	bf00      	nop
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bc80      	pop	{r7}
 80084fa:	b004      	add	sp, #16
 80084fc:	4770      	bx	lr

080084fe <isotp_ms_to_st_min>:

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	4603      	mov	r3, r0
 8008506:	71fb      	strb	r3, [r7, #7]
	uint8_t st_min;

	st_min = ms;
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	73fb      	strb	r3, [r7, #15]
	if (st_min > 0x7F) {
 800850c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008510:	2b00      	cmp	r3, #0
 8008512:	da01      	bge.n	8008518 <isotp_ms_to_st_min+0x1a>
		st_min = 0x7F;
 8008514:	237f      	movs	r3, #127	; 0x7f
 8008516:	73fb      	strb	r3, [r7, #15]
	}

	return st_min;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	bc80      	pop	{r7}
 8008522:	4770      	bx	lr

08008524 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	71fb      	strb	r3, [r7, #7]
	uint8_t ms;

	if (st_min >= 0xF1 && st_min <= 0xF9) {
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2bf0      	cmp	r3, #240	; 0xf0
 8008532:	d905      	bls.n	8008540 <isotp_st_min_to_ms+0x1c>
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	2bf9      	cmp	r3, #249	; 0xf9
 8008538:	d802      	bhi.n	8008540 <isotp_st_min_to_ms+0x1c>
		ms = 1;
 800853a:	2301      	movs	r3, #1
 800853c:	73fb      	strb	r3, [r7, #15]
 800853e:	e008      	b.n	8008552 <isotp_st_min_to_ms+0x2e>
	} else if (st_min <= 0x7F) {
 8008540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008544:	2b00      	cmp	r3, #0
 8008546:	db02      	blt.n	800854e <isotp_st_min_to_ms+0x2a>
		ms = st_min;
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	73fb      	strb	r3, [r7, #15]
 800854c:	e001      	b.n	8008552 <isotp_st_min_to_ms+0x2e>
	} else {
		ms = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
	}

	return ms;
 8008552:	7bfb      	ldrb	r3, [r7, #15]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr

0800855e <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink *link, uint8_t flow_status,
		uint8_t block_size, uint8_t st_min_ms) {
 800855e:	b580      	push	{r7, lr}
 8008560:	b086      	sub	sp, #24
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	4608      	mov	r0, r1
 8008568:	4611      	mov	r1, r2
 800856a:	461a      	mov	r2, r3
 800856c:	4603      	mov	r3, r0
 800856e:	70fb      	strb	r3, [r7, #3]
 8008570:	460b      	mov	r3, r1
 8008572:	70bb      	strb	r3, [r7, #2]
 8008574:	4613      	mov	r3, r2
 8008576:	707b      	strb	r3, [r7, #1]

	IsoTpCanMessage message;
	int ret;

	/* setup message  */
	message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 8008578:	7b3b      	ldrb	r3, [r7, #12]
 800857a:	2203      	movs	r2, #3
 800857c:	f362 1307 	bfi	r3, r2, #4, #4
 8008580:	733b      	strb	r3, [r7, #12]
	message.as.flow_control.FS = flow_status;
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	b2da      	uxtb	r2, r3
 800858a:	7b3b      	ldrb	r3, [r7, #12]
 800858c:	f362 0303 	bfi	r3, r2, #0, #4
 8008590:	733b      	strb	r3, [r7, #12]
	message.as.flow_control.BS = block_size;
 8008592:	78bb      	ldrb	r3, [r7, #2]
 8008594:	737b      	strb	r3, [r7, #13]
	message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 8008596:	787b      	ldrb	r3, [r7, #1]
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff ffb0 	bl	80084fe <isotp_ms_to_st_min>
 800859e:	4603      	mov	r3, r0
 80085a0:	73bb      	strb	r3, [r7, #14]
	/* send message */
#ifdef ISO_TP_FRAME_PADDING
	(void) memset(message.as.flow_control.reserve, 0,
 80085a2:	f107 030c 	add.w	r3, r7, #12
 80085a6:	3303      	adds	r3, #3
 80085a8:	2205      	movs	r2, #5
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fcc7 	bl	8008f40 <memset>
			sizeof(message.as.flow_control.reserve));
	ret = isotp_user_send_can(link->send_arbitration_id,
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f107 010c 	add.w	r1, r7, #12
 80085ba:	2208      	movs	r2, #8
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff ff61 	bl	8008484 <isotp_user_send_can>
 80085c2:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

	return ret;
 80085c4:	697b      	ldr	r3, [r7, #20]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <isotp_send_consecutive_frame>:
	}

	return ret;
}

static int isotp_send_consecutive_frame(IsoTpLink *link) {
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	IsoTpCanMessage message;
	uint16_t data_length;
	int ret;

	/* multi frame message length must greater than 7  */
	assert(link->send_size > 7);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	895b      	ldrh	r3, [r3, #10]
 80085dc:	2b07      	cmp	r3, #7
 80085de:	d805      	bhi.n	80085ec <isotp_send_consecutive_frame+0x1c>
 80085e0:	4b2d      	ldr	r3, [pc, #180]	; (8008698 <isotp_send_consecutive_frame+0xc8>)
 80085e2:	4a2e      	ldr	r2, [pc, #184]	; (800869c <isotp_send_consecutive_frame+0xcc>)
 80085e4:	219e      	movs	r1, #158	; 0x9e
 80085e6:	482e      	ldr	r0, [pc, #184]	; (80086a0 <isotp_send_consecutive_frame+0xd0>)
 80085e8:	f000 fb4a 	bl	8008c80 <__assert_func>

	/* setup message  */
	message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 80085ec:	7a3b      	ldrb	r3, [r7, #8]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f362 1307 	bfi	r3, r2, #4, #4
 80085f4:	723b      	strb	r3, [r7, #8]
	message.as.consecutive_frame.SN = link->send_sn;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	7b9b      	ldrb	r3, [r3, #14]
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	7a3b      	ldrb	r3, [r7, #8]
 8008602:	f362 0303 	bfi	r3, r2, #0, #4
 8008606:	723b      	strb	r3, [r7, #8]
	data_length = link->send_size - link->send_offset;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	895a      	ldrh	r2, [r3, #10]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	899b      	ldrh	r3, [r3, #12]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	82fb      	strh	r3, [r7, #22]
	if (data_length > sizeof(message.as.consecutive_frame.data)) {
 8008614:	8afb      	ldrh	r3, [r7, #22]
 8008616:	2b07      	cmp	r3, #7
 8008618:	d901      	bls.n	800861e <isotp_send_consecutive_frame+0x4e>
		data_length = sizeof(message.as.consecutive_frame.data);
 800861a:	2307      	movs	r3, #7
 800861c:	82fb      	strh	r3, [r7, #22]
	}
	(void) memcpy(message.as.consecutive_frame.data,
			link->send_buffer + link->send_offset, data_length);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	8992      	ldrh	r2, [r2, #12]
 8008626:	1899      	adds	r1, r3, r2
	(void) memcpy(message.as.consecutive_frame.data,
 8008628:	8afa      	ldrh	r2, [r7, #22]
 800862a:	f107 0308 	add.w	r3, r7, #8
 800862e:	3301      	adds	r3, #1
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fcff 	bl	8009034 <memcpy>

	/* send message */
#ifdef ISO_TP_FRAME_PADDING
	(void) memset(message.as.consecutive_frame.data + data_length, 0,
 8008636:	8afb      	ldrh	r3, [r7, #22]
 8008638:	f107 0208 	add.w	r2, r7, #8
 800863c:	3201      	adds	r2, #1
 800863e:	18d0      	adds	r0, r2, r3
 8008640:	8afb      	ldrh	r3, [r7, #22]
 8008642:	f1c3 0307 	rsb	r3, r3, #7
 8008646:	461a      	mov	r2, r3
 8008648:	2100      	movs	r1, #0
 800864a:	f000 fc79 	bl	8008f40 <memset>
			sizeof(message.as.consecutive_frame.data) - data_length);
	ret = isotp_user_send_can(link->send_arbitration_id,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f107 0108 	add.w	r1, r7, #8
 8008656:	2208      	movs	r2, #8
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff ff13 	bl	8008484 <isotp_user_send_can>
 800865e:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
	if (ISOTP_RET_OK == ret) {
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d113      	bne.n	800868e <isotp_send_consecutive_frame+0xbe>
		link->send_offset += data_length;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	899a      	ldrh	r2, [r3, #12]
 800866a:	8afb      	ldrh	r3, [r7, #22]
 800866c:	4413      	add	r3, r2
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	819a      	strh	r2, [r3, #12]
		if (++(link->send_sn) > 0x0F) {
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7b9b      	ldrb	r3, [r3, #14]
 8008678:	3301      	adds	r3, #1
 800867a:	b2da      	uxtb	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	739a      	strb	r2, [r3, #14]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	7b9b      	ldrb	r3, [r3, #14]
 8008684:	2b0f      	cmp	r3, #15
 8008686:	d902      	bls.n	800868e <isotp_send_consecutive_frame+0xbe>
			link->send_sn = 0;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	739a      	strb	r2, [r3, #14]
		}
	}

	return ret;
 800868e:	693b      	ldr	r3, [r7, #16]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	0800a10c 	.word	0x0800a10c
 800869c:	0800a35c 	.word	0x0800a35c
 80086a0:	0800a0f8 	.word	0x0800a0f8

080086a4 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message,
		uint8_t len) {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	71fb      	strb	r3, [r7, #7]
	/* check data length */
	if ((0 == message->as.single_frame.SF_DL)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	f003 030f 	and.w	r3, r3, #15
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d008      	beq.n	80086d2 <isotp_receive_single_frame+0x2e>
			|| (message->as.single_frame.SF_DL > (len - 1))) {
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	461a      	mov	r2, r3
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d805      	bhi.n	80086de <isotp_receive_single_frame+0x3a>
		isotp_user_debug("Single-frame length too small.");
 80086d2:	480f      	ldr	r0, [pc, #60]	; (8008710 <isotp_receive_single_frame+0x6c>)
 80086d4:	f7ff ff0b 	bl	80084ee <isotp_user_debug>
		return ISOTP_RET_LENGTH;
 80086d8:	f06f 0306 	mvn.w	r3, #6
 80086dc:	e014      	b.n	8008708 <isotp_receive_single_frame+0x64>
	}

	/* copying data */
	(void) memcpy(link->receive_buffer, message->as.single_frame.data,
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	1c59      	adds	r1, r3, #1
			message->as.single_frame.SF_DL);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80086ee:	b2db      	uxtb	r3, r3
	(void) memcpy(link->receive_buffer, message->as.single_frame.data,
 80086f0:	461a      	mov	r2, r3
 80086f2:	f000 fc9f 	bl	8009034 <memcpy>
	link->receive_size = message->as.single_frame.SF_DL;
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	b29a      	uxth	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	85da      	strh	r2, [r3, #46]	; 0x2e

	return ISOTP_RET_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	0800a120 	.word	0x0800a120

08008714 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message,
		uint8_t len) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4613      	mov	r3, r2
 8008720:	71fb      	strb	r3, [r7, #7]
	uint16_t payload_length;

	if (8 != len) {
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	2b08      	cmp	r3, #8
 8008726:	d005      	beq.n	8008734 <isotp_receive_first_frame+0x20>
		isotp_user_debug("First frame should be 8 bytes in length.");
 8008728:	481f      	ldr	r0, [pc, #124]	; (80087a8 <isotp_receive_first_frame+0x94>)
 800872a:	f7ff fee0 	bl	80084ee <isotp_user_debug>
		return ISOTP_RET_LENGTH;
 800872e:	f06f 0306 	mvn.w	r3, #6
 8008732:	e034      	b.n	800879e <isotp_receive_first_frame+0x8a>
	}

	/* check data length */
	payload_length = message->as.first_frame.FF_DL_high;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800873c:	b2db      	uxtb	r3, r3
 800873e:	82fb      	strh	r3, [r7, #22]
	payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 8008740:	8afb      	ldrh	r3, [r7, #22]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	b29a      	uxth	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	785b      	ldrb	r3, [r3, #1]
 800874a:	b29b      	uxth	r3, r3
 800874c:	4413      	add	r3, r2
 800874e:	82fb      	strh	r3, [r7, #22]

	/* should not use multiple frame transmition */
	if (payload_length <= 7) {
 8008750:	8afb      	ldrh	r3, [r7, #22]
 8008752:	2b07      	cmp	r3, #7
 8008754:	d805      	bhi.n	8008762 <isotp_receive_first_frame+0x4e>
		isotp_user_debug("Should not use multiple frame transmission.");
 8008756:	4815      	ldr	r0, [pc, #84]	; (80087ac <isotp_receive_first_frame+0x98>)
 8008758:	f7ff fec9 	bl	80084ee <isotp_user_debug>
		return ISOTP_RET_LENGTH;
 800875c:	f06f 0306 	mvn.w	r3, #6
 8008760:	e01d      	b.n	800879e <isotp_receive_first_frame+0x8a>
	}

	if (payload_length > link->receive_buf_size) {
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008766:	8afa      	ldrh	r2, [r7, #22]
 8008768:	429a      	cmp	r2, r3
 800876a:	d905      	bls.n	8008778 <isotp_receive_first_frame+0x64>
		isotp_user_debug(
 800876c:	4810      	ldr	r0, [pc, #64]	; (80087b0 <isotp_receive_first_frame+0x9c>)
 800876e:	f7ff febe 	bl	80084ee <isotp_user_debug>
				"Multi-frame response too large for receiving buffer.");
		return ISOTP_RET_OVERFLOW;
 8008772:	f06f 0302 	mvn.w	r3, #2
 8008776:	e012      	b.n	800879e <isotp_receive_first_frame+0x8a>
	}

	/* copying data */
	(void) memcpy(link->receive_buffer, message->as.first_frame.data,
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	3302      	adds	r3, #2
 8008780:	2206      	movs	r2, #6
 8008782:	4619      	mov	r1, r3
 8008784:	f000 fc56 	bl	8009034 <memcpy>
			sizeof(message->as.first_frame.data));
	link->receive_size = payload_length;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8afa      	ldrh	r2, [r7, #22]
 800878c:	85da      	strh	r2, [r3, #46]	; 0x2e
	link->receive_offset = sizeof(message->as.first_frame.data);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2206      	movs	r2, #6
 8008792:	861a      	strh	r2, [r3, #48]	; 0x30
	link->receive_sn = 1;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	return ISOTP_RET_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	0800a140 	.word	0x0800a140
 80087ac:	0800a16c 	.word	0x0800a16c
 80087b0:	0800a198 	.word	0x0800a198

080087b4 <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link,
		IsoTpCanMessage *message, uint8_t len) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	4613      	mov	r3, r2
 80087c0:	71fb      	strb	r3, [r7, #7]
	uint16_t remaining_bytes;

	/* check sn */
	if (link->receive_sn != message->as.consecutive_frame.SN) {
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	7812      	ldrb	r2, [r2, #0]
 80087cc:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d002      	beq.n	80087dc <isotp_receive_consecutive_frame+0x28>
		return ISOTP_RET_WRONG_SN;
 80087d6:	f06f 0303 	mvn.w	r3, #3
 80087da:	e038      	b.n	800884e <isotp_receive_consecutive_frame+0x9a>
	}

	/* check data length */
	remaining_bytes = link->receive_size - link->receive_offset;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	82fb      	strh	r3, [r7, #22]
	if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 80087e8:	8afb      	ldrh	r3, [r7, #22]
 80087ea:	2b07      	cmp	r3, #7
 80087ec:	d901      	bls.n	80087f2 <isotp_receive_consecutive_frame+0x3e>
		remaining_bytes = sizeof(message->as.consecutive_frame.data);
 80087ee:	2307      	movs	r3, #7
 80087f0:	82fb      	strh	r3, [r7, #22]
	}
	if (remaining_bytes > len - 1) {
 80087f2:	79fa      	ldrb	r2, [r7, #7]
 80087f4:	8afb      	ldrh	r3, [r7, #22]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	dc05      	bgt.n	8008806 <isotp_receive_consecutive_frame+0x52>
		isotp_user_debug("Consecutive frame too short.");
 80087fa:	4817      	ldr	r0, [pc, #92]	; (8008858 <isotp_receive_consecutive_frame+0xa4>)
 80087fc:	f7ff fe77 	bl	80084ee <isotp_user_debug>
		return ISOTP_RET_LENGTH;
 8008800:	f06f 0306 	mvn.w	r3, #6
 8008804:	e023      	b.n	800884e <isotp_receive_consecutive_frame+0x9a>
	}

	/* copying data */
	(void) memcpy(link->receive_buffer + link->receive_offset,
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800880e:	1898      	adds	r0, r3, r2
			message->as.consecutive_frame.data, remaining_bytes);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	3301      	adds	r3, #1
	(void) memcpy(link->receive_buffer + link->receive_offset,
 8008814:	8afa      	ldrh	r2, [r7, #22]
 8008816:	4619      	mov	r1, r3
 8008818:	f000 fc0c 	bl	8009034 <memcpy>

	link->receive_offset += remaining_bytes;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008820:	8afb      	ldrh	r3, [r7, #22]
 8008822:	4413      	add	r3, r2
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	861a      	strh	r2, [r3, #48]	; 0x30
	if (++(link->receive_sn) > 0x0F) {
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008830:	3301      	adds	r3, #1
 8008832:	b2da      	uxtb	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008840:	2b0f      	cmp	r3, #15
 8008842:	d903      	bls.n	800884c <isotp_receive_consecutive_frame+0x98>
		link->receive_sn = 0;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}

	return ISOTP_RET_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	0800a1d0 	.word	0x0800a1d0

0800885c <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link,
		IsoTpCanMessage *message, uint8_t len) {
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	71fb      	strb	r3, [r7, #7]
	/* check message length */
	if (len < 3) {
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	2b02      	cmp	r3, #2
 800886e:	d805      	bhi.n	800887c <isotp_receive_flow_control_frame+0x20>
		isotp_user_debug("Flow control frame too short.");
 8008870:	4805      	ldr	r0, [pc, #20]	; (8008888 <isotp_receive_flow_control_frame+0x2c>)
 8008872:	f7ff fe3c 	bl	80084ee <isotp_user_debug>
		return ISOTP_RET_LENGTH;
 8008876:	f06f 0306 	mvn.w	r3, #6
 800887a:	e000      	b.n	800887e <isotp_receive_flow_control_frame+0x22>
	}

	return ISOTP_RET_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	0800a1f0 	.word	0x0800a1f0

0800888c <isotp_on_can_message>:
	}

	return ret;
}

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	71fb      	strb	r3, [r7, #7]
	IsoTpCanMessage message;
	int ret;

	if (len < 2 || len > 8) {
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	2b01      	cmp	r3, #1
 800889e:	f240 8143 	bls.w	8008b28 <isotp_on_can_message+0x29c>
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	f200 813f 	bhi.w	8008b28 <isotp_on_can_message+0x29c>
		return;
	}

	memcpy(message.as.data_array.ptr, data, len);
 80088aa:	79fa      	ldrb	r2, [r7, #7]
 80088ac:	f107 0314 	add.w	r3, r7, #20
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fbbe 	bl	8009034 <memcpy>
	memset(message.as.data_array.ptr + len, 0,
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	f107 0214 	add.w	r2, r7, #20
 80088be:	18d0      	adds	r0, r2, r3
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	f1c3 0308 	rsb	r3, r3, #8
 80088c6:	461a      	mov	r2, r3
 80088c8:	2100      	movs	r1, #0
 80088ca:	f000 fb39 	bl	8008f40 <memset>
			sizeof(message.as.data_array.ptr) - len);

	switch (message.as.common.type) {
 80088ce:	7d3b      	ldrb	r3, [r7, #20]
 80088d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	f200 811a 	bhi.w	8008b10 <isotp_on_can_message+0x284>
 80088dc:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <isotp_on_can_message+0x58>)
 80088de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e2:	bf00      	nop
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	08008931 	.word	0x08008931
 80088ec:	080089b9 	.word	0x080089b9
 80088f0:	08008a57 	.word	0x08008a57
	case ISOTP_PCI_TYPE_SINGLE: {
		/* update protocol result */
		if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d104      	bne.n	8008908 <isotp_on_can_message+0x7c>
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f06f 0205 	mvn.w	r2, #5
 8008904:	639a      	str	r2, [r3, #56]	; 0x38
 8008906:	e002      	b.n	800890e <isotp_on_can_message+0x82>
		} else {
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	639a      	str	r2, [r3, #56]	; 0x38
		}

		/* handle message */
		ret = isotp_receive_single_frame(link, &message, len);
 800890e:	79fa      	ldrb	r2, [r7, #7]
 8008910:	f107 0314 	add.w	r3, r7, #20
 8008914:	4619      	mov	r1, r3
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f7ff fec4 	bl	80086a4 <isotp_receive_single_frame>
 800891c:	61f8      	str	r0, [r7, #28]

		if (ISOTP_RET_OK == ret) {
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	2b00      	cmp	r3, #0
 8008922:	f040 80f7 	bne.w	8008b14 <isotp_on_can_message+0x288>
			/* change status */
			link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2202      	movs	r2, #2
 800892a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
		break;
 800892e:	e0f1      	b.n	8008b14 <isotp_on_can_message+0x288>
	}
	case ISOTP_PCI_TYPE_FIRST_FRAME: {
		/* update protocol result */
		if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008936:	2b01      	cmp	r3, #1
 8008938:	d104      	bne.n	8008944 <isotp_on_can_message+0xb8>
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f06f 0205 	mvn.w	r2, #5
 8008940:	639a      	str	r2, [r3, #56]	; 0x38
 8008942:	e002      	b.n	800894a <isotp_on_can_message+0xbe>
		} else {
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	639a      	str	r2, [r3, #56]	; 0x38
		}

		/* handle message */
		ret = isotp_receive_first_frame(link, &message, len);
 800894a:	79fa      	ldrb	r2, [r7, #7]
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	4619      	mov	r1, r3
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff fede 	bl	8008714 <isotp_receive_first_frame>
 8008958:	61f8      	str	r0, [r7, #28]

		/* if overflow happened */
		if (ISOTP_RET_OVERFLOW == ret) {
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	f113 0f03 	cmn.w	r3, #3
 8008960:	d10e      	bne.n	8008980 <isotp_on_can_message+0xf4>
			/* update protocol result */
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f06f 0207 	mvn.w	r2, #7
 8008968:	639a      	str	r2, [r3, #56]	; 0x38
			/* change status */
			link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			/* send error message */
			isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 8008972:	2300      	movs	r3, #0
 8008974:	2200      	movs	r2, #0
 8008976:	2102      	movs	r1, #2
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f7ff fdf0 	bl	800855e <isotp_send_flow_control>
			break;
 800897e:	e0d2      	b.n	8008b26 <isotp_on_can_message+0x29a>
		}

		/* if receive successful */
		if (ISOTP_RET_OK == ret) {
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	2b00      	cmp	r3, #0
 8008984:	f040 80c8 	bne.w	8008b18 <isotp_on_can_message+0x28c>
			/* change status */
			link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			/* send fc frame */
			link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2208      	movs	r2, #8
 8008994:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE,
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800899e:	2300      	movs	r3, #0
 80089a0:	2100      	movs	r1, #0
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f7ff fddb 	bl	800855e <isotp_send_flow_control>
					link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
			/* refresh timer cs */
			link->receive_timer_cr =
					isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80089a8:	f7ff fd9a 	bl	80084e0 <isotp_user_get_ms>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f103 0264 	add.w	r2, r3, #100	; 0x64
			link->receive_timer_cr =
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	635a      	str	r2, [r3, #52]	; 0x34
		}

		break;
 80089b6:	e0af      	b.n	8008b18 <isotp_on_can_message+0x28c>
	}
	case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
		/* check if in receiving status */
		if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d004      	beq.n	80089cc <isotp_on_can_message+0x140>
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f06f 0205 	mvn.w	r2, #5
 80089c8:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80089ca:	e0ac      	b.n	8008b26 <isotp_on_can_message+0x29a>
		}

		/* handle message */
		ret = isotp_receive_consecutive_frame(link, &message, len);
 80089cc:	79fa      	ldrb	r2, [r7, #7]
 80089ce:	f107 0314 	add.w	r3, r7, #20
 80089d2:	4619      	mov	r1, r3
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f7ff feed 	bl	80087b4 <isotp_receive_consecutive_frame>
 80089da:	61f8      	str	r0, [r7, #28]

		/* if wrong sn */
		if (ISOTP_RET_WRONG_SN == ret) {
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f113 0f04 	cmn.w	r3, #4
 80089e2:	d108      	bne.n	80089f6 <isotp_on_can_message+0x16a>
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f06f 0203 	mvn.w	r2, #3
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38
			link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			break;
 80089f4:	e097      	b.n	8008b26 <isotp_on_can_message+0x29a>
		}

		/* if success */
		if (ISOTP_RET_OK == ret) {
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f040 808f 	bne.w	8008b1c <isotp_on_can_message+0x290>
			/* refresh timer cs */
			link->receive_timer_cr =
					isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80089fe:	f7ff fd6f 	bl	80084e0 <isotp_user_get_ms>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f103 0264 	add.w	r2, r3, #100	; 0x64
			link->receive_timer_cr =
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	635a      	str	r2, [r3, #52]	; 0x34

			/* receive finished */
			if (link->receive_offset >= link->receive_size) {
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d304      	bcc.n	8008a22 <isotp_on_can_message+0x196>
				link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
							link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
				}
			}
		}

		break;
 8008a20:	e07c      	b.n	8008b1c <isotp_on_can_message+0x290>
				if (0 == --link->receive_bs_count) {
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d16f      	bne.n	8008b1c <isotp_on_can_message+0x290>
					link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2208      	movs	r2, #8
 8008a40:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
					isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE,
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7ff fd85 	bl	800855e <isotp_send_flow_control>
		break;
 8008a54:	e062      	b.n	8008b1c <isotp_on_can_message+0x290>
	}
	case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
//		SyncPrintf("Recv flow control frame\r\n");
		/* handle fc frame only when sending in progress  */
		if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d15f      	bne.n	8008b20 <isotp_on_can_message+0x294>
//			SyncPrintf("Break\r\n");
			break;
		}

		/* handle message */
		ret = isotp_receive_flow_control_frame(link, &message, len);
 8008a60:	79fa      	ldrb	r2, [r7, #7]
 8008a62:	f107 0314 	add.w	r3, r7, #20
 8008a66:	4619      	mov	r1, r3
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7ff fef7 	bl	800885c <isotp_receive_flow_control_frame>
 8008a6e:	61f8      	str	r0, [r7, #28]

		if (ISOTP_RET_OK == ret) {
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d156      	bne.n	8008b24 <isotp_on_can_message+0x298>
			/* refresh bs timer */
			link->send_timer_bs =
					isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8008a76:	f7ff fd33 	bl	80084e0 <isotp_user_get_ms>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	f103 0264 	add.w	r2, r3, #100	; 0x64
			link->send_timer_bs =
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	619a      	str	r2, [r3, #24]

			/* overflow */
			if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 8008a84:	7d3b      	ldrb	r3, [r7, #20]
 8008a86:	f003 030f 	and.w	r3, r3, #15
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d108      	bne.n	8008aa2 <isotp_on_can_message+0x216>
				link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f06f 0207 	mvn.w	r2, #7
 8008a96:	61da      	str	r2, [r3, #28]
				link->send_status = ISOTP_SEND_STATUS_ERROR;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 2020 	strb.w	r2, [r3, #32]
				link->send_st_min = isotp_st_min_to_ms(
						message.as.flow_control.STmin);
				link->send_wtf_count = 0;
			}
		}
		break;
 8008aa0:	e040      	b.n	8008b24 <isotp_on_can_message+0x298>
			else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 8008aa2:	7d3b      	ldrb	r3, [r7, #20]
 8008aa4:	f003 030f 	and.w	r3, r3, #15
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d112      	bne.n	8008ad4 <isotp_on_can_message+0x248>
				link->send_wtf_count += 1;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	7cdb      	ldrb	r3, [r3, #19]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	74da      	strb	r2, [r3, #19]
				if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	7cdb      	ldrb	r3, [r3, #19]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d930      	bls.n	8008b24 <isotp_on_can_message+0x298>
					link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f06f 0206 	mvn.w	r2, #6
 8008ac8:	61da      	str	r2, [r3, #28]
					link->send_status = ISOTP_SEND_STATUS_ERROR;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2202      	movs	r2, #2
 8008ace:	f883 2020 	strb.w	r2, [r3, #32]
		break;
 8008ad2:	e027      	b.n	8008b24 <isotp_on_can_message+0x298>
			else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 8008ad4:	7d3b      	ldrb	r3, [r7, #20]
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d121      	bne.n	8008b24 <isotp_on_can_message+0x298>
				if (0 == message.as.flow_control.BS) {
 8008ae0:	7d7b      	ldrb	r3, [r7, #21]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d104      	bne.n	8008af0 <isotp_on_can_message+0x264>
					link->send_bs_remain = ISOTP_INVALID_BS;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aec:	821a      	strh	r2, [r3, #16]
 8008aee:	e003      	b.n	8008af8 <isotp_on_can_message+0x26c>
					link->send_bs_remain = message.as.flow_control.BS;
 8008af0:	7d7b      	ldrb	r3, [r7, #21]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	821a      	strh	r2, [r3, #16]
				link->send_st_min = isotp_st_min_to_ms(
 8008af8:	7dbb      	ldrb	r3, [r7, #22]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff fd12 	bl	8008524 <isotp_st_min_to_ms>
 8008b00:	4603      	mov	r3, r0
 8008b02:	461a      	mov	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	749a      	strb	r2, [r3, #18]
				link->send_wtf_count = 0;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	74da      	strb	r2, [r3, #19]
		break;
 8008b0e:	e009      	b.n	8008b24 <isotp_on_can_message+0x298>
	default:
		break;
 8008b10:	bf00      	nop
 8008b12:	e00a      	b.n	8008b2a <isotp_on_can_message+0x29e>
		break;
 8008b14:	bf00      	nop
 8008b16:	e008      	b.n	8008b2a <isotp_on_can_message+0x29e>
		break;
 8008b18:	bf00      	nop
 8008b1a:	e006      	b.n	8008b2a <isotp_on_can_message+0x29e>
		break;
 8008b1c:	bf00      	nop
 8008b1e:	e004      	b.n	8008b2a <isotp_on_can_message+0x29e>
			break;
 8008b20:	bf00      	nop
 8008b22:	e002      	b.n	8008b2a <isotp_on_can_message+0x29e>
		break;
 8008b24:	bf00      	nop
	};

	return;
 8008b26:	e000      	b.n	8008b2a <isotp_on_can_message+0x29e>
		return;
 8008b28:	bf00      	nop
}
 8008b2a:	3720      	adds	r7, #32
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <isotp_init_link>:

	return ISOTP_RET_OK;
}

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf,
		uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	807b      	strh	r3, [r7, #2]
	memset(link, 0, sizeof(IsoTpLink));
 8008b3e:	2240      	movs	r2, #64	; 0x40
 8008b40:	2100      	movs	r1, #0
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 f9fc 	bl	8008f40 <memset>
	link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	link->send_status = ISOTP_SEND_STATUS_IDLE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2020 	strb.w	r2, [r3, #32]
	link->send_arbitration_id = sendid;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	601a      	str	r2, [r3, #0]
	link->send_buffer = sendbuf;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	605a      	str	r2, [r3, #4]
	link->send_buf_size = sendbufsize;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	887a      	ldrh	r2, [r7, #2]
 8008b68:	811a      	strh	r2, [r3, #8]
	link->receive_buffer = recvbuf;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	629a      	str	r2, [r3, #40]	; 0x28
	link->receive_buf_size = recvbufsize;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8bba      	ldrh	r2, [r7, #28]
 8008b74:	859a      	strh	r2, [r3, #44]	; 0x2c

	return;
 8008b76:	bf00      	nop
}
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 8008b7e:	b590      	push	{r4, r7, lr}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
	int ret;
//	SyncPrintf("Polling message\r\n");

	/* only polling when operation in progress */
	if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d15c      	bne.n	8008c4a <isotp_poll+0xcc>

		/* continue send data */
		if (/* send data if bs_remain is invalid or bs_remain large than zero */
		(ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	8a1b      	ldrh	r3, [r3, #16]
		if (/* send data if bs_remain is invalid or bs_remain large than zero */
 8008b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d003      	beq.n	8008ba4 <isotp_poll+0x26>
		(ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	8a1b      	ldrh	r3, [r3, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d041      	beq.n	8008c28 <isotp_poll+0xaa>
				&&
				/* and if st_min is zero or go beyond interval time */
				(0 == link->send_st_min
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	7c9b      	ldrb	r3, [r3, #18]
				&&
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00c      	beq.n	8008bc6 <isotp_poll+0x48>
						|| (0 != link->send_st_min
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	7c9b      	ldrb	r3, [r3, #18]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d039      	beq.n	8008c28 <isotp_poll+0xaa>
								&& IsoTpTimeAfter(isotp_user_get_ms(),
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	461c      	mov	r4, r3
 8008bba:	f7ff fc91 	bl	80084e0 <isotp_user_get_ms>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	1ae3      	subs	r3, r4, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	da30      	bge.n	8008c28 <isotp_poll+0xaa>
										link->send_timer_st)))) {

			ret = isotp_send_consecutive_frame(link);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff fd02 	bl	80085d0 <isotp_send_consecutive_frame>
 8008bcc:	60f8      	str	r0, [r7, #12]
//			SyncPrintf("Send consecutive frame\r\n");
			if (ISOTP_RET_OK == ret) {
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d125      	bne.n	8008c20 <isotp_poll+0xa2>
				if (ISOTP_INVALID_BS != link->send_bs_remain) {
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	8a1b      	ldrh	r3, [r3, #16]
 8008bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d005      	beq.n	8008bec <isotp_poll+0x6e>
					link->send_bs_remain -= 1;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	8a1b      	ldrh	r3, [r3, #16]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	821a      	strh	r2, [r3, #16]
				}
				link->send_timer_bs =
						isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8008bec:	f7ff fc78 	bl	80084e0 <isotp_user_get_ms>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f103 0264 	add.w	r2, r3, #100	; 0x64
				link->send_timer_bs =
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	619a      	str	r2, [r3, #24]
				link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 8008bfa:	f7ff fc71 	bl	80084e0 <isotp_user_get_ms>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7c9b      	ldrb	r3, [r3, #18]
 8008c04:	441a      	add	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	615a      	str	r2, [r3, #20]

				/* check if send finish */
				if (link->send_offset >= link->send_size) {
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	899a      	ldrh	r2, [r3, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	895b      	ldrh	r3, [r3, #10]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d308      	bcc.n	8008c28 <isotp_poll+0xaa>
					link->send_status = ISOTP_SEND_STATUS_IDLE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2020 	strb.w	r2, [r3, #32]
 8008c1e:	e003      	b.n	8008c28 <isotp_poll+0xaa>
				}
			} else {
				link->send_status = ISOTP_SEND_STATUS_ERROR;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}

		/* check timeout */
		if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	461c      	mov	r4, r3
 8008c2e:	f7ff fc57 	bl	80084e0 <isotp_user_get_ms>
 8008c32:	4603      	mov	r3, r0
 8008c34:	1ae3      	subs	r3, r4, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da07      	bge.n	8008c4a <isotp_poll+0xcc>
//			SyncPrintf("Frame time out\r\n");
			link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f06f 0201 	mvn.w	r2, #1
 8008c40:	61da      	str	r2, [r3, #28]
			link->send_status = ISOTP_SEND_STATUS_ERROR;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 2020 	strb.w	r2, [r3, #32]
		}

	}

	/* only polling when operation in progress */
	if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d111      	bne.n	8008c78 <isotp_poll+0xfa>

		/* check timeout */
		if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c58:	461c      	mov	r4, r3
 8008c5a:	f7ff fc41 	bl	80084e0 <isotp_user_get_ms>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	1ae3      	subs	r3, r4, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	da08      	bge.n	8008c78 <isotp_poll+0xfa>
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f06f 0202 	mvn.w	r2, #2
 8008c6c:	639a      	str	r2, [r3, #56]	; 0x38
			link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
	}
//	osDelay(0);
	return;
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
}
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd90      	pop	{r4, r7, pc}

08008c80 <__assert_func>:
 8008c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c82:	4614      	mov	r4, r2
 8008c84:	461a      	mov	r2, r3
 8008c86:	4b09      	ldr	r3, [pc, #36]	; (8008cac <__assert_func+0x2c>)
 8008c88:	4605      	mov	r5, r0
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68d8      	ldr	r0, [r3, #12]
 8008c8e:	b14c      	cbz	r4, 8008ca4 <__assert_func+0x24>
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <__assert_func+0x30>)
 8008c92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c96:	9100      	str	r1, [sp, #0]
 8008c98:	462b      	mov	r3, r5
 8008c9a:	4906      	ldr	r1, [pc, #24]	; (8008cb4 <__assert_func+0x34>)
 8008c9c:	f000 f8a0 	bl	8008de0 <fiprintf>
 8008ca0:	f000 f9d6 	bl	8009050 <abort>
 8008ca4:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <__assert_func+0x38>)
 8008ca6:	461c      	mov	r4, r3
 8008ca8:	e7f3      	b.n	8008c92 <__assert_func+0x12>
 8008caa:	bf00      	nop
 8008cac:	20000068 	.word	0x20000068
 8008cb0:	0800a379 	.word	0x0800a379
 8008cb4:	0800a386 	.word	0x0800a386
 8008cb8:	0800a3b4 	.word	0x0800a3b4

08008cbc <std>:
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	b510      	push	{r4, lr}
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8008cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cca:	6083      	str	r3, [r0, #8]
 8008ccc:	8181      	strh	r1, [r0, #12]
 8008cce:	6643      	str	r3, [r0, #100]	; 0x64
 8008cd0:	81c2      	strh	r2, [r0, #14]
 8008cd2:	6183      	str	r3, [r0, #24]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	2208      	movs	r2, #8
 8008cd8:	305c      	adds	r0, #92	; 0x5c
 8008cda:	f000 f931 	bl	8008f40 <memset>
 8008cde:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <std+0x38>)
 8008ce0:	6224      	str	r4, [r4, #32]
 8008ce2:	6263      	str	r3, [r4, #36]	; 0x24
 8008ce4:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <std+0x3c>)
 8008ce6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ce8:	4b04      	ldr	r3, [pc, #16]	; (8008cfc <std+0x40>)
 8008cea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cec:	4b04      	ldr	r3, [pc, #16]	; (8008d00 <std+0x44>)
 8008cee:	6323      	str	r3, [r4, #48]	; 0x30
 8008cf0:	bd10      	pop	{r4, pc}
 8008cf2:	bf00      	nop
 8008cf4:	08008e41 	.word	0x08008e41
 8008cf8:	08008e63 	.word	0x08008e63
 8008cfc:	08008e9b 	.word	0x08008e9b
 8008d00:	08008ebf 	.word	0x08008ebf

08008d04 <stdio_exit_handler>:
 8008d04:	4a02      	ldr	r2, [pc, #8]	; (8008d10 <stdio_exit_handler+0xc>)
 8008d06:	4903      	ldr	r1, [pc, #12]	; (8008d14 <stdio_exit_handler+0x10>)
 8008d08:	4803      	ldr	r0, [pc, #12]	; (8008d18 <stdio_exit_handler+0x14>)
 8008d0a:	f000 b87b 	b.w	8008e04 <_fwalk_sglue>
 8008d0e:	bf00      	nop
 8008d10:	20000010 	.word	0x20000010
 8008d14:	08009ba9 	.word	0x08009ba9
 8008d18:	2000001c 	.word	0x2000001c

08008d1c <cleanup_stdio>:
 8008d1c:	6841      	ldr	r1, [r0, #4]
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <cleanup_stdio+0x34>)
 8008d20:	b510      	push	{r4, lr}
 8008d22:	4299      	cmp	r1, r3
 8008d24:	4604      	mov	r4, r0
 8008d26:	d001      	beq.n	8008d2c <cleanup_stdio+0x10>
 8008d28:	f000 ff3e 	bl	8009ba8 <_fflush_r>
 8008d2c:	68a1      	ldr	r1, [r4, #8]
 8008d2e:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <cleanup_stdio+0x38>)
 8008d30:	4299      	cmp	r1, r3
 8008d32:	d002      	beq.n	8008d3a <cleanup_stdio+0x1e>
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 ff37 	bl	8009ba8 <_fflush_r>
 8008d3a:	68e1      	ldr	r1, [r4, #12]
 8008d3c:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <cleanup_stdio+0x3c>)
 8008d3e:	4299      	cmp	r1, r3
 8008d40:	d004      	beq.n	8008d4c <cleanup_stdio+0x30>
 8008d42:	4620      	mov	r0, r4
 8008d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d48:	f000 bf2e 	b.w	8009ba8 <_fflush_r>
 8008d4c:	bd10      	pop	{r4, pc}
 8008d4e:	bf00      	nop
 8008d50:	20003674 	.word	0x20003674
 8008d54:	200036dc 	.word	0x200036dc
 8008d58:	20003744 	.word	0x20003744

08008d5c <global_stdio_init.part.0>:
 8008d5c:	b510      	push	{r4, lr}
 8008d5e:	4b0b      	ldr	r3, [pc, #44]	; (8008d8c <global_stdio_init.part.0+0x30>)
 8008d60:	4c0b      	ldr	r4, [pc, #44]	; (8008d90 <global_stdio_init.part.0+0x34>)
 8008d62:	4a0c      	ldr	r2, [pc, #48]	; (8008d94 <global_stdio_init.part.0+0x38>)
 8008d64:	4620      	mov	r0, r4
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	2104      	movs	r1, #4
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f7ff ffa6 	bl	8008cbc <std>
 8008d70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d74:	2201      	movs	r2, #1
 8008d76:	2109      	movs	r1, #9
 8008d78:	f7ff ffa0 	bl	8008cbc <std>
 8008d7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008d80:	2202      	movs	r2, #2
 8008d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d86:	2112      	movs	r1, #18
 8008d88:	f7ff bf98 	b.w	8008cbc <std>
 8008d8c:	200037ac 	.word	0x200037ac
 8008d90:	20003674 	.word	0x20003674
 8008d94:	08008d05 	.word	0x08008d05

08008d98 <__sfp_lock_acquire>:
 8008d98:	4801      	ldr	r0, [pc, #4]	; (8008da0 <__sfp_lock_acquire+0x8>)
 8008d9a:	f000 b949 	b.w	8009030 <__retarget_lock_acquire_recursive>
 8008d9e:	bf00      	nop
 8008da0:	200037b5 	.word	0x200037b5

08008da4 <__sfp_lock_release>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__sfp_lock_release+0x8>)
 8008da6:	f000 b944 	b.w	8009032 <__retarget_lock_release_recursive>
 8008daa:	bf00      	nop
 8008dac:	200037b5 	.word	0x200037b5

08008db0 <__sinit>:
 8008db0:	b510      	push	{r4, lr}
 8008db2:	4604      	mov	r4, r0
 8008db4:	f7ff fff0 	bl	8008d98 <__sfp_lock_acquire>
 8008db8:	6a23      	ldr	r3, [r4, #32]
 8008dba:	b11b      	cbz	r3, 8008dc4 <__sinit+0x14>
 8008dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc0:	f7ff bff0 	b.w	8008da4 <__sfp_lock_release>
 8008dc4:	4b04      	ldr	r3, [pc, #16]	; (8008dd8 <__sinit+0x28>)
 8008dc6:	6223      	str	r3, [r4, #32]
 8008dc8:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <__sinit+0x2c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1f5      	bne.n	8008dbc <__sinit+0xc>
 8008dd0:	f7ff ffc4 	bl	8008d5c <global_stdio_init.part.0>
 8008dd4:	e7f2      	b.n	8008dbc <__sinit+0xc>
 8008dd6:	bf00      	nop
 8008dd8:	08008d1d 	.word	0x08008d1d
 8008ddc:	200037ac 	.word	0x200037ac

08008de0 <fiprintf>:
 8008de0:	b40e      	push	{r1, r2, r3}
 8008de2:	b503      	push	{r0, r1, lr}
 8008de4:	4601      	mov	r1, r0
 8008de6:	ab03      	add	r3, sp, #12
 8008de8:	4805      	ldr	r0, [pc, #20]	; (8008e00 <fiprintf+0x20>)
 8008dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dee:	6800      	ldr	r0, [r0, #0]
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	f000 fba9 	bl	8009548 <_vfiprintf_r>
 8008df6:	b002      	add	sp, #8
 8008df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dfc:	b003      	add	sp, #12
 8008dfe:	4770      	bx	lr
 8008e00:	20000068 	.word	0x20000068

08008e04 <_fwalk_sglue>:
 8008e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e08:	4607      	mov	r7, r0
 8008e0a:	4688      	mov	r8, r1
 8008e0c:	4614      	mov	r4, r2
 8008e0e:	2600      	movs	r6, #0
 8008e10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e14:	f1b9 0901 	subs.w	r9, r9, #1
 8008e18:	d505      	bpl.n	8008e26 <_fwalk_sglue+0x22>
 8008e1a:	6824      	ldr	r4, [r4, #0]
 8008e1c:	2c00      	cmp	r4, #0
 8008e1e:	d1f7      	bne.n	8008e10 <_fwalk_sglue+0xc>
 8008e20:	4630      	mov	r0, r6
 8008e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e26:	89ab      	ldrh	r3, [r5, #12]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d907      	bls.n	8008e3c <_fwalk_sglue+0x38>
 8008e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e30:	3301      	adds	r3, #1
 8008e32:	d003      	beq.n	8008e3c <_fwalk_sglue+0x38>
 8008e34:	4629      	mov	r1, r5
 8008e36:	4638      	mov	r0, r7
 8008e38:	47c0      	blx	r8
 8008e3a:	4306      	orrs	r6, r0
 8008e3c:	3568      	adds	r5, #104	; 0x68
 8008e3e:	e7e9      	b.n	8008e14 <_fwalk_sglue+0x10>

08008e40 <__sread>:
 8008e40:	b510      	push	{r4, lr}
 8008e42:	460c      	mov	r4, r1
 8008e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e48:	f000 f8a4 	bl	8008f94 <_read_r>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	bfab      	itete	ge
 8008e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e52:	89a3      	ldrhlt	r3, [r4, #12]
 8008e54:	181b      	addge	r3, r3, r0
 8008e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e5a:	bfac      	ite	ge
 8008e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e5e:	81a3      	strhlt	r3, [r4, #12]
 8008e60:	bd10      	pop	{r4, pc}

08008e62 <__swrite>:
 8008e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e66:	461f      	mov	r7, r3
 8008e68:	898b      	ldrh	r3, [r1, #12]
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	05db      	lsls	r3, r3, #23
 8008e6e:	460c      	mov	r4, r1
 8008e70:	4616      	mov	r6, r2
 8008e72:	d505      	bpl.n	8008e80 <__swrite+0x1e>
 8008e74:	2302      	movs	r3, #2
 8008e76:	2200      	movs	r2, #0
 8008e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7c:	f000 f878 	bl	8008f70 <_lseek_r>
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	4632      	mov	r2, r6
 8008e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e88:	81a3      	strh	r3, [r4, #12]
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e96:	f000 b88f 	b.w	8008fb8 <_write_r>

08008e9a <__sseek>:
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea2:	f000 f865 	bl	8008f70 <_lseek_r>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	bf15      	itete	ne
 8008eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008eb6:	81a3      	strheq	r3, [r4, #12]
 8008eb8:	bf18      	it	ne
 8008eba:	81a3      	strhne	r3, [r4, #12]
 8008ebc:	bd10      	pop	{r4, pc}

08008ebe <__sclose>:
 8008ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec2:	f000 b845 	b.w	8008f50 <_close_r>

08008ec6 <_vasniprintf_r>:
 8008ec6:	b530      	push	{r4, r5, lr}
 8008ec8:	4615      	mov	r5, r2
 8008eca:	b09b      	sub	sp, #108	; 0x6c
 8008ecc:	461a      	mov	r2, r3
 8008ece:	682c      	ldr	r4, [r5, #0]
 8008ed0:	b189      	cbz	r1, 8008ef6 <_vasniprintf_r+0x30>
 8008ed2:	2c00      	cmp	r4, #0
 8008ed4:	bf12      	itee	ne
 8008ed6:	f44f 63c1 	movne.w	r3, #1544	; 0x608
 8008eda:	f44f 7322 	moveq.w	r3, #648	; 0x288
 8008ede:	2100      	moveq	r1, #0
 8008ee0:	2c00      	cmp	r4, #0
 8008ee2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008ee6:	9100      	str	r1, [sp, #0]
 8008ee8:	9104      	str	r1, [sp, #16]
 8008eea:	da08      	bge.n	8008efe <_vasniprintf_r+0x38>
 8008eec:	238b      	movs	r3, #139	; 0x8b
 8008eee:	6003      	str	r3, [r0, #0]
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	b01b      	add	sp, #108	; 0x6c
 8008ef4:	bd30      	pop	{r4, r5, pc}
 8008ef6:	f44f 7322 	mov.w	r3, #648	; 0x288
 8008efa:	460c      	mov	r4, r1
 8008efc:	e7f0      	b.n	8008ee0 <_vasniprintf_r+0x1a>
 8008efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f02:	4669      	mov	r1, sp
 8008f04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008f08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008f0a:	9402      	str	r4, [sp, #8]
 8008f0c:	9405      	str	r4, [sp, #20]
 8008f0e:	f000 f9f5 	bl	80092fc <_svfiprintf_r>
 8008f12:	1e03      	subs	r3, r0, #0
 8008f14:	f04f 0000 	mov.w	r0, #0
 8008f18:	bfa1      	itttt	ge
 8008f1a:	602b      	strge	r3, [r5, #0]
 8008f1c:	9b00      	ldrge	r3, [sp, #0]
 8008f1e:	7018      	strbge	r0, [r3, #0]
 8008f20:	9804      	ldrge	r0, [sp, #16]
 8008f22:	e7e6      	b.n	8008ef2 <_vasniprintf_r+0x2c>

08008f24 <vasniprintf>:
 8008f24:	b507      	push	{r0, r1, r2, lr}
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	460a      	mov	r2, r1
 8008f2c:	4601      	mov	r1, r0
 8008f2e:	4803      	ldr	r0, [pc, #12]	; (8008f3c <vasniprintf+0x18>)
 8008f30:	6800      	ldr	r0, [r0, #0]
 8008f32:	f7ff ffc8 	bl	8008ec6 <_vasniprintf_r>
 8008f36:	b003      	add	sp, #12
 8008f38:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f3c:	20000068 	.word	0x20000068

08008f40 <memset>:
 8008f40:	4603      	mov	r3, r0
 8008f42:	4402      	add	r2, r0
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d100      	bne.n	8008f4a <memset+0xa>
 8008f48:	4770      	bx	lr
 8008f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4e:	e7f9      	b.n	8008f44 <memset+0x4>

08008f50 <_close_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	2300      	movs	r3, #0
 8008f54:	4d05      	ldr	r5, [pc, #20]	; (8008f6c <_close_r+0x1c>)
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	f7f7 fca4 	bl	80008a8 <_close>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_close_r+0x1a>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_close_r+0x1a>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	200037b0 	.word	0x200037b0

08008f70 <_lseek_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4604      	mov	r4, r0
 8008f74:	4608      	mov	r0, r1
 8008f76:	4611      	mov	r1, r2
 8008f78:	2200      	movs	r2, #0
 8008f7a:	4d05      	ldr	r5, [pc, #20]	; (8008f90 <_lseek_r+0x20>)
 8008f7c:	602a      	str	r2, [r5, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f7f7 fcb6 	bl	80008f0 <_lseek>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_lseek_r+0x1e>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_lseek_r+0x1e>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	200037b0 	.word	0x200037b0

08008f94 <_read_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4604      	mov	r4, r0
 8008f98:	4608      	mov	r0, r1
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4d05      	ldr	r5, [pc, #20]	; (8008fb4 <_read_r+0x20>)
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f7f7 fc47 	bl	8000836 <_read>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_read_r+0x1e>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_read_r+0x1e>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	200037b0 	.word	0x200037b0

08008fb8 <_write_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4d05      	ldr	r5, [pc, #20]	; (8008fd8 <_write_r+0x20>)
 8008fc4:	602a      	str	r2, [r5, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	f7f7 fc52 	bl	8000870 <_write>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d102      	bne.n	8008fd6 <_write_r+0x1e>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	b103      	cbz	r3, 8008fd6 <_write_r+0x1e>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	200037b0 	.word	0x200037b0

08008fdc <__errno>:
 8008fdc:	4b01      	ldr	r3, [pc, #4]	; (8008fe4 <__errno+0x8>)
 8008fde:	6818      	ldr	r0, [r3, #0]
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000068 	.word	0x20000068

08008fe8 <__libc_init_array>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	2600      	movs	r6, #0
 8008fec:	4d0c      	ldr	r5, [pc, #48]	; (8009020 <__libc_init_array+0x38>)
 8008fee:	4c0d      	ldr	r4, [pc, #52]	; (8009024 <__libc_init_array+0x3c>)
 8008ff0:	1b64      	subs	r4, r4, r5
 8008ff2:	10a4      	asrs	r4, r4, #2
 8008ff4:	42a6      	cmp	r6, r4
 8008ff6:	d109      	bne.n	800900c <__libc_init_array+0x24>
 8008ff8:	f000 ffca 	bl	8009f90 <_init>
 8008ffc:	2600      	movs	r6, #0
 8008ffe:	4d0a      	ldr	r5, [pc, #40]	; (8009028 <__libc_init_array+0x40>)
 8009000:	4c0a      	ldr	r4, [pc, #40]	; (800902c <__libc_init_array+0x44>)
 8009002:	1b64      	subs	r4, r4, r5
 8009004:	10a4      	asrs	r4, r4, #2
 8009006:	42a6      	cmp	r6, r4
 8009008:	d105      	bne.n	8009016 <__libc_init_array+0x2e>
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009010:	4798      	blx	r3
 8009012:	3601      	adds	r6, #1
 8009014:	e7ee      	b.n	8008ff4 <__libc_init_array+0xc>
 8009016:	f855 3b04 	ldr.w	r3, [r5], #4
 800901a:	4798      	blx	r3
 800901c:	3601      	adds	r6, #1
 800901e:	e7f2      	b.n	8009006 <__libc_init_array+0x1e>
 8009020:	0800a3e8 	.word	0x0800a3e8
 8009024:	0800a3e8 	.word	0x0800a3e8
 8009028:	0800a3e8 	.word	0x0800a3e8
 800902c:	0800a3ec 	.word	0x0800a3ec

08009030 <__retarget_lock_acquire_recursive>:
 8009030:	4770      	bx	lr

08009032 <__retarget_lock_release_recursive>:
 8009032:	4770      	bx	lr

08009034 <memcpy>:
 8009034:	440a      	add	r2, r1
 8009036:	4291      	cmp	r1, r2
 8009038:	f100 33ff 	add.w	r3, r0, #4294967295
 800903c:	d100      	bne.n	8009040 <memcpy+0xc>
 800903e:	4770      	bx	lr
 8009040:	b510      	push	{r4, lr}
 8009042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009046:	4291      	cmp	r1, r2
 8009048:	f803 4f01 	strb.w	r4, [r3, #1]!
 800904c:	d1f9      	bne.n	8009042 <memcpy+0xe>
 800904e:	bd10      	pop	{r4, pc}

08009050 <abort>:
 8009050:	2006      	movs	r0, #6
 8009052:	b508      	push	{r3, lr}
 8009054:	f000 fea8 	bl	8009da8 <raise>
 8009058:	2001      	movs	r0, #1
 800905a:	f7f7 fbe2 	bl	8000822 <_exit>
	...

08009060 <_free_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4605      	mov	r5, r0
 8009064:	2900      	cmp	r1, #0
 8009066:	d040      	beq.n	80090ea <_free_r+0x8a>
 8009068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906c:	1f0c      	subs	r4, r1, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfb8      	it	lt
 8009072:	18e4      	addlt	r4, r4, r3
 8009074:	f000 f8dc 	bl	8009230 <__malloc_lock>
 8009078:	4a1c      	ldr	r2, [pc, #112]	; (80090ec <_free_r+0x8c>)
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	b933      	cbnz	r3, 800908c <_free_r+0x2c>
 800907e:	6063      	str	r3, [r4, #4]
 8009080:	6014      	str	r4, [r2, #0]
 8009082:	4628      	mov	r0, r5
 8009084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009088:	f000 b8d8 	b.w	800923c <__malloc_unlock>
 800908c:	42a3      	cmp	r3, r4
 800908e:	d908      	bls.n	80090a2 <_free_r+0x42>
 8009090:	6820      	ldr	r0, [r4, #0]
 8009092:	1821      	adds	r1, r4, r0
 8009094:	428b      	cmp	r3, r1
 8009096:	bf01      	itttt	eq
 8009098:	6819      	ldreq	r1, [r3, #0]
 800909a:	685b      	ldreq	r3, [r3, #4]
 800909c:	1809      	addeq	r1, r1, r0
 800909e:	6021      	streq	r1, [r4, #0]
 80090a0:	e7ed      	b.n	800907e <_free_r+0x1e>
 80090a2:	461a      	mov	r2, r3
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	b10b      	cbz	r3, 80090ac <_free_r+0x4c>
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	d9fa      	bls.n	80090a2 <_free_r+0x42>
 80090ac:	6811      	ldr	r1, [r2, #0]
 80090ae:	1850      	adds	r0, r2, r1
 80090b0:	42a0      	cmp	r0, r4
 80090b2:	d10b      	bne.n	80090cc <_free_r+0x6c>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	4401      	add	r1, r0
 80090b8:	1850      	adds	r0, r2, r1
 80090ba:	4283      	cmp	r3, r0
 80090bc:	6011      	str	r1, [r2, #0]
 80090be:	d1e0      	bne.n	8009082 <_free_r+0x22>
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	4408      	add	r0, r1
 80090c6:	6010      	str	r0, [r2, #0]
 80090c8:	6053      	str	r3, [r2, #4]
 80090ca:	e7da      	b.n	8009082 <_free_r+0x22>
 80090cc:	d902      	bls.n	80090d4 <_free_r+0x74>
 80090ce:	230c      	movs	r3, #12
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	e7d6      	b.n	8009082 <_free_r+0x22>
 80090d4:	6820      	ldr	r0, [r4, #0]
 80090d6:	1821      	adds	r1, r4, r0
 80090d8:	428b      	cmp	r3, r1
 80090da:	bf01      	itttt	eq
 80090dc:	6819      	ldreq	r1, [r3, #0]
 80090de:	685b      	ldreq	r3, [r3, #4]
 80090e0:	1809      	addeq	r1, r1, r0
 80090e2:	6021      	streq	r1, [r4, #0]
 80090e4:	6063      	str	r3, [r4, #4]
 80090e6:	6054      	str	r4, [r2, #4]
 80090e8:	e7cb      	b.n	8009082 <_free_r+0x22>
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	200037b8 	.word	0x200037b8

080090f0 <sbrk_aligned>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	4e0e      	ldr	r6, [pc, #56]	; (800912c <sbrk_aligned+0x3c>)
 80090f4:	460c      	mov	r4, r1
 80090f6:	6831      	ldr	r1, [r6, #0]
 80090f8:	4605      	mov	r5, r0
 80090fa:	b911      	cbnz	r1, 8009102 <sbrk_aligned+0x12>
 80090fc:	f000 fe70 	bl	8009de0 <_sbrk_r>
 8009100:	6030      	str	r0, [r6, #0]
 8009102:	4621      	mov	r1, r4
 8009104:	4628      	mov	r0, r5
 8009106:	f000 fe6b 	bl	8009de0 <_sbrk_r>
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	d00a      	beq.n	8009124 <sbrk_aligned+0x34>
 800910e:	1cc4      	adds	r4, r0, #3
 8009110:	f024 0403 	bic.w	r4, r4, #3
 8009114:	42a0      	cmp	r0, r4
 8009116:	d007      	beq.n	8009128 <sbrk_aligned+0x38>
 8009118:	1a21      	subs	r1, r4, r0
 800911a:	4628      	mov	r0, r5
 800911c:	f000 fe60 	bl	8009de0 <_sbrk_r>
 8009120:	3001      	adds	r0, #1
 8009122:	d101      	bne.n	8009128 <sbrk_aligned+0x38>
 8009124:	f04f 34ff 	mov.w	r4, #4294967295
 8009128:	4620      	mov	r0, r4
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	200037bc 	.word	0x200037bc

08009130 <_malloc_r>:
 8009130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009134:	1ccd      	adds	r5, r1, #3
 8009136:	f025 0503 	bic.w	r5, r5, #3
 800913a:	3508      	adds	r5, #8
 800913c:	2d0c      	cmp	r5, #12
 800913e:	bf38      	it	cc
 8009140:	250c      	movcc	r5, #12
 8009142:	2d00      	cmp	r5, #0
 8009144:	4607      	mov	r7, r0
 8009146:	db01      	blt.n	800914c <_malloc_r+0x1c>
 8009148:	42a9      	cmp	r1, r5
 800914a:	d905      	bls.n	8009158 <_malloc_r+0x28>
 800914c:	230c      	movs	r3, #12
 800914e:	2600      	movs	r6, #0
 8009150:	603b      	str	r3, [r7, #0]
 8009152:	4630      	mov	r0, r6
 8009154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009158:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800922c <_malloc_r+0xfc>
 800915c:	f000 f868 	bl	8009230 <__malloc_lock>
 8009160:	f8d8 3000 	ldr.w	r3, [r8]
 8009164:	461c      	mov	r4, r3
 8009166:	bb5c      	cbnz	r4, 80091c0 <_malloc_r+0x90>
 8009168:	4629      	mov	r1, r5
 800916a:	4638      	mov	r0, r7
 800916c:	f7ff ffc0 	bl	80090f0 <sbrk_aligned>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	4604      	mov	r4, r0
 8009174:	d155      	bne.n	8009222 <_malloc_r+0xf2>
 8009176:	f8d8 4000 	ldr.w	r4, [r8]
 800917a:	4626      	mov	r6, r4
 800917c:	2e00      	cmp	r6, #0
 800917e:	d145      	bne.n	800920c <_malloc_r+0xdc>
 8009180:	2c00      	cmp	r4, #0
 8009182:	d048      	beq.n	8009216 <_malloc_r+0xe6>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	4631      	mov	r1, r6
 8009188:	4638      	mov	r0, r7
 800918a:	eb04 0903 	add.w	r9, r4, r3
 800918e:	f000 fe27 	bl	8009de0 <_sbrk_r>
 8009192:	4581      	cmp	r9, r0
 8009194:	d13f      	bne.n	8009216 <_malloc_r+0xe6>
 8009196:	6821      	ldr	r1, [r4, #0]
 8009198:	4638      	mov	r0, r7
 800919a:	1a6d      	subs	r5, r5, r1
 800919c:	4629      	mov	r1, r5
 800919e:	f7ff ffa7 	bl	80090f0 <sbrk_aligned>
 80091a2:	3001      	adds	r0, #1
 80091a4:	d037      	beq.n	8009216 <_malloc_r+0xe6>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	442b      	add	r3, r5
 80091aa:	6023      	str	r3, [r4, #0]
 80091ac:	f8d8 3000 	ldr.w	r3, [r8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d038      	beq.n	8009226 <_malloc_r+0xf6>
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	42a2      	cmp	r2, r4
 80091b8:	d12b      	bne.n	8009212 <_malloc_r+0xe2>
 80091ba:	2200      	movs	r2, #0
 80091bc:	605a      	str	r2, [r3, #4]
 80091be:	e00f      	b.n	80091e0 <_malloc_r+0xb0>
 80091c0:	6822      	ldr	r2, [r4, #0]
 80091c2:	1b52      	subs	r2, r2, r5
 80091c4:	d41f      	bmi.n	8009206 <_malloc_r+0xd6>
 80091c6:	2a0b      	cmp	r2, #11
 80091c8:	d917      	bls.n	80091fa <_malloc_r+0xca>
 80091ca:	1961      	adds	r1, r4, r5
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	6025      	str	r5, [r4, #0]
 80091d0:	bf18      	it	ne
 80091d2:	6059      	strne	r1, [r3, #4]
 80091d4:	6863      	ldr	r3, [r4, #4]
 80091d6:	bf08      	it	eq
 80091d8:	f8c8 1000 	streq.w	r1, [r8]
 80091dc:	5162      	str	r2, [r4, r5]
 80091de:	604b      	str	r3, [r1, #4]
 80091e0:	4638      	mov	r0, r7
 80091e2:	f104 060b 	add.w	r6, r4, #11
 80091e6:	f000 f829 	bl	800923c <__malloc_unlock>
 80091ea:	f026 0607 	bic.w	r6, r6, #7
 80091ee:	1d23      	adds	r3, r4, #4
 80091f0:	1af2      	subs	r2, r6, r3
 80091f2:	d0ae      	beq.n	8009152 <_malloc_r+0x22>
 80091f4:	1b9b      	subs	r3, r3, r6
 80091f6:	50a3      	str	r3, [r4, r2]
 80091f8:	e7ab      	b.n	8009152 <_malloc_r+0x22>
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	6862      	ldr	r2, [r4, #4]
 80091fe:	d1dd      	bne.n	80091bc <_malloc_r+0x8c>
 8009200:	f8c8 2000 	str.w	r2, [r8]
 8009204:	e7ec      	b.n	80091e0 <_malloc_r+0xb0>
 8009206:	4623      	mov	r3, r4
 8009208:	6864      	ldr	r4, [r4, #4]
 800920a:	e7ac      	b.n	8009166 <_malloc_r+0x36>
 800920c:	4634      	mov	r4, r6
 800920e:	6876      	ldr	r6, [r6, #4]
 8009210:	e7b4      	b.n	800917c <_malloc_r+0x4c>
 8009212:	4613      	mov	r3, r2
 8009214:	e7cc      	b.n	80091b0 <_malloc_r+0x80>
 8009216:	230c      	movs	r3, #12
 8009218:	4638      	mov	r0, r7
 800921a:	603b      	str	r3, [r7, #0]
 800921c:	f000 f80e 	bl	800923c <__malloc_unlock>
 8009220:	e797      	b.n	8009152 <_malloc_r+0x22>
 8009222:	6025      	str	r5, [r4, #0]
 8009224:	e7dc      	b.n	80091e0 <_malloc_r+0xb0>
 8009226:	605b      	str	r3, [r3, #4]
 8009228:	deff      	udf	#255	; 0xff
 800922a:	bf00      	nop
 800922c:	200037b8 	.word	0x200037b8

08009230 <__malloc_lock>:
 8009230:	4801      	ldr	r0, [pc, #4]	; (8009238 <__malloc_lock+0x8>)
 8009232:	f7ff befd 	b.w	8009030 <__retarget_lock_acquire_recursive>
 8009236:	bf00      	nop
 8009238:	200037b4 	.word	0x200037b4

0800923c <__malloc_unlock>:
 800923c:	4801      	ldr	r0, [pc, #4]	; (8009244 <__malloc_unlock+0x8>)
 800923e:	f7ff bef8 	b.w	8009032 <__retarget_lock_release_recursive>
 8009242:	bf00      	nop
 8009244:	200037b4 	.word	0x200037b4

08009248 <__ssputs_r>:
 8009248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	461f      	mov	r7, r3
 800924e:	688e      	ldr	r6, [r1, #8]
 8009250:	4682      	mov	sl, r0
 8009252:	42be      	cmp	r6, r7
 8009254:	460c      	mov	r4, r1
 8009256:	4690      	mov	r8, r2
 8009258:	680b      	ldr	r3, [r1, #0]
 800925a:	d82c      	bhi.n	80092b6 <__ssputs_r+0x6e>
 800925c:	898a      	ldrh	r2, [r1, #12]
 800925e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009262:	d026      	beq.n	80092b2 <__ssputs_r+0x6a>
 8009264:	6965      	ldr	r5, [r4, #20]
 8009266:	6909      	ldr	r1, [r1, #16]
 8009268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800926c:	eba3 0901 	sub.w	r9, r3, r1
 8009270:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009274:	1c7b      	adds	r3, r7, #1
 8009276:	444b      	add	r3, r9
 8009278:	106d      	asrs	r5, r5, #1
 800927a:	429d      	cmp	r5, r3
 800927c:	bf38      	it	cc
 800927e:	461d      	movcc	r5, r3
 8009280:	0553      	lsls	r3, r2, #21
 8009282:	d527      	bpl.n	80092d4 <__ssputs_r+0x8c>
 8009284:	4629      	mov	r1, r5
 8009286:	f7ff ff53 	bl	8009130 <_malloc_r>
 800928a:	4606      	mov	r6, r0
 800928c:	b360      	cbz	r0, 80092e8 <__ssputs_r+0xa0>
 800928e:	464a      	mov	r2, r9
 8009290:	6921      	ldr	r1, [r4, #16]
 8009292:	f7ff fecf 	bl	8009034 <memcpy>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	6126      	str	r6, [r4, #16]
 80092a4:	444e      	add	r6, r9
 80092a6:	6026      	str	r6, [r4, #0]
 80092a8:	463e      	mov	r6, r7
 80092aa:	6165      	str	r5, [r4, #20]
 80092ac:	eba5 0509 	sub.w	r5, r5, r9
 80092b0:	60a5      	str	r5, [r4, #8]
 80092b2:	42be      	cmp	r6, r7
 80092b4:	d900      	bls.n	80092b8 <__ssputs_r+0x70>
 80092b6:	463e      	mov	r6, r7
 80092b8:	4632      	mov	r2, r6
 80092ba:	4641      	mov	r1, r8
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	f000 fd31 	bl	8009d24 <memmove>
 80092c2:	2000      	movs	r0, #0
 80092c4:	68a3      	ldr	r3, [r4, #8]
 80092c6:	1b9b      	subs	r3, r3, r6
 80092c8:	60a3      	str	r3, [r4, #8]
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	4433      	add	r3, r6
 80092ce:	6023      	str	r3, [r4, #0]
 80092d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d4:	462a      	mov	r2, r5
 80092d6:	f000 fda1 	bl	8009e1c <_realloc_r>
 80092da:	4606      	mov	r6, r0
 80092dc:	2800      	cmp	r0, #0
 80092de:	d1e0      	bne.n	80092a2 <__ssputs_r+0x5a>
 80092e0:	4650      	mov	r0, sl
 80092e2:	6921      	ldr	r1, [r4, #16]
 80092e4:	f7ff febc 	bl	8009060 <_free_r>
 80092e8:	230c      	movs	r3, #12
 80092ea:	f8ca 3000 	str.w	r3, [sl]
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f8:	81a3      	strh	r3, [r4, #12]
 80092fa:	e7e9      	b.n	80092d0 <__ssputs_r+0x88>

080092fc <_svfiprintf_r>:
 80092fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	4698      	mov	r8, r3
 8009302:	898b      	ldrh	r3, [r1, #12]
 8009304:	4607      	mov	r7, r0
 8009306:	061b      	lsls	r3, r3, #24
 8009308:	460d      	mov	r5, r1
 800930a:	4614      	mov	r4, r2
 800930c:	b09d      	sub	sp, #116	; 0x74
 800930e:	d50e      	bpl.n	800932e <_svfiprintf_r+0x32>
 8009310:	690b      	ldr	r3, [r1, #16]
 8009312:	b963      	cbnz	r3, 800932e <_svfiprintf_r+0x32>
 8009314:	2140      	movs	r1, #64	; 0x40
 8009316:	f7ff ff0b 	bl	8009130 <_malloc_r>
 800931a:	6028      	str	r0, [r5, #0]
 800931c:	6128      	str	r0, [r5, #16]
 800931e:	b920      	cbnz	r0, 800932a <_svfiprintf_r+0x2e>
 8009320:	230c      	movs	r3, #12
 8009322:	603b      	str	r3, [r7, #0]
 8009324:	f04f 30ff 	mov.w	r0, #4294967295
 8009328:	e0d0      	b.n	80094cc <_svfiprintf_r+0x1d0>
 800932a:	2340      	movs	r3, #64	; 0x40
 800932c:	616b      	str	r3, [r5, #20]
 800932e:	2300      	movs	r3, #0
 8009330:	9309      	str	r3, [sp, #36]	; 0x24
 8009332:	2320      	movs	r3, #32
 8009334:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009338:	2330      	movs	r3, #48	; 0x30
 800933a:	f04f 0901 	mov.w	r9, #1
 800933e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009342:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80094e4 <_svfiprintf_r+0x1e8>
 8009346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800934a:	4623      	mov	r3, r4
 800934c:	469a      	mov	sl, r3
 800934e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009352:	b10a      	cbz	r2, 8009358 <_svfiprintf_r+0x5c>
 8009354:	2a25      	cmp	r2, #37	; 0x25
 8009356:	d1f9      	bne.n	800934c <_svfiprintf_r+0x50>
 8009358:	ebba 0b04 	subs.w	fp, sl, r4
 800935c:	d00b      	beq.n	8009376 <_svfiprintf_r+0x7a>
 800935e:	465b      	mov	r3, fp
 8009360:	4622      	mov	r2, r4
 8009362:	4629      	mov	r1, r5
 8009364:	4638      	mov	r0, r7
 8009366:	f7ff ff6f 	bl	8009248 <__ssputs_r>
 800936a:	3001      	adds	r0, #1
 800936c:	f000 80a9 	beq.w	80094c2 <_svfiprintf_r+0x1c6>
 8009370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009372:	445a      	add	r2, fp
 8009374:	9209      	str	r2, [sp, #36]	; 0x24
 8009376:	f89a 3000 	ldrb.w	r3, [sl]
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 80a1 	beq.w	80094c2 <_svfiprintf_r+0x1c6>
 8009380:	2300      	movs	r3, #0
 8009382:	f04f 32ff 	mov.w	r2, #4294967295
 8009386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800938a:	f10a 0a01 	add.w	sl, sl, #1
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	9307      	str	r3, [sp, #28]
 8009392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009396:	931a      	str	r3, [sp, #104]	; 0x68
 8009398:	4654      	mov	r4, sl
 800939a:	2205      	movs	r2, #5
 800939c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a0:	4850      	ldr	r0, [pc, #320]	; (80094e4 <_svfiprintf_r+0x1e8>)
 80093a2:	f000 fd2d 	bl	8009e00 <memchr>
 80093a6:	9a04      	ldr	r2, [sp, #16]
 80093a8:	b9d8      	cbnz	r0, 80093e2 <_svfiprintf_r+0xe6>
 80093aa:	06d0      	lsls	r0, r2, #27
 80093ac:	bf44      	itt	mi
 80093ae:	2320      	movmi	r3, #32
 80093b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b4:	0711      	lsls	r1, r2, #28
 80093b6:	bf44      	itt	mi
 80093b8:	232b      	movmi	r3, #43	; 0x2b
 80093ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093be:	f89a 3000 	ldrb.w	r3, [sl]
 80093c2:	2b2a      	cmp	r3, #42	; 0x2a
 80093c4:	d015      	beq.n	80093f2 <_svfiprintf_r+0xf6>
 80093c6:	4654      	mov	r4, sl
 80093c8:	2000      	movs	r0, #0
 80093ca:	f04f 0c0a 	mov.w	ip, #10
 80093ce:	9a07      	ldr	r2, [sp, #28]
 80093d0:	4621      	mov	r1, r4
 80093d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093d6:	3b30      	subs	r3, #48	; 0x30
 80093d8:	2b09      	cmp	r3, #9
 80093da:	d94d      	bls.n	8009478 <_svfiprintf_r+0x17c>
 80093dc:	b1b0      	cbz	r0, 800940c <_svfiprintf_r+0x110>
 80093de:	9207      	str	r2, [sp, #28]
 80093e0:	e014      	b.n	800940c <_svfiprintf_r+0x110>
 80093e2:	eba0 0308 	sub.w	r3, r0, r8
 80093e6:	fa09 f303 	lsl.w	r3, r9, r3
 80093ea:	4313      	orrs	r3, r2
 80093ec:	46a2      	mov	sl, r4
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	e7d2      	b.n	8009398 <_svfiprintf_r+0x9c>
 80093f2:	9b03      	ldr	r3, [sp, #12]
 80093f4:	1d19      	adds	r1, r3, #4
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	9103      	str	r1, [sp, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	bfbb      	ittet	lt
 80093fe:	425b      	neglt	r3, r3
 8009400:	f042 0202 	orrlt.w	r2, r2, #2
 8009404:	9307      	strge	r3, [sp, #28]
 8009406:	9307      	strlt	r3, [sp, #28]
 8009408:	bfb8      	it	lt
 800940a:	9204      	strlt	r2, [sp, #16]
 800940c:	7823      	ldrb	r3, [r4, #0]
 800940e:	2b2e      	cmp	r3, #46	; 0x2e
 8009410:	d10c      	bne.n	800942c <_svfiprintf_r+0x130>
 8009412:	7863      	ldrb	r3, [r4, #1]
 8009414:	2b2a      	cmp	r3, #42	; 0x2a
 8009416:	d134      	bne.n	8009482 <_svfiprintf_r+0x186>
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	3402      	adds	r4, #2
 800941c:	1d1a      	adds	r2, r3, #4
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	9203      	str	r2, [sp, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	bfb8      	it	lt
 8009426:	f04f 33ff 	movlt.w	r3, #4294967295
 800942a:	9305      	str	r3, [sp, #20]
 800942c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80094e8 <_svfiprintf_r+0x1ec>
 8009430:	2203      	movs	r2, #3
 8009432:	4650      	mov	r0, sl
 8009434:	7821      	ldrb	r1, [r4, #0]
 8009436:	f000 fce3 	bl	8009e00 <memchr>
 800943a:	b138      	cbz	r0, 800944c <_svfiprintf_r+0x150>
 800943c:	2240      	movs	r2, #64	; 0x40
 800943e:	9b04      	ldr	r3, [sp, #16]
 8009440:	eba0 000a 	sub.w	r0, r0, sl
 8009444:	4082      	lsls	r2, r0
 8009446:	4313      	orrs	r3, r2
 8009448:	3401      	adds	r4, #1
 800944a:	9304      	str	r3, [sp, #16]
 800944c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009450:	2206      	movs	r2, #6
 8009452:	4826      	ldr	r0, [pc, #152]	; (80094ec <_svfiprintf_r+0x1f0>)
 8009454:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009458:	f000 fcd2 	bl	8009e00 <memchr>
 800945c:	2800      	cmp	r0, #0
 800945e:	d038      	beq.n	80094d2 <_svfiprintf_r+0x1d6>
 8009460:	4b23      	ldr	r3, [pc, #140]	; (80094f0 <_svfiprintf_r+0x1f4>)
 8009462:	bb1b      	cbnz	r3, 80094ac <_svfiprintf_r+0x1b0>
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	3307      	adds	r3, #7
 8009468:	f023 0307 	bic.w	r3, r3, #7
 800946c:	3308      	adds	r3, #8
 800946e:	9303      	str	r3, [sp, #12]
 8009470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009472:	4433      	add	r3, r6
 8009474:	9309      	str	r3, [sp, #36]	; 0x24
 8009476:	e768      	b.n	800934a <_svfiprintf_r+0x4e>
 8009478:	460c      	mov	r4, r1
 800947a:	2001      	movs	r0, #1
 800947c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009480:	e7a6      	b.n	80093d0 <_svfiprintf_r+0xd4>
 8009482:	2300      	movs	r3, #0
 8009484:	f04f 0c0a 	mov.w	ip, #10
 8009488:	4619      	mov	r1, r3
 800948a:	3401      	adds	r4, #1
 800948c:	9305      	str	r3, [sp, #20]
 800948e:	4620      	mov	r0, r4
 8009490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009494:	3a30      	subs	r2, #48	; 0x30
 8009496:	2a09      	cmp	r2, #9
 8009498:	d903      	bls.n	80094a2 <_svfiprintf_r+0x1a6>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0c6      	beq.n	800942c <_svfiprintf_r+0x130>
 800949e:	9105      	str	r1, [sp, #20]
 80094a0:	e7c4      	b.n	800942c <_svfiprintf_r+0x130>
 80094a2:	4604      	mov	r4, r0
 80094a4:	2301      	movs	r3, #1
 80094a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80094aa:	e7f0      	b.n	800948e <_svfiprintf_r+0x192>
 80094ac:	ab03      	add	r3, sp, #12
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	462a      	mov	r2, r5
 80094b2:	4638      	mov	r0, r7
 80094b4:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <_svfiprintf_r+0x1f8>)
 80094b6:	a904      	add	r1, sp, #16
 80094b8:	f3af 8000 	nop.w
 80094bc:	1c42      	adds	r2, r0, #1
 80094be:	4606      	mov	r6, r0
 80094c0:	d1d6      	bne.n	8009470 <_svfiprintf_r+0x174>
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	065b      	lsls	r3, r3, #25
 80094c6:	f53f af2d 	bmi.w	8009324 <_svfiprintf_r+0x28>
 80094ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094cc:	b01d      	add	sp, #116	; 0x74
 80094ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d2:	ab03      	add	r3, sp, #12
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	462a      	mov	r2, r5
 80094d8:	4638      	mov	r0, r7
 80094da:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <_svfiprintf_r+0x1f8>)
 80094dc:	a904      	add	r1, sp, #16
 80094de:	f000 f9bf 	bl	8009860 <_printf_i>
 80094e2:	e7eb      	b.n	80094bc <_svfiprintf_r+0x1c0>
 80094e4:	0800a3b5 	.word	0x0800a3b5
 80094e8:	0800a3bb 	.word	0x0800a3bb
 80094ec:	0800a3bf 	.word	0x0800a3bf
 80094f0:	00000000 	.word	0x00000000
 80094f4:	08009249 	.word	0x08009249

080094f8 <__sfputc_r>:
 80094f8:	6893      	ldr	r3, [r2, #8]
 80094fa:	b410      	push	{r4}
 80094fc:	3b01      	subs	r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	6093      	str	r3, [r2, #8]
 8009502:	da07      	bge.n	8009514 <__sfputc_r+0x1c>
 8009504:	6994      	ldr	r4, [r2, #24]
 8009506:	42a3      	cmp	r3, r4
 8009508:	db01      	blt.n	800950e <__sfputc_r+0x16>
 800950a:	290a      	cmp	r1, #10
 800950c:	d102      	bne.n	8009514 <__sfputc_r+0x1c>
 800950e:	bc10      	pop	{r4}
 8009510:	f000 bb72 	b.w	8009bf8 <__swbuf_r>
 8009514:	6813      	ldr	r3, [r2, #0]
 8009516:	1c58      	adds	r0, r3, #1
 8009518:	6010      	str	r0, [r2, #0]
 800951a:	7019      	strb	r1, [r3, #0]
 800951c:	4608      	mov	r0, r1
 800951e:	bc10      	pop	{r4}
 8009520:	4770      	bx	lr

08009522 <__sfputs_r>:
 8009522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009524:	4606      	mov	r6, r0
 8009526:	460f      	mov	r7, r1
 8009528:	4614      	mov	r4, r2
 800952a:	18d5      	adds	r5, r2, r3
 800952c:	42ac      	cmp	r4, r5
 800952e:	d101      	bne.n	8009534 <__sfputs_r+0x12>
 8009530:	2000      	movs	r0, #0
 8009532:	e007      	b.n	8009544 <__sfputs_r+0x22>
 8009534:	463a      	mov	r2, r7
 8009536:	4630      	mov	r0, r6
 8009538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800953c:	f7ff ffdc 	bl	80094f8 <__sfputc_r>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d1f3      	bne.n	800952c <__sfputs_r+0xa>
 8009544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009548 <_vfiprintf_r>:
 8009548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	460d      	mov	r5, r1
 800954e:	4614      	mov	r4, r2
 8009550:	4698      	mov	r8, r3
 8009552:	4606      	mov	r6, r0
 8009554:	b09d      	sub	sp, #116	; 0x74
 8009556:	b118      	cbz	r0, 8009560 <_vfiprintf_r+0x18>
 8009558:	6a03      	ldr	r3, [r0, #32]
 800955a:	b90b      	cbnz	r3, 8009560 <_vfiprintf_r+0x18>
 800955c:	f7ff fc28 	bl	8008db0 <__sinit>
 8009560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009562:	07d9      	lsls	r1, r3, #31
 8009564:	d405      	bmi.n	8009572 <_vfiprintf_r+0x2a>
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	059a      	lsls	r2, r3, #22
 800956a:	d402      	bmi.n	8009572 <_vfiprintf_r+0x2a>
 800956c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800956e:	f7ff fd5f 	bl	8009030 <__retarget_lock_acquire_recursive>
 8009572:	89ab      	ldrh	r3, [r5, #12]
 8009574:	071b      	lsls	r3, r3, #28
 8009576:	d501      	bpl.n	800957c <_vfiprintf_r+0x34>
 8009578:	692b      	ldr	r3, [r5, #16]
 800957a:	b99b      	cbnz	r3, 80095a4 <_vfiprintf_r+0x5c>
 800957c:	4629      	mov	r1, r5
 800957e:	4630      	mov	r0, r6
 8009580:	f000 fb78 	bl	8009c74 <__swsetup_r>
 8009584:	b170      	cbz	r0, 80095a4 <_vfiprintf_r+0x5c>
 8009586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009588:	07dc      	lsls	r4, r3, #31
 800958a:	d504      	bpl.n	8009596 <_vfiprintf_r+0x4e>
 800958c:	f04f 30ff 	mov.w	r0, #4294967295
 8009590:	b01d      	add	sp, #116	; 0x74
 8009592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009596:	89ab      	ldrh	r3, [r5, #12]
 8009598:	0598      	lsls	r0, r3, #22
 800959a:	d4f7      	bmi.n	800958c <_vfiprintf_r+0x44>
 800959c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800959e:	f7ff fd48 	bl	8009032 <__retarget_lock_release_recursive>
 80095a2:	e7f3      	b.n	800958c <_vfiprintf_r+0x44>
 80095a4:	2300      	movs	r3, #0
 80095a6:	9309      	str	r3, [sp, #36]	; 0x24
 80095a8:	2320      	movs	r3, #32
 80095aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ae:	2330      	movs	r3, #48	; 0x30
 80095b0:	f04f 0901 	mov.w	r9, #1
 80095b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80095b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009768 <_vfiprintf_r+0x220>
 80095bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095c0:	4623      	mov	r3, r4
 80095c2:	469a      	mov	sl, r3
 80095c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095c8:	b10a      	cbz	r2, 80095ce <_vfiprintf_r+0x86>
 80095ca:	2a25      	cmp	r2, #37	; 0x25
 80095cc:	d1f9      	bne.n	80095c2 <_vfiprintf_r+0x7a>
 80095ce:	ebba 0b04 	subs.w	fp, sl, r4
 80095d2:	d00b      	beq.n	80095ec <_vfiprintf_r+0xa4>
 80095d4:	465b      	mov	r3, fp
 80095d6:	4622      	mov	r2, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	4630      	mov	r0, r6
 80095dc:	f7ff ffa1 	bl	8009522 <__sfputs_r>
 80095e0:	3001      	adds	r0, #1
 80095e2:	f000 80a9 	beq.w	8009738 <_vfiprintf_r+0x1f0>
 80095e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095e8:	445a      	add	r2, fp
 80095ea:	9209      	str	r2, [sp, #36]	; 0x24
 80095ec:	f89a 3000 	ldrb.w	r3, [sl]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 80a1 	beq.w	8009738 <_vfiprintf_r+0x1f0>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f04f 32ff 	mov.w	r2, #4294967295
 80095fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009600:	f10a 0a01 	add.w	sl, sl, #1
 8009604:	9304      	str	r3, [sp, #16]
 8009606:	9307      	str	r3, [sp, #28]
 8009608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800960c:	931a      	str	r3, [sp, #104]	; 0x68
 800960e:	4654      	mov	r4, sl
 8009610:	2205      	movs	r2, #5
 8009612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009616:	4854      	ldr	r0, [pc, #336]	; (8009768 <_vfiprintf_r+0x220>)
 8009618:	f000 fbf2 	bl	8009e00 <memchr>
 800961c:	9a04      	ldr	r2, [sp, #16]
 800961e:	b9d8      	cbnz	r0, 8009658 <_vfiprintf_r+0x110>
 8009620:	06d1      	lsls	r1, r2, #27
 8009622:	bf44      	itt	mi
 8009624:	2320      	movmi	r3, #32
 8009626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800962a:	0713      	lsls	r3, r2, #28
 800962c:	bf44      	itt	mi
 800962e:	232b      	movmi	r3, #43	; 0x2b
 8009630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009634:	f89a 3000 	ldrb.w	r3, [sl]
 8009638:	2b2a      	cmp	r3, #42	; 0x2a
 800963a:	d015      	beq.n	8009668 <_vfiprintf_r+0x120>
 800963c:	4654      	mov	r4, sl
 800963e:	2000      	movs	r0, #0
 8009640:	f04f 0c0a 	mov.w	ip, #10
 8009644:	9a07      	ldr	r2, [sp, #28]
 8009646:	4621      	mov	r1, r4
 8009648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800964c:	3b30      	subs	r3, #48	; 0x30
 800964e:	2b09      	cmp	r3, #9
 8009650:	d94d      	bls.n	80096ee <_vfiprintf_r+0x1a6>
 8009652:	b1b0      	cbz	r0, 8009682 <_vfiprintf_r+0x13a>
 8009654:	9207      	str	r2, [sp, #28]
 8009656:	e014      	b.n	8009682 <_vfiprintf_r+0x13a>
 8009658:	eba0 0308 	sub.w	r3, r0, r8
 800965c:	fa09 f303 	lsl.w	r3, r9, r3
 8009660:	4313      	orrs	r3, r2
 8009662:	46a2      	mov	sl, r4
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	e7d2      	b.n	800960e <_vfiprintf_r+0xc6>
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	1d19      	adds	r1, r3, #4
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	9103      	str	r1, [sp, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	bfbb      	ittet	lt
 8009674:	425b      	neglt	r3, r3
 8009676:	f042 0202 	orrlt.w	r2, r2, #2
 800967a:	9307      	strge	r3, [sp, #28]
 800967c:	9307      	strlt	r3, [sp, #28]
 800967e:	bfb8      	it	lt
 8009680:	9204      	strlt	r2, [sp, #16]
 8009682:	7823      	ldrb	r3, [r4, #0]
 8009684:	2b2e      	cmp	r3, #46	; 0x2e
 8009686:	d10c      	bne.n	80096a2 <_vfiprintf_r+0x15a>
 8009688:	7863      	ldrb	r3, [r4, #1]
 800968a:	2b2a      	cmp	r3, #42	; 0x2a
 800968c:	d134      	bne.n	80096f8 <_vfiprintf_r+0x1b0>
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	3402      	adds	r4, #2
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	9203      	str	r2, [sp, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	bfb8      	it	lt
 800969c:	f04f 33ff 	movlt.w	r3, #4294967295
 80096a0:	9305      	str	r3, [sp, #20]
 80096a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800976c <_vfiprintf_r+0x224>
 80096a6:	2203      	movs	r2, #3
 80096a8:	4650      	mov	r0, sl
 80096aa:	7821      	ldrb	r1, [r4, #0]
 80096ac:	f000 fba8 	bl	8009e00 <memchr>
 80096b0:	b138      	cbz	r0, 80096c2 <_vfiprintf_r+0x17a>
 80096b2:	2240      	movs	r2, #64	; 0x40
 80096b4:	9b04      	ldr	r3, [sp, #16]
 80096b6:	eba0 000a 	sub.w	r0, r0, sl
 80096ba:	4082      	lsls	r2, r0
 80096bc:	4313      	orrs	r3, r2
 80096be:	3401      	adds	r4, #1
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c6:	2206      	movs	r2, #6
 80096c8:	4829      	ldr	r0, [pc, #164]	; (8009770 <_vfiprintf_r+0x228>)
 80096ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096ce:	f000 fb97 	bl	8009e00 <memchr>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d03f      	beq.n	8009756 <_vfiprintf_r+0x20e>
 80096d6:	4b27      	ldr	r3, [pc, #156]	; (8009774 <_vfiprintf_r+0x22c>)
 80096d8:	bb1b      	cbnz	r3, 8009722 <_vfiprintf_r+0x1da>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	3307      	adds	r3, #7
 80096de:	f023 0307 	bic.w	r3, r3, #7
 80096e2:	3308      	adds	r3, #8
 80096e4:	9303      	str	r3, [sp, #12]
 80096e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e8:	443b      	add	r3, r7
 80096ea:	9309      	str	r3, [sp, #36]	; 0x24
 80096ec:	e768      	b.n	80095c0 <_vfiprintf_r+0x78>
 80096ee:	460c      	mov	r4, r1
 80096f0:	2001      	movs	r0, #1
 80096f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80096f6:	e7a6      	b.n	8009646 <_vfiprintf_r+0xfe>
 80096f8:	2300      	movs	r3, #0
 80096fa:	f04f 0c0a 	mov.w	ip, #10
 80096fe:	4619      	mov	r1, r3
 8009700:	3401      	adds	r4, #1
 8009702:	9305      	str	r3, [sp, #20]
 8009704:	4620      	mov	r0, r4
 8009706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800970a:	3a30      	subs	r2, #48	; 0x30
 800970c:	2a09      	cmp	r2, #9
 800970e:	d903      	bls.n	8009718 <_vfiprintf_r+0x1d0>
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0c6      	beq.n	80096a2 <_vfiprintf_r+0x15a>
 8009714:	9105      	str	r1, [sp, #20]
 8009716:	e7c4      	b.n	80096a2 <_vfiprintf_r+0x15a>
 8009718:	4604      	mov	r4, r0
 800971a:	2301      	movs	r3, #1
 800971c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009720:	e7f0      	b.n	8009704 <_vfiprintf_r+0x1bc>
 8009722:	ab03      	add	r3, sp, #12
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	462a      	mov	r2, r5
 8009728:	4630      	mov	r0, r6
 800972a:	4b13      	ldr	r3, [pc, #76]	; (8009778 <_vfiprintf_r+0x230>)
 800972c:	a904      	add	r1, sp, #16
 800972e:	f3af 8000 	nop.w
 8009732:	4607      	mov	r7, r0
 8009734:	1c78      	adds	r0, r7, #1
 8009736:	d1d6      	bne.n	80096e6 <_vfiprintf_r+0x19e>
 8009738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800973a:	07d9      	lsls	r1, r3, #31
 800973c:	d405      	bmi.n	800974a <_vfiprintf_r+0x202>
 800973e:	89ab      	ldrh	r3, [r5, #12]
 8009740:	059a      	lsls	r2, r3, #22
 8009742:	d402      	bmi.n	800974a <_vfiprintf_r+0x202>
 8009744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009746:	f7ff fc74 	bl	8009032 <__retarget_lock_release_recursive>
 800974a:	89ab      	ldrh	r3, [r5, #12]
 800974c:	065b      	lsls	r3, r3, #25
 800974e:	f53f af1d 	bmi.w	800958c <_vfiprintf_r+0x44>
 8009752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009754:	e71c      	b.n	8009590 <_vfiprintf_r+0x48>
 8009756:	ab03      	add	r3, sp, #12
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	462a      	mov	r2, r5
 800975c:	4630      	mov	r0, r6
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <_vfiprintf_r+0x230>)
 8009760:	a904      	add	r1, sp, #16
 8009762:	f000 f87d 	bl	8009860 <_printf_i>
 8009766:	e7e4      	b.n	8009732 <_vfiprintf_r+0x1ea>
 8009768:	0800a3b5 	.word	0x0800a3b5
 800976c:	0800a3bb 	.word	0x0800a3bb
 8009770:	0800a3bf 	.word	0x0800a3bf
 8009774:	00000000 	.word	0x00000000
 8009778:	08009523 	.word	0x08009523

0800977c <_printf_common>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	4616      	mov	r6, r2
 8009782:	4699      	mov	r9, r3
 8009784:	688a      	ldr	r2, [r1, #8]
 8009786:	690b      	ldr	r3, [r1, #16]
 8009788:	4607      	mov	r7, r0
 800978a:	4293      	cmp	r3, r2
 800978c:	bfb8      	it	lt
 800978e:	4613      	movlt	r3, r2
 8009790:	6033      	str	r3, [r6, #0]
 8009792:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009796:	460c      	mov	r4, r1
 8009798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800979c:	b10a      	cbz	r2, 80097a2 <_printf_common+0x26>
 800979e:	3301      	adds	r3, #1
 80097a0:	6033      	str	r3, [r6, #0]
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	0699      	lsls	r1, r3, #26
 80097a6:	bf42      	ittt	mi
 80097a8:	6833      	ldrmi	r3, [r6, #0]
 80097aa:	3302      	addmi	r3, #2
 80097ac:	6033      	strmi	r3, [r6, #0]
 80097ae:	6825      	ldr	r5, [r4, #0]
 80097b0:	f015 0506 	ands.w	r5, r5, #6
 80097b4:	d106      	bne.n	80097c4 <_printf_common+0x48>
 80097b6:	f104 0a19 	add.w	sl, r4, #25
 80097ba:	68e3      	ldr	r3, [r4, #12]
 80097bc:	6832      	ldr	r2, [r6, #0]
 80097be:	1a9b      	subs	r3, r3, r2
 80097c0:	42ab      	cmp	r3, r5
 80097c2:	dc2b      	bgt.n	800981c <_printf_common+0xa0>
 80097c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097c8:	1e13      	subs	r3, r2, #0
 80097ca:	6822      	ldr	r2, [r4, #0]
 80097cc:	bf18      	it	ne
 80097ce:	2301      	movne	r3, #1
 80097d0:	0692      	lsls	r2, r2, #26
 80097d2:	d430      	bmi.n	8009836 <_printf_common+0xba>
 80097d4:	4649      	mov	r1, r9
 80097d6:	4638      	mov	r0, r7
 80097d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097dc:	47c0      	blx	r8
 80097de:	3001      	adds	r0, #1
 80097e0:	d023      	beq.n	800982a <_printf_common+0xae>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	6922      	ldr	r2, [r4, #16]
 80097e6:	f003 0306 	and.w	r3, r3, #6
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	bf14      	ite	ne
 80097ee:	2500      	movne	r5, #0
 80097f0:	6833      	ldreq	r3, [r6, #0]
 80097f2:	f04f 0600 	mov.w	r6, #0
 80097f6:	bf08      	it	eq
 80097f8:	68e5      	ldreq	r5, [r4, #12]
 80097fa:	f104 041a 	add.w	r4, r4, #26
 80097fe:	bf08      	it	eq
 8009800:	1aed      	subeq	r5, r5, r3
 8009802:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009806:	bf08      	it	eq
 8009808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800980c:	4293      	cmp	r3, r2
 800980e:	bfc4      	itt	gt
 8009810:	1a9b      	subgt	r3, r3, r2
 8009812:	18ed      	addgt	r5, r5, r3
 8009814:	42b5      	cmp	r5, r6
 8009816:	d11a      	bne.n	800984e <_printf_common+0xd2>
 8009818:	2000      	movs	r0, #0
 800981a:	e008      	b.n	800982e <_printf_common+0xb2>
 800981c:	2301      	movs	r3, #1
 800981e:	4652      	mov	r2, sl
 8009820:	4649      	mov	r1, r9
 8009822:	4638      	mov	r0, r7
 8009824:	47c0      	blx	r8
 8009826:	3001      	adds	r0, #1
 8009828:	d103      	bne.n	8009832 <_printf_common+0xb6>
 800982a:	f04f 30ff 	mov.w	r0, #4294967295
 800982e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009832:	3501      	adds	r5, #1
 8009834:	e7c1      	b.n	80097ba <_printf_common+0x3e>
 8009836:	2030      	movs	r0, #48	; 0x30
 8009838:	18e1      	adds	r1, r4, r3
 800983a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009844:	4422      	add	r2, r4
 8009846:	3302      	adds	r3, #2
 8009848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800984c:	e7c2      	b.n	80097d4 <_printf_common+0x58>
 800984e:	2301      	movs	r3, #1
 8009850:	4622      	mov	r2, r4
 8009852:	4649      	mov	r1, r9
 8009854:	4638      	mov	r0, r7
 8009856:	47c0      	blx	r8
 8009858:	3001      	adds	r0, #1
 800985a:	d0e6      	beq.n	800982a <_printf_common+0xae>
 800985c:	3601      	adds	r6, #1
 800985e:	e7d9      	b.n	8009814 <_printf_common+0x98>

08009860 <_printf_i>:
 8009860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	7e0f      	ldrb	r7, [r1, #24]
 8009866:	4691      	mov	r9, r2
 8009868:	2f78      	cmp	r7, #120	; 0x78
 800986a:	4680      	mov	r8, r0
 800986c:	460c      	mov	r4, r1
 800986e:	469a      	mov	sl, r3
 8009870:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009876:	d807      	bhi.n	8009888 <_printf_i+0x28>
 8009878:	2f62      	cmp	r7, #98	; 0x62
 800987a:	d80a      	bhi.n	8009892 <_printf_i+0x32>
 800987c:	2f00      	cmp	r7, #0
 800987e:	f000 80d5 	beq.w	8009a2c <_printf_i+0x1cc>
 8009882:	2f58      	cmp	r7, #88	; 0x58
 8009884:	f000 80c1 	beq.w	8009a0a <_printf_i+0x1aa>
 8009888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800988c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009890:	e03a      	b.n	8009908 <_printf_i+0xa8>
 8009892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009896:	2b15      	cmp	r3, #21
 8009898:	d8f6      	bhi.n	8009888 <_printf_i+0x28>
 800989a:	a101      	add	r1, pc, #4	; (adr r1, 80098a0 <_printf_i+0x40>)
 800989c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098a0:	080098f9 	.word	0x080098f9
 80098a4:	0800990d 	.word	0x0800990d
 80098a8:	08009889 	.word	0x08009889
 80098ac:	08009889 	.word	0x08009889
 80098b0:	08009889 	.word	0x08009889
 80098b4:	08009889 	.word	0x08009889
 80098b8:	0800990d 	.word	0x0800990d
 80098bc:	08009889 	.word	0x08009889
 80098c0:	08009889 	.word	0x08009889
 80098c4:	08009889 	.word	0x08009889
 80098c8:	08009889 	.word	0x08009889
 80098cc:	08009a13 	.word	0x08009a13
 80098d0:	08009939 	.word	0x08009939
 80098d4:	080099cd 	.word	0x080099cd
 80098d8:	08009889 	.word	0x08009889
 80098dc:	08009889 	.word	0x08009889
 80098e0:	08009a35 	.word	0x08009a35
 80098e4:	08009889 	.word	0x08009889
 80098e8:	08009939 	.word	0x08009939
 80098ec:	08009889 	.word	0x08009889
 80098f0:	08009889 	.word	0x08009889
 80098f4:	080099d5 	.word	0x080099d5
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	1d1a      	adds	r2, r3, #4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	602a      	str	r2, [r5, #0]
 8009900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009908:	2301      	movs	r3, #1
 800990a:	e0a0      	b.n	8009a4e <_printf_i+0x1ee>
 800990c:	6820      	ldr	r0, [r4, #0]
 800990e:	682b      	ldr	r3, [r5, #0]
 8009910:	0607      	lsls	r7, r0, #24
 8009912:	f103 0104 	add.w	r1, r3, #4
 8009916:	6029      	str	r1, [r5, #0]
 8009918:	d501      	bpl.n	800991e <_printf_i+0xbe>
 800991a:	681e      	ldr	r6, [r3, #0]
 800991c:	e003      	b.n	8009926 <_printf_i+0xc6>
 800991e:	0646      	lsls	r6, r0, #25
 8009920:	d5fb      	bpl.n	800991a <_printf_i+0xba>
 8009922:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009926:	2e00      	cmp	r6, #0
 8009928:	da03      	bge.n	8009932 <_printf_i+0xd2>
 800992a:	232d      	movs	r3, #45	; 0x2d
 800992c:	4276      	negs	r6, r6
 800992e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009932:	230a      	movs	r3, #10
 8009934:	4859      	ldr	r0, [pc, #356]	; (8009a9c <_printf_i+0x23c>)
 8009936:	e012      	b.n	800995e <_printf_i+0xfe>
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	6820      	ldr	r0, [r4, #0]
 800993c:	1d19      	adds	r1, r3, #4
 800993e:	6029      	str	r1, [r5, #0]
 8009940:	0605      	lsls	r5, r0, #24
 8009942:	d501      	bpl.n	8009948 <_printf_i+0xe8>
 8009944:	681e      	ldr	r6, [r3, #0]
 8009946:	e002      	b.n	800994e <_printf_i+0xee>
 8009948:	0641      	lsls	r1, r0, #25
 800994a:	d5fb      	bpl.n	8009944 <_printf_i+0xe4>
 800994c:	881e      	ldrh	r6, [r3, #0]
 800994e:	2f6f      	cmp	r7, #111	; 0x6f
 8009950:	bf0c      	ite	eq
 8009952:	2308      	moveq	r3, #8
 8009954:	230a      	movne	r3, #10
 8009956:	4851      	ldr	r0, [pc, #324]	; (8009a9c <_printf_i+0x23c>)
 8009958:	2100      	movs	r1, #0
 800995a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800995e:	6865      	ldr	r5, [r4, #4]
 8009960:	2d00      	cmp	r5, #0
 8009962:	bfa8      	it	ge
 8009964:	6821      	ldrge	r1, [r4, #0]
 8009966:	60a5      	str	r5, [r4, #8]
 8009968:	bfa4      	itt	ge
 800996a:	f021 0104 	bicge.w	r1, r1, #4
 800996e:	6021      	strge	r1, [r4, #0]
 8009970:	b90e      	cbnz	r6, 8009976 <_printf_i+0x116>
 8009972:	2d00      	cmp	r5, #0
 8009974:	d04b      	beq.n	8009a0e <_printf_i+0x1ae>
 8009976:	4615      	mov	r5, r2
 8009978:	fbb6 f1f3 	udiv	r1, r6, r3
 800997c:	fb03 6711 	mls	r7, r3, r1, r6
 8009980:	5dc7      	ldrb	r7, [r0, r7]
 8009982:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009986:	4637      	mov	r7, r6
 8009988:	42bb      	cmp	r3, r7
 800998a:	460e      	mov	r6, r1
 800998c:	d9f4      	bls.n	8009978 <_printf_i+0x118>
 800998e:	2b08      	cmp	r3, #8
 8009990:	d10b      	bne.n	80099aa <_printf_i+0x14a>
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	07de      	lsls	r6, r3, #31
 8009996:	d508      	bpl.n	80099aa <_printf_i+0x14a>
 8009998:	6923      	ldr	r3, [r4, #16]
 800999a:	6861      	ldr	r1, [r4, #4]
 800999c:	4299      	cmp	r1, r3
 800999e:	bfde      	ittt	le
 80099a0:	2330      	movle	r3, #48	; 0x30
 80099a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099aa:	1b52      	subs	r2, r2, r5
 80099ac:	6122      	str	r2, [r4, #16]
 80099ae:	464b      	mov	r3, r9
 80099b0:	4621      	mov	r1, r4
 80099b2:	4640      	mov	r0, r8
 80099b4:	f8cd a000 	str.w	sl, [sp]
 80099b8:	aa03      	add	r2, sp, #12
 80099ba:	f7ff fedf 	bl	800977c <_printf_common>
 80099be:	3001      	adds	r0, #1
 80099c0:	d14a      	bne.n	8009a58 <_printf_i+0x1f8>
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295
 80099c6:	b004      	add	sp, #16
 80099c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	f043 0320 	orr.w	r3, r3, #32
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	2778      	movs	r7, #120	; 0x78
 80099d6:	4832      	ldr	r0, [pc, #200]	; (8009aa0 <_printf_i+0x240>)
 80099d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	6829      	ldr	r1, [r5, #0]
 80099e0:	061f      	lsls	r7, r3, #24
 80099e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80099e6:	d402      	bmi.n	80099ee <_printf_i+0x18e>
 80099e8:	065f      	lsls	r7, r3, #25
 80099ea:	bf48      	it	mi
 80099ec:	b2b6      	uxthmi	r6, r6
 80099ee:	07df      	lsls	r7, r3, #31
 80099f0:	bf48      	it	mi
 80099f2:	f043 0320 	orrmi.w	r3, r3, #32
 80099f6:	6029      	str	r1, [r5, #0]
 80099f8:	bf48      	it	mi
 80099fa:	6023      	strmi	r3, [r4, #0]
 80099fc:	b91e      	cbnz	r6, 8009a06 <_printf_i+0x1a6>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	f023 0320 	bic.w	r3, r3, #32
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	2310      	movs	r3, #16
 8009a08:	e7a6      	b.n	8009958 <_printf_i+0xf8>
 8009a0a:	4824      	ldr	r0, [pc, #144]	; (8009a9c <_printf_i+0x23c>)
 8009a0c:	e7e4      	b.n	80099d8 <_printf_i+0x178>
 8009a0e:	4615      	mov	r5, r2
 8009a10:	e7bd      	b.n	800998e <_printf_i+0x12e>
 8009a12:	682b      	ldr	r3, [r5, #0]
 8009a14:	6826      	ldr	r6, [r4, #0]
 8009a16:	1d18      	adds	r0, r3, #4
 8009a18:	6961      	ldr	r1, [r4, #20]
 8009a1a:	6028      	str	r0, [r5, #0]
 8009a1c:	0635      	lsls	r5, r6, #24
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	d501      	bpl.n	8009a26 <_printf_i+0x1c6>
 8009a22:	6019      	str	r1, [r3, #0]
 8009a24:	e002      	b.n	8009a2c <_printf_i+0x1cc>
 8009a26:	0670      	lsls	r0, r6, #25
 8009a28:	d5fb      	bpl.n	8009a22 <_printf_i+0x1c2>
 8009a2a:	8019      	strh	r1, [r3, #0]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4615      	mov	r5, r2
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	e7bc      	b.n	80099ae <_printf_i+0x14e>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	2100      	movs	r1, #0
 8009a38:	1d1a      	adds	r2, r3, #4
 8009a3a:	602a      	str	r2, [r5, #0]
 8009a3c:	681d      	ldr	r5, [r3, #0]
 8009a3e:	6862      	ldr	r2, [r4, #4]
 8009a40:	4628      	mov	r0, r5
 8009a42:	f000 f9dd 	bl	8009e00 <memchr>
 8009a46:	b108      	cbz	r0, 8009a4c <_printf_i+0x1ec>
 8009a48:	1b40      	subs	r0, r0, r5
 8009a4a:	6060      	str	r0, [r4, #4]
 8009a4c:	6863      	ldr	r3, [r4, #4]
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	2300      	movs	r3, #0
 8009a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a56:	e7aa      	b.n	80099ae <_printf_i+0x14e>
 8009a58:	462a      	mov	r2, r5
 8009a5a:	4649      	mov	r1, r9
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	6923      	ldr	r3, [r4, #16]
 8009a60:	47d0      	blx	sl
 8009a62:	3001      	adds	r0, #1
 8009a64:	d0ad      	beq.n	80099c2 <_printf_i+0x162>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	079b      	lsls	r3, r3, #30
 8009a6a:	d413      	bmi.n	8009a94 <_printf_i+0x234>
 8009a6c:	68e0      	ldr	r0, [r4, #12]
 8009a6e:	9b03      	ldr	r3, [sp, #12]
 8009a70:	4298      	cmp	r0, r3
 8009a72:	bfb8      	it	lt
 8009a74:	4618      	movlt	r0, r3
 8009a76:	e7a6      	b.n	80099c6 <_printf_i+0x166>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	4632      	mov	r2, r6
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	4640      	mov	r0, r8
 8009a80:	47d0      	blx	sl
 8009a82:	3001      	adds	r0, #1
 8009a84:	d09d      	beq.n	80099c2 <_printf_i+0x162>
 8009a86:	3501      	adds	r5, #1
 8009a88:	68e3      	ldr	r3, [r4, #12]
 8009a8a:	9903      	ldr	r1, [sp, #12]
 8009a8c:	1a5b      	subs	r3, r3, r1
 8009a8e:	42ab      	cmp	r3, r5
 8009a90:	dcf2      	bgt.n	8009a78 <_printf_i+0x218>
 8009a92:	e7eb      	b.n	8009a6c <_printf_i+0x20c>
 8009a94:	2500      	movs	r5, #0
 8009a96:	f104 0619 	add.w	r6, r4, #25
 8009a9a:	e7f5      	b.n	8009a88 <_printf_i+0x228>
 8009a9c:	0800a3c6 	.word	0x0800a3c6
 8009aa0:	0800a3d7 	.word	0x0800a3d7

08009aa4 <__sflush_r>:
 8009aa4:	898a      	ldrh	r2, [r1, #12]
 8009aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	0710      	lsls	r0, r2, #28
 8009aac:	460c      	mov	r4, r1
 8009aae:	d457      	bmi.n	8009b60 <__sflush_r+0xbc>
 8009ab0:	684b      	ldr	r3, [r1, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	dc04      	bgt.n	8009ac0 <__sflush_r+0x1c>
 8009ab6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	dc01      	bgt.n	8009ac0 <__sflush_r+0x1c>
 8009abc:	2000      	movs	r0, #0
 8009abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ac2:	2e00      	cmp	r6, #0
 8009ac4:	d0fa      	beq.n	8009abc <__sflush_r+0x18>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009acc:	682f      	ldr	r7, [r5, #0]
 8009ace:	6a21      	ldr	r1, [r4, #32]
 8009ad0:	602b      	str	r3, [r5, #0]
 8009ad2:	d032      	beq.n	8009b3a <__sflush_r+0x96>
 8009ad4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	075a      	lsls	r2, r3, #29
 8009ada:	d505      	bpl.n	8009ae8 <__sflush_r+0x44>
 8009adc:	6863      	ldr	r3, [r4, #4]
 8009ade:	1ac0      	subs	r0, r0, r3
 8009ae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ae2:	b10b      	cbz	r3, 8009ae8 <__sflush_r+0x44>
 8009ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ae6:	1ac0      	subs	r0, r0, r3
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4602      	mov	r2, r0
 8009aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aee:	4628      	mov	r0, r5
 8009af0:	6a21      	ldr	r1, [r4, #32]
 8009af2:	47b0      	blx	r6
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	89a3      	ldrh	r3, [r4, #12]
 8009af8:	d106      	bne.n	8009b08 <__sflush_r+0x64>
 8009afa:	6829      	ldr	r1, [r5, #0]
 8009afc:	291d      	cmp	r1, #29
 8009afe:	d82b      	bhi.n	8009b58 <__sflush_r+0xb4>
 8009b00:	4a28      	ldr	r2, [pc, #160]	; (8009ba4 <__sflush_r+0x100>)
 8009b02:	410a      	asrs	r2, r1
 8009b04:	07d6      	lsls	r6, r2, #31
 8009b06:	d427      	bmi.n	8009b58 <__sflush_r+0xb4>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	6062      	str	r2, [r4, #4]
 8009b0c:	6922      	ldr	r2, [r4, #16]
 8009b0e:	04d9      	lsls	r1, r3, #19
 8009b10:	6022      	str	r2, [r4, #0]
 8009b12:	d504      	bpl.n	8009b1e <__sflush_r+0x7a>
 8009b14:	1c42      	adds	r2, r0, #1
 8009b16:	d101      	bne.n	8009b1c <__sflush_r+0x78>
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	b903      	cbnz	r3, 8009b1e <__sflush_r+0x7a>
 8009b1c:	6560      	str	r0, [r4, #84]	; 0x54
 8009b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b20:	602f      	str	r7, [r5, #0]
 8009b22:	2900      	cmp	r1, #0
 8009b24:	d0ca      	beq.n	8009abc <__sflush_r+0x18>
 8009b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b2a:	4299      	cmp	r1, r3
 8009b2c:	d002      	beq.n	8009b34 <__sflush_r+0x90>
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f7ff fa96 	bl	8009060 <_free_r>
 8009b34:	2000      	movs	r0, #0
 8009b36:	6360      	str	r0, [r4, #52]	; 0x34
 8009b38:	e7c1      	b.n	8009abe <__sflush_r+0x1a>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	47b0      	blx	r6
 8009b40:	1c41      	adds	r1, r0, #1
 8009b42:	d1c8      	bne.n	8009ad6 <__sflush_r+0x32>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0c5      	beq.n	8009ad6 <__sflush_r+0x32>
 8009b4a:	2b1d      	cmp	r3, #29
 8009b4c:	d001      	beq.n	8009b52 <__sflush_r+0xae>
 8009b4e:	2b16      	cmp	r3, #22
 8009b50:	d101      	bne.n	8009b56 <__sflush_r+0xb2>
 8009b52:	602f      	str	r7, [r5, #0]
 8009b54:	e7b2      	b.n	8009abc <__sflush_r+0x18>
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b5c:	81a3      	strh	r3, [r4, #12]
 8009b5e:	e7ae      	b.n	8009abe <__sflush_r+0x1a>
 8009b60:	690f      	ldr	r7, [r1, #16]
 8009b62:	2f00      	cmp	r7, #0
 8009b64:	d0aa      	beq.n	8009abc <__sflush_r+0x18>
 8009b66:	0793      	lsls	r3, r2, #30
 8009b68:	bf18      	it	ne
 8009b6a:	2300      	movne	r3, #0
 8009b6c:	680e      	ldr	r6, [r1, #0]
 8009b6e:	bf08      	it	eq
 8009b70:	694b      	ldreq	r3, [r1, #20]
 8009b72:	1bf6      	subs	r6, r6, r7
 8009b74:	600f      	str	r7, [r1, #0]
 8009b76:	608b      	str	r3, [r1, #8]
 8009b78:	2e00      	cmp	r6, #0
 8009b7a:	dd9f      	ble.n	8009abc <__sflush_r+0x18>
 8009b7c:	4633      	mov	r3, r6
 8009b7e:	463a      	mov	r2, r7
 8009b80:	4628      	mov	r0, r5
 8009b82:	6a21      	ldr	r1, [r4, #32]
 8009b84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009b88:	47e0      	blx	ip
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	dc06      	bgt.n	8009b9c <__sflush_r+0xf8>
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295
 8009b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	e790      	b.n	8009abe <__sflush_r+0x1a>
 8009b9c:	4407      	add	r7, r0
 8009b9e:	1a36      	subs	r6, r6, r0
 8009ba0:	e7ea      	b.n	8009b78 <__sflush_r+0xd4>
 8009ba2:	bf00      	nop
 8009ba4:	dfbffffe 	.word	0xdfbffffe

08009ba8 <_fflush_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	690b      	ldr	r3, [r1, #16]
 8009bac:	4605      	mov	r5, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	b913      	cbnz	r3, 8009bb8 <_fflush_r+0x10>
 8009bb2:	2500      	movs	r5, #0
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	b118      	cbz	r0, 8009bc2 <_fflush_r+0x1a>
 8009bba:	6a03      	ldr	r3, [r0, #32]
 8009bbc:	b90b      	cbnz	r3, 8009bc2 <_fflush_r+0x1a>
 8009bbe:	f7ff f8f7 	bl	8008db0 <__sinit>
 8009bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d0f3      	beq.n	8009bb2 <_fflush_r+0xa>
 8009bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bcc:	07d0      	lsls	r0, r2, #31
 8009bce:	d404      	bmi.n	8009bda <_fflush_r+0x32>
 8009bd0:	0599      	lsls	r1, r3, #22
 8009bd2:	d402      	bmi.n	8009bda <_fflush_r+0x32>
 8009bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bd6:	f7ff fa2b 	bl	8009030 <__retarget_lock_acquire_recursive>
 8009bda:	4628      	mov	r0, r5
 8009bdc:	4621      	mov	r1, r4
 8009bde:	f7ff ff61 	bl	8009aa4 <__sflush_r>
 8009be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009be4:	4605      	mov	r5, r0
 8009be6:	07da      	lsls	r2, r3, #31
 8009be8:	d4e4      	bmi.n	8009bb4 <_fflush_r+0xc>
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	059b      	lsls	r3, r3, #22
 8009bee:	d4e1      	bmi.n	8009bb4 <_fflush_r+0xc>
 8009bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bf2:	f7ff fa1e 	bl	8009032 <__retarget_lock_release_recursive>
 8009bf6:	e7dd      	b.n	8009bb4 <_fflush_r+0xc>

08009bf8 <__swbuf_r>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	460e      	mov	r6, r1
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	4605      	mov	r5, r0
 8009c00:	b118      	cbz	r0, 8009c0a <__swbuf_r+0x12>
 8009c02:	6a03      	ldr	r3, [r0, #32]
 8009c04:	b90b      	cbnz	r3, 8009c0a <__swbuf_r+0x12>
 8009c06:	f7ff f8d3 	bl	8008db0 <__sinit>
 8009c0a:	69a3      	ldr	r3, [r4, #24]
 8009c0c:	60a3      	str	r3, [r4, #8]
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	071a      	lsls	r2, r3, #28
 8009c12:	d525      	bpl.n	8009c60 <__swbuf_r+0x68>
 8009c14:	6923      	ldr	r3, [r4, #16]
 8009c16:	b31b      	cbz	r3, 8009c60 <__swbuf_r+0x68>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	6922      	ldr	r2, [r4, #16]
 8009c1c:	b2f6      	uxtb	r6, r6
 8009c1e:	1a98      	subs	r0, r3, r2
 8009c20:	6963      	ldr	r3, [r4, #20]
 8009c22:	4637      	mov	r7, r6
 8009c24:	4283      	cmp	r3, r0
 8009c26:	dc04      	bgt.n	8009c32 <__swbuf_r+0x3a>
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f7ff ffbc 	bl	8009ba8 <_fflush_r>
 8009c30:	b9e0      	cbnz	r0, 8009c6c <__swbuf_r+0x74>
 8009c32:	68a3      	ldr	r3, [r4, #8]
 8009c34:	3b01      	subs	r3, #1
 8009c36:	60a3      	str	r3, [r4, #8]
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	6022      	str	r2, [r4, #0]
 8009c3e:	701e      	strb	r6, [r3, #0]
 8009c40:	6962      	ldr	r2, [r4, #20]
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d004      	beq.n	8009c52 <__swbuf_r+0x5a>
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	07db      	lsls	r3, r3, #31
 8009c4c:	d506      	bpl.n	8009c5c <__swbuf_r+0x64>
 8009c4e:	2e0a      	cmp	r6, #10
 8009c50:	d104      	bne.n	8009c5c <__swbuf_r+0x64>
 8009c52:	4621      	mov	r1, r4
 8009c54:	4628      	mov	r0, r5
 8009c56:	f7ff ffa7 	bl	8009ba8 <_fflush_r>
 8009c5a:	b938      	cbnz	r0, 8009c6c <__swbuf_r+0x74>
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c60:	4621      	mov	r1, r4
 8009c62:	4628      	mov	r0, r5
 8009c64:	f000 f806 	bl	8009c74 <__swsetup_r>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d0d5      	beq.n	8009c18 <__swbuf_r+0x20>
 8009c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8009c70:	e7f4      	b.n	8009c5c <__swbuf_r+0x64>
	...

08009c74 <__swsetup_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4b2a      	ldr	r3, [pc, #168]	; (8009d20 <__swsetup_r+0xac>)
 8009c78:	4605      	mov	r5, r0
 8009c7a:	6818      	ldr	r0, [r3, #0]
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	b118      	cbz	r0, 8009c88 <__swsetup_r+0x14>
 8009c80:	6a03      	ldr	r3, [r0, #32]
 8009c82:	b90b      	cbnz	r3, 8009c88 <__swsetup_r+0x14>
 8009c84:	f7ff f894 	bl	8008db0 <__sinit>
 8009c88:	89a3      	ldrh	r3, [r4, #12]
 8009c8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c8e:	0718      	lsls	r0, r3, #28
 8009c90:	d422      	bmi.n	8009cd8 <__swsetup_r+0x64>
 8009c92:	06d9      	lsls	r1, r3, #27
 8009c94:	d407      	bmi.n	8009ca6 <__swsetup_r+0x32>
 8009c96:	2309      	movs	r3, #9
 8009c98:	602b      	str	r3, [r5, #0]
 8009c9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca2:	81a3      	strh	r3, [r4, #12]
 8009ca4:	e034      	b.n	8009d10 <__swsetup_r+0x9c>
 8009ca6:	0758      	lsls	r0, r3, #29
 8009ca8:	d512      	bpl.n	8009cd0 <__swsetup_r+0x5c>
 8009caa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cac:	b141      	cbz	r1, 8009cc0 <__swsetup_r+0x4c>
 8009cae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cb2:	4299      	cmp	r1, r3
 8009cb4:	d002      	beq.n	8009cbc <__swsetup_r+0x48>
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f7ff f9d2 	bl	8009060 <_free_r>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	6363      	str	r3, [r4, #52]	; 0x34
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cc6:	81a3      	strh	r3, [r4, #12]
 8009cc8:	2300      	movs	r3, #0
 8009cca:	6063      	str	r3, [r4, #4]
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	f043 0308 	orr.w	r3, r3, #8
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	b94b      	cbnz	r3, 8009cf0 <__swsetup_r+0x7c>
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ce6:	d003      	beq.n	8009cf0 <__swsetup_r+0x7c>
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4628      	mov	r0, r5
 8009cec:	f000 f8ea 	bl	8009ec4 <__smakebuf_r>
 8009cf0:	89a0      	ldrh	r0, [r4, #12]
 8009cf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cf6:	f010 0301 	ands.w	r3, r0, #1
 8009cfa:	d00a      	beq.n	8009d12 <__swsetup_r+0x9e>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	60a3      	str	r3, [r4, #8]
 8009d00:	6963      	ldr	r3, [r4, #20]
 8009d02:	425b      	negs	r3, r3
 8009d04:	61a3      	str	r3, [r4, #24]
 8009d06:	6923      	ldr	r3, [r4, #16]
 8009d08:	b943      	cbnz	r3, 8009d1c <__swsetup_r+0xa8>
 8009d0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d0e:	d1c4      	bne.n	8009c9a <__swsetup_r+0x26>
 8009d10:	bd38      	pop	{r3, r4, r5, pc}
 8009d12:	0781      	lsls	r1, r0, #30
 8009d14:	bf58      	it	pl
 8009d16:	6963      	ldrpl	r3, [r4, #20]
 8009d18:	60a3      	str	r3, [r4, #8]
 8009d1a:	e7f4      	b.n	8009d06 <__swsetup_r+0x92>
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	e7f7      	b.n	8009d10 <__swsetup_r+0x9c>
 8009d20:	20000068 	.word	0x20000068

08009d24 <memmove>:
 8009d24:	4288      	cmp	r0, r1
 8009d26:	b510      	push	{r4, lr}
 8009d28:	eb01 0402 	add.w	r4, r1, r2
 8009d2c:	d902      	bls.n	8009d34 <memmove+0x10>
 8009d2e:	4284      	cmp	r4, r0
 8009d30:	4623      	mov	r3, r4
 8009d32:	d807      	bhi.n	8009d44 <memmove+0x20>
 8009d34:	1e43      	subs	r3, r0, #1
 8009d36:	42a1      	cmp	r1, r4
 8009d38:	d008      	beq.n	8009d4c <memmove+0x28>
 8009d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d42:	e7f8      	b.n	8009d36 <memmove+0x12>
 8009d44:	4601      	mov	r1, r0
 8009d46:	4402      	add	r2, r0
 8009d48:	428a      	cmp	r2, r1
 8009d4a:	d100      	bne.n	8009d4e <memmove+0x2a>
 8009d4c:	bd10      	pop	{r4, pc}
 8009d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d56:	e7f7      	b.n	8009d48 <memmove+0x24>

08009d58 <_raise_r>:
 8009d58:	291f      	cmp	r1, #31
 8009d5a:	b538      	push	{r3, r4, r5, lr}
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	460d      	mov	r5, r1
 8009d60:	d904      	bls.n	8009d6c <_raise_r+0x14>
 8009d62:	2316      	movs	r3, #22
 8009d64:	6003      	str	r3, [r0, #0]
 8009d66:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009d6e:	b112      	cbz	r2, 8009d76 <_raise_r+0x1e>
 8009d70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d74:	b94b      	cbnz	r3, 8009d8a <_raise_r+0x32>
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 f830 	bl	8009ddc <_getpid_r>
 8009d7c:	462a      	mov	r2, r5
 8009d7e:	4601      	mov	r1, r0
 8009d80:	4620      	mov	r0, r4
 8009d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d86:	f000 b817 	b.w	8009db8 <_kill_r>
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d00a      	beq.n	8009da4 <_raise_r+0x4c>
 8009d8e:	1c59      	adds	r1, r3, #1
 8009d90:	d103      	bne.n	8009d9a <_raise_r+0x42>
 8009d92:	2316      	movs	r3, #22
 8009d94:	6003      	str	r3, [r0, #0]
 8009d96:	2001      	movs	r0, #1
 8009d98:	e7e7      	b.n	8009d6a <_raise_r+0x12>
 8009d9a:	2400      	movs	r4, #0
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009da2:	4798      	blx	r3
 8009da4:	2000      	movs	r0, #0
 8009da6:	e7e0      	b.n	8009d6a <_raise_r+0x12>

08009da8 <raise>:
 8009da8:	4b02      	ldr	r3, [pc, #8]	; (8009db4 <raise+0xc>)
 8009daa:	4601      	mov	r1, r0
 8009dac:	6818      	ldr	r0, [r3, #0]
 8009dae:	f7ff bfd3 	b.w	8009d58 <_raise_r>
 8009db2:	bf00      	nop
 8009db4:	20000068 	.word	0x20000068

08009db8 <_kill_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4d06      	ldr	r5, [pc, #24]	; (8009dd8 <_kill_r+0x20>)
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	602b      	str	r3, [r5, #0]
 8009dc6:	f7f6 fd1c 	bl	8000802 <_kill>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	d102      	bne.n	8009dd4 <_kill_r+0x1c>
 8009dce:	682b      	ldr	r3, [r5, #0]
 8009dd0:	b103      	cbz	r3, 8009dd4 <_kill_r+0x1c>
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	bd38      	pop	{r3, r4, r5, pc}
 8009dd6:	bf00      	nop
 8009dd8:	200037b0 	.word	0x200037b0

08009ddc <_getpid_r>:
 8009ddc:	f7f6 bd0a 	b.w	80007f4 <_getpid>

08009de0 <_sbrk_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	2300      	movs	r3, #0
 8009de4:	4d05      	ldr	r5, [pc, #20]	; (8009dfc <_sbrk_r+0x1c>)
 8009de6:	4604      	mov	r4, r0
 8009de8:	4608      	mov	r0, r1
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	f7f6 fd8c 	bl	8000908 <_sbrk>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_sbrk_r+0x1a>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_sbrk_r+0x1a>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	200037b0 	.word	0x200037b0

08009e00 <memchr>:
 8009e00:	4603      	mov	r3, r0
 8009e02:	b510      	push	{r4, lr}
 8009e04:	b2c9      	uxtb	r1, r1
 8009e06:	4402      	add	r2, r0
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	d101      	bne.n	8009e12 <memchr+0x12>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	e003      	b.n	8009e1a <memchr+0x1a>
 8009e12:	7804      	ldrb	r4, [r0, #0]
 8009e14:	3301      	adds	r3, #1
 8009e16:	428c      	cmp	r4, r1
 8009e18:	d1f6      	bne.n	8009e08 <memchr+0x8>
 8009e1a:	bd10      	pop	{r4, pc}

08009e1c <_realloc_r>:
 8009e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e20:	4680      	mov	r8, r0
 8009e22:	4614      	mov	r4, r2
 8009e24:	460e      	mov	r6, r1
 8009e26:	b921      	cbnz	r1, 8009e32 <_realloc_r+0x16>
 8009e28:	4611      	mov	r1, r2
 8009e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	f7ff b97f 	b.w	8009130 <_malloc_r>
 8009e32:	b92a      	cbnz	r2, 8009e40 <_realloc_r+0x24>
 8009e34:	f7ff f914 	bl	8009060 <_free_r>
 8009e38:	4625      	mov	r5, r4
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e40:	f000 f89e 	bl	8009f80 <_malloc_usable_size_r>
 8009e44:	4284      	cmp	r4, r0
 8009e46:	4607      	mov	r7, r0
 8009e48:	d802      	bhi.n	8009e50 <_realloc_r+0x34>
 8009e4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e4e:	d812      	bhi.n	8009e76 <_realloc_r+0x5a>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4640      	mov	r0, r8
 8009e54:	f7ff f96c 	bl	8009130 <_malloc_r>
 8009e58:	4605      	mov	r5, r0
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d0ed      	beq.n	8009e3a <_realloc_r+0x1e>
 8009e5e:	42bc      	cmp	r4, r7
 8009e60:	4622      	mov	r2, r4
 8009e62:	4631      	mov	r1, r6
 8009e64:	bf28      	it	cs
 8009e66:	463a      	movcs	r2, r7
 8009e68:	f7ff f8e4 	bl	8009034 <memcpy>
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4640      	mov	r0, r8
 8009e70:	f7ff f8f6 	bl	8009060 <_free_r>
 8009e74:	e7e1      	b.n	8009e3a <_realloc_r+0x1e>
 8009e76:	4635      	mov	r5, r6
 8009e78:	e7df      	b.n	8009e3a <_realloc_r+0x1e>

08009e7a <__swhatbuf_r>:
 8009e7a:	b570      	push	{r4, r5, r6, lr}
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e82:	4615      	mov	r5, r2
 8009e84:	2900      	cmp	r1, #0
 8009e86:	461e      	mov	r6, r3
 8009e88:	b096      	sub	sp, #88	; 0x58
 8009e8a:	da0c      	bge.n	8009ea6 <__swhatbuf_r+0x2c>
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	2100      	movs	r1, #0
 8009e90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e94:	bf0c      	ite	eq
 8009e96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e9a:	2340      	movne	r3, #64	; 0x40
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	6031      	str	r1, [r6, #0]
 8009ea0:	602b      	str	r3, [r5, #0]
 8009ea2:	b016      	add	sp, #88	; 0x58
 8009ea4:	bd70      	pop	{r4, r5, r6, pc}
 8009ea6:	466a      	mov	r2, sp
 8009ea8:	f000 f848 	bl	8009f3c <_fstat_r>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	dbed      	blt.n	8009e8c <__swhatbuf_r+0x12>
 8009eb0:	9901      	ldr	r1, [sp, #4]
 8009eb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009eb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009eba:	4259      	negs	r1, r3
 8009ebc:	4159      	adcs	r1, r3
 8009ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ec2:	e7eb      	b.n	8009e9c <__swhatbuf_r+0x22>

08009ec4 <__smakebuf_r>:
 8009ec4:	898b      	ldrh	r3, [r1, #12]
 8009ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ec8:	079d      	lsls	r5, r3, #30
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460c      	mov	r4, r1
 8009ece:	d507      	bpl.n	8009ee0 <__smakebuf_r+0x1c>
 8009ed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	6123      	str	r3, [r4, #16]
 8009ed8:	2301      	movs	r3, #1
 8009eda:	6163      	str	r3, [r4, #20]
 8009edc:	b002      	add	sp, #8
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	466a      	mov	r2, sp
 8009ee2:	ab01      	add	r3, sp, #4
 8009ee4:	f7ff ffc9 	bl	8009e7a <__swhatbuf_r>
 8009ee8:	9900      	ldr	r1, [sp, #0]
 8009eea:	4605      	mov	r5, r0
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7ff f91f 	bl	8009130 <_malloc_r>
 8009ef2:	b948      	cbnz	r0, 8009f08 <__smakebuf_r+0x44>
 8009ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef8:	059a      	lsls	r2, r3, #22
 8009efa:	d4ef      	bmi.n	8009edc <__smakebuf_r+0x18>
 8009efc:	f023 0303 	bic.w	r3, r3, #3
 8009f00:	f043 0302 	orr.w	r3, r3, #2
 8009f04:	81a3      	strh	r3, [r4, #12]
 8009f06:	e7e3      	b.n	8009ed0 <__smakebuf_r+0xc>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	6020      	str	r0, [r4, #0]
 8009f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f10:	81a3      	strh	r3, [r4, #12]
 8009f12:	9b00      	ldr	r3, [sp, #0]
 8009f14:	6120      	str	r0, [r4, #16]
 8009f16:	6163      	str	r3, [r4, #20]
 8009f18:	9b01      	ldr	r3, [sp, #4]
 8009f1a:	b15b      	cbz	r3, 8009f34 <__smakebuf_r+0x70>
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f22:	f000 f81d 	bl	8009f60 <_isatty_r>
 8009f26:	b128      	cbz	r0, 8009f34 <__smakebuf_r+0x70>
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	f023 0303 	bic.w	r3, r3, #3
 8009f2e:	f043 0301 	orr.w	r3, r3, #1
 8009f32:	81a3      	strh	r3, [r4, #12]
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	431d      	orrs	r5, r3
 8009f38:	81a5      	strh	r5, [r4, #12]
 8009f3a:	e7cf      	b.n	8009edc <__smakebuf_r+0x18>

08009f3c <_fstat_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4d06      	ldr	r5, [pc, #24]	; (8009f5c <_fstat_r+0x20>)
 8009f42:	4604      	mov	r4, r0
 8009f44:	4608      	mov	r0, r1
 8009f46:	4611      	mov	r1, r2
 8009f48:	602b      	str	r3, [r5, #0]
 8009f4a:	f7f6 fcb8 	bl	80008be <_fstat>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d102      	bne.n	8009f58 <_fstat_r+0x1c>
 8009f52:	682b      	ldr	r3, [r5, #0]
 8009f54:	b103      	cbz	r3, 8009f58 <_fstat_r+0x1c>
 8009f56:	6023      	str	r3, [r4, #0]
 8009f58:	bd38      	pop	{r3, r4, r5, pc}
 8009f5a:	bf00      	nop
 8009f5c:	200037b0 	.word	0x200037b0

08009f60 <_isatty_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	2300      	movs	r3, #0
 8009f64:	4d05      	ldr	r5, [pc, #20]	; (8009f7c <_isatty_r+0x1c>)
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	f7f6 fcb6 	bl	80008dc <_isatty>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_isatty_r+0x1a>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_isatty_r+0x1a>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	200037b0 	.word	0x200037b0

08009f80 <_malloc_usable_size_r>:
 8009f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f84:	1f18      	subs	r0, r3, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfbc      	itt	lt
 8009f8a:	580b      	ldrlt	r3, [r1, r0]
 8009f8c:	18c0      	addlt	r0, r0, r3
 8009f8e:	4770      	bx	lr

08009f90 <_init>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	bf00      	nop
 8009f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f96:	bc08      	pop	{r3}
 8009f98:	469e      	mov	lr, r3
 8009f9a:	4770      	bx	lr

08009f9c <_fini>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	bf00      	nop
 8009fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa2:	bc08      	pop	{r3}
 8009fa4:	469e      	mov	lr, r3
 8009fa6:	4770      	bx	lr
